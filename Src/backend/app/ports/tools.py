"""
Agent tools and startup registration.
"""
from __future__ import annotations
from typing import Any, Dict, List
from fastapi import HTTPException
from app.ports.planner import register_tool
from app.adapters.jira_adapter import create_epic
from app.adapters.confluence_adapter import create_page
from worker.handlers.evidence_builder import to_confluence_html


def rag_search_tool(
    *,
    user_claims: Dict[str, Any],
    query: str,
    targets: List[str] | None = None,
    k: int = 12,
    strategy: str = "qdrant",
) -> Dict[str, Any]:
    """Expose the retrieval service as a planner tool."""
    tenant_id = user_claims.get("tenant_id")
    if not tenant_id:
        raise HTTPException(status_code=400, detail="Missing tenant context")

    # Lazy import (avoids circulars during startup)
    import app.application.retrieval_service as retrieval_service

    return retrieval_service.rag_search(
        tenant_id=tenant_id,
        user_claims=user_claims,
        query=query,
        targets=targets or ["global"],
        k=k,
        strategy=strategy,
    )


def jira_epic_tool(
    *,
    user_claims: Dict[str, Any],
    project_key: str,
    summary: str,
    description: str = "Created by North Star",
) -> Dict[str, Any]:
    return create_epic(project_key, summary, description)


def confluence_page_tool(
    *,
    user_claims: Dict[str, Any],
    space: str,
    title: str,
    html: str | None = None,
    evidence: str | None = None,
) -> Dict[str, Any]:
    body_html = html or to_confluence_html(evidence or "Auto-generated by North Star")
    return create_page(space, title, body_html)


def register_all_tools() -> None:
    register_tool("rag_search", rag_search_tool)
    register_tool("jira_epic", jira_epic_tool)
    register_tool("confluence_page", confluence_page_tool)
