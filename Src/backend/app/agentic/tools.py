"""Agent tools and registration conveniences for the planner."""

from __future__ import annotations

from typing import Any, Dict, List

from fastapi import HTTPException
from loguru import logger

from app.ports.planner import register_tool
from app.adapters.jira_adapter import create_epic
from app.adapters.confluence_adapter import create_page
from worker.handlers.evidence_builder import to_confluence_html
from app.config import settings
from app.domain.errors import ExternalServiceError
from app.application.policy_bus import enforce


def rag_search_tool(
    *,
    user_claims: Dict[str, Any],
    query: str,
    targets: List[str] | None = None,
    k: int = 12,
    strategy: str = "qdrant",
) -> Dict[str, Any]:
    """Expose the retrieval service as a planner tool."""
    tenant_id = user_claims.get("tenant_id")
    if not tenant_id:
        raise HTTPException(status_code=400, detail="Missing tenant context")

    from app.ports import retriever as retriever_port

    payload = retriever_port.rag_search(
        tenant_id=tenant_id,
        user_claims=user_claims,
        query=query,
        targets=targets or ["global"],
        k=k,
        strategy=strategy,
    )
    return payload


def jira_epic_tool(
    *,
    user_claims: Dict[str, Any],
    project_key: str,
    summary: str | None = None,
    epic: str | None = None,
    description: str = "Created by North Star",
) -> Dict[str, Any]:
    role = user_claims.get("role", "Dev")
    enforce("publish_artifact", role)

    title = summary or epic
    if not title:
        raise HTTPException(status_code=400, detail="Missing epic summary")

    if not settings.atlassian_base_url or not settings.atlassian_email or not settings.atlassian_api_token:
        raise HTTPException(status_code=502, detail="Atlassian Jira integration is not configured")

    try:
        result = create_epic(project_key, title, description)
        logger.info(
            "publish_artifact:jira_epic",
            project_key=project_key,
            actor_role=role,
            actor="redacted",
        )
        return result
    except ExternalServiceError as exc:
        return {"error": exc.message}


def confluence_page_tool(
    *,
    user_claims: Dict[str, Any],
    space: str,
    title: str,
    html: str | None = None,
    evidence: str | None = None,
) -> Dict[str, Any]:
    role = user_claims.get("role", "Dev")
    enforce("publish_artifact", role)

    if not space:
        return {"skipped": "Missing Confluence space"}

    if not settings.atlassian_base_url or not settings.atlassian_email or not settings.atlassian_api_token:
        raise HTTPException(status_code=502, detail="Atlassian Confluence integration is not configured")

    body_html = html or to_confluence_html(evidence or "Auto-generated by North Star")
    try:
        result = create_page(space, title, body_html)
        logger.info(
            "publish_artifact:confluence_page",
            space=space,
            title=title[:120],
            actor_role=role,
            actor="redacted",
        )
        return result
    except ExternalServiceError as exc:
        return {"error": exc.message}


def register_all_tools() -> None:
    register_tool("rag_search", rag_search_tool)
    register_tool("jira_epic", jira_epic_tool)
    register_tool("confluence_page", confluence_page_tool)
