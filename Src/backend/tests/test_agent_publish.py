from __future__ import annotations

from typing import Dict

import pytest
from fastapi.testclient import TestClient

from app.config import settings


def _get_token(client: TestClient, username: str) -> str:
    response = client.post(f"/auth/token?username={username}&password=x")
    assert response.status_code == 200, response.text
    return response.json()["access_token"]


def _headers(client: TestClient, username: str) -> Dict[str, str]:
    return {"Authorization": f"Bearer {_get_token(client, username)}"}


@pytest.fixture
def planner_plan(monkeypatch: pytest.MonkeyPatch) -> Dict[str, object]:
    plan = {
        "steps": [
            {
                "tool": "jira_epic",
                "args": {
                    "project_key": "PX",
                    "summary": "PX onboarding",
                    "description": "Generated by test",
                },
            }
        ],
        "output": {},
        "_meta": {"task_prompt": "Publish artifacts"},
    }
    monkeypatch.setattr("app.routes.agent_routes.create_plan", lambda *args, **kwargs: plan)
    return plan


def test_ba_can_publish_jira(monkeypatch: pytest.MonkeyPatch, client: TestClient, planner_plan: Dict[str, object]) -> None:
    monkeypatch.setattr(settings, "atlassian_base_url", "https://example.atlassian.net")
    monkeypatch.setattr(settings, "atlassian_email", "agent@example.com")
    monkeypatch.setattr(settings, "atlassian_api_token", "token-123")
    monkeypatch.setattr("app.adapters.jira_adapter.create_epic", lambda *args, **kwargs: {"key": "PX-1"})

    response = client.post(
        "/agent/query",
        headers=_headers(client, "ba_nancy"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )

    assert response.status_code == 200, response.text
    payload = response.json()
    assert payload["artifacts"].get("step_1:jira_epic") == {"key": "PX-1"}


def test_dev_forbidden_from_publish(client: TestClient, planner_plan: Dict[str, object]) -> None:
    response = client.post(
        "/agent/query",
        headers=_headers(client, "dev_alex"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )
    assert response.status_code == 403


def test_missing_atlassian_creds_returns_502(monkeypatch: pytest.MonkeyPatch, client: TestClient, planner_plan: Dict[str, object]) -> None:
    monkeypatch.setattr(settings, "atlassian_base_url", "")
    monkeypatch.setattr(settings, "atlassian_email", "")
    monkeypatch.setattr(settings, "atlassian_api_token", "")

    response = client.post(
        "/agent/query",
        headers=_headers(client, "ba_nancy"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )

    assert response.status_code == 502
    assert "Atlassian" in response.json()["detail"]
