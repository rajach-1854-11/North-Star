from __future__ import annotations

from typing import Dict, List

import pytest
from fastapi.testclient import TestClient

from app.config import settings


def _get_token(client: TestClient, username: str) -> str:
    response = client.post(f"/auth/token?username={username}&password=x")
    assert response.status_code == 200, response.text
    return response.json()["access_token"]


def _headers(client: TestClient, username: str) -> Dict[str, str]:
    return {"Authorization": f"Bearer {_get_token(client, username)}"}


def _set_plan(monkeypatch: pytest.MonkeyPatch, steps: List[Dict[str, object]]) -> None:
    plan = {"steps": steps, "output": {}, "_meta": {"task_prompt": "Publish artifacts"}}
    monkeypatch.setattr("app.routes.agent_routes.create_plan", lambda *args, **kwargs: plan)


@pytest.fixture(autouse=True)
def _atl_creds(monkeypatch: pytest.MonkeyPatch) -> None:
    monkeypatch.setattr(settings, "atlassian_base_url", "https://example.atlassian.net")
    monkeypatch.setattr(settings, "atlassian_email", "agent@example.com")
    monkeypatch.setattr(settings, "atlassian_api_token", "token-123")


def test_publish_jira_po_success(monkeypatch: pytest.MonkeyPatch, client: TestClient) -> None:
    _set_plan(
        monkeypatch,
        [
            {
                "tool": "jira_epic",
                "args": {
                    "project_key": "PX",
                    "summary": "PX onboarding",
                    "description": "Generated by test",
                    "labels": ["onboarding", "northstar"],
                },
            }
        ],
    )

    monkeypatch.setattr("app.adapters.jira_adapter.resolve_project", lambda key: {"id": "1001", "key": key})

    captured: Dict[str, object] = {}

    def _fake_create_epic(**kwargs: object) -> Dict[str, object]:
        captured.update(kwargs)
        return {"key": "PX-1", "project_id": kwargs["project_id"], "labels": kwargs.get("labels")}

    monkeypatch.setattr("app.adapters.jira_adapter.create_epic", _fake_create_epic)

    response = client.post(
        "/agent/query",
        headers=_headers(client, "po_admin"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )

    assert response.status_code == 200, response.text
    payload = response.json()
    assert payload["artifacts"]["step_1:jira_epic"]["key"] == "PX-1"
    assert captured["project_id"] == "1001"
    assert captured["labels"] == ["onboarding", "northstar"]


def test_publish_confluence_ba_success(monkeypatch: pytest.MonkeyPatch, client: TestClient) -> None:
    _set_plan(
        monkeypatch,
        [
            {
                "tool": "confluence_page",
                "args": {
                    "space_key": "ENG",
                    "title": "North Star Weekly",
                    "body_html": "<p>Weekly digest</p>",
                },
            }
        ],
    )

    monkeypatch.setattr("app.adapters.confluence_adapter.resolve_space", lambda key: {"id": "2002", "key": key})

    created: Dict[str, object] = {}

    def _fake_create_page(**kwargs: object) -> Dict[str, object]:
        created.update(kwargs)
        return {"page_id": "123", "status": "draft", "space_key": kwargs["space_key"]}

    monkeypatch.setattr("app.adapters.confluence_adapter.create_page", _fake_create_page)
    monkeypatch.setattr(settings, "confluence_draft_mode", True)

    response = client.post(
        "/agent/query",
        headers=_headers(client, "ba_nancy"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["confluence_page"]},
    )

    assert response.status_code == 200, response.text
    payload = response.json()
    artifact = payload["artifacts"]["step_1:confluence_page"]
    assert artifact["status"] == "draft"
    assert created["draft"] is True
    assert created["space_id"] == "2002"


def test_publish_args_invalid(monkeypatch: pytest.MonkeyPatch, client: TestClient) -> None:
    _set_plan(
        monkeypatch,
        [
            {
                "tool": "jira_epic",
                "args": {
                    "project_key": "",
                    "summary": "",
                    "description": "",
                },
            }
        ],
    )

    response = client.post(
        "/agent/query",
        headers=_headers(client, "ba_nancy"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )

    assert response.status_code == 400
    body = response.json()
    assert body["code"] == "TOOL_ARGS_INVALID"
    assert set(body["details"]["missing"]) == {"project_key", "summary", "description"}


def test_publish_rbac_denied_dev(monkeypatch: pytest.MonkeyPatch, client: TestClient) -> None:
    _set_plan(
        monkeypatch,
        [
            {
                "tool": "jira_epic",
                "args": {
                    "project_key": "PX",
                    "summary": "PX onboarding",
                    "description": "Generated by test",
                },
            }
        ],
    )

    response = client.post(
        "/agent/query",
        headers=_headers(client, "dev_alex"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic"]},
    )

    assert response.status_code == 403
    assert response.json()["code"] == "RBAC_DENIED"


def test_publish_integration_both_tools(monkeypatch: pytest.MonkeyPatch, client: TestClient) -> None:
    steps = [
        {
            "tool": "jira_epic",
            "args": {
                "project_key": "PX",
                "summary": "PX onboarding",
                "description": "Generated by test",
            },
        },
        {
            "tool": "confluence_page",
            "args": {
                "space_key": "ENG",
                "title": "North Star Weekly",
                "body_html": "<p>Digest</p>",
            },
        },
    ]
    _set_plan(monkeypatch, steps)

    monkeypatch.setattr("app.adapters.jira_adapter.resolve_project", lambda key: {"id": "1001", "key": key})
    monkeypatch.setattr("app.adapters.confluence_adapter.resolve_space", lambda key: {"id": "2002", "key": key})
    monkeypatch.setattr("app.adapters.jira_adapter.create_epic", lambda **kwargs: {"key": "PX-99"})
    monkeypatch.setattr(
        "app.adapters.confluence_adapter.create_page",
        lambda **kwargs: {"page_id": "C-10", "status": "current", "space_key": kwargs["space_key"]},
    )

    response = client.post(
        "/agent/query",
        headers=_headers(client, "ba_nancy"),
        json={"prompt": "Publish artifacts", "allowed_tools": ["jira_epic", "confluence_page"]},
    )

    assert response.status_code == 200, response.text
    payload = response.json()
    assert payload["artifacts"]["step_1:jira_epic"]["key"] == "PX-99"
    assert payload["artifacts"]["step_2:confluence_page"]["page_id"] == "C-10"
