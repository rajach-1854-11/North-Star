{
  "backend_root": "C:\\Users\\rchan\\OneDrive\\Desktop\\Git-Rajach-1854-11\\North-Star\\Src\\backend",
  "background_handlers": [
    {
      "calls": [
        {
          "category": "internal",
          "display": "set()",
          "lineno": 21,
          "name": "set",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "seen_ids.add(cid)",
          "lineno": 29,
          "name": "seen_ids.add",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(h.source or '')",
          "lineno": 31,
          "name": "str",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "per_source.get(src, 0)",
          "lineno": 32,
          "name": "per_source.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "' '.join((h.text or '').split())",
          "lineno": 36,
          "name": " .join",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "(h.text or '').split()",
          "lineno": 36,
          "name": "split",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "len(snippet)",
          "lineno": 37,
          "name": "len",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "len(block)",
          "lineno": 41,
          "name": "len",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "buf.append(block)",
          "lineno": 44,
          "name": "buf.append",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "len(block)",
          "lineno": 45,
          "name": "len",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "'\\n'.join(buf)",
          "lineno": 49,
          "name": "\n.join",
          "resolved_module": null
        }
      ],
      "docstring": "Build a compact, LLM-friendly evidence string:\n  - de-duplicates by chunk_id\n  - caps number of snippets per source\n  - trims whitespace and long snippets\n  - respects an overall character budget (max_chars)",
      "function": "build_evidence_snippets",
      "lineno": 6,
      "module": "worker.handlers.evidence_builder",
      "path": "Src/backend/worker/handlers/evidence_builder.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "evidence.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')",
          "lineno": 55,
          "name": "evidence.replace.replace.replace",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "evidence.replace('&', '&amp;').replace('<', '&lt;')",
          "lineno": 55,
          "name": "evidence.replace.replace",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "evidence.replace('&', '&amp;')",
          "lineno": 55,
          "name": "evidence.replace",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "ln.strip()",
          "lineno": 59,
          "name": "ln.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "esc.split('\\n')",
          "lineno": 59,
          "name": "esc.split",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "ln.strip()",
          "lineno": 59,
          "name": "ln.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "''.join((f'<p>{line}</p>' for line in lines))",
          "lineno": 60,
          "name": "join",
          "resolved_module": null
        }
      ],
      "docstring": "Convert raw evidence text into basic Confluence storage HTML.",
      "function": "to_confluence_html",
      "lineno": 51,
      "module": "worker.handlers.evidence_builder",
      "path": "Src/backend/worker/handlers/evidence_builder.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "evidence.split('\\n')",
          "lineno": 67,
          "name": "evidence.split",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "line.strip()",
          "lineno": 68,
          "name": "line.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "blocks.append({'type': 'paragraph', 'content': [{'type': 'text', 'text': line}]})",
          "lineno": 71,
          "name": "blocks.append",
          "resolved_module": null
        }
      ],
      "docstring": "Convert evidence text into Jira's Atlassian Document Format.",
      "function": "to_jira_description",
      "lineno": 63,
      "module": "worker.handlers.evidence_builder",
      "path": "Src/backend/worker/handlers/evidence_builder.py"
    },
    {
      "calls": [
        {
          "category": "integration",
          "display": "GitHubEventProcessor(payload)",
          "lineno": 16,
          "name": "GitHubEventProcessor",
          "resolved_module": "worker.services.github_processor.GitHubEventProcessor"
        },
        {
          "category": "internal",
          "display": "logger.info('github_handler.processing', extra={'event': processor.event, 'delivery': processor.delivery_key, 'repo': processor.body.get('repository', {}).get('full_name', 'unknown')})",
          "lineno": 17,
          "name": "logger.info",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "processor.body.get('repository', {}).get('full_name', 'unknown')",
          "lineno": 22,
          "name": "processor.body.get.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "processor.body.get('repository', {})",
          "lineno": 22,
          "name": "processor.body.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "processor.process()",
          "lineno": 25,
          "name": "processor.process",
          "resolved_module": null
        }
      ],
      "docstring": "Dispatch a GitHub webhook payload to the GitHub processor.",
      "function": "handle_github_event",
      "lineno": 13,
      "module": "worker.handlers.github_handler",
      "path": "Src/backend/worker/handlers/github_handler.py"
    },
    {
      "calls": [
        {
          "category": "integration",
          "display": "JiraEventProcessor(payload)",
          "lineno": 12,
          "name": "JiraEventProcessor",
          "resolved_module": "worker.services.jira_processor.JiraEventProcessor"
        },
        {
          "category": "internal",
          "display": "logger.info('jira_handler.processing', extra={'event': processor.event, 'delivery': processor.delivery_key})",
          "lineno": 13,
          "name": "logger.info",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "processor.process()",
          "lineno": 17,
          "name": "processor.process",
          "resolved_module": null
        }
      ],
      "docstring": null,
      "function": "handle_jira_event",
      "lineno": 11,
      "module": "worker.handlers.jira_handler",
      "path": "Src/backend/worker/handlers/jira_handler.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "', '.join(sorted(payload.keys()))",
          "lineno": 22,
          "name": ", .join",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "sorted(payload.keys())",
          "lineno": 22,
          "name": "sorted",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "payload.keys()",
          "lineno": 22,
          "name": "payload.keys",
          "resolved_module": null
        }
      ],
      "docstring": null,
      "function": "_format_prompt",
      "lineno": 21,
      "module": "worker.handlers.skill_extractor",
      "path": "Src/backend/worker/handlers/skill_extractor.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "_format_prompt(event, payload)",
          "lineno": 33,
          "name": "_format_prompt",
          "resolved_module": null
        },
        {
          "category": "integration",
          "display": "chat_json(prompt, SCHEMA_HINT)",
          "lineno": 34,
          "name": "chat_json",
          "resolved_module": "app.adapters.cerebras_planner.chat_json"
        },
        {
          "category": "internal",
          "display": "output.get('assertions', [])",
          "lineno": 36,
          "name": "output.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p).strip()",
          "lineno": 37,
          "name": "str.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p)",
          "lineno": 37,
          "name": "str",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "raw.get('path', [])",
          "lineno": 37,
          "name": "raw.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p).strip()",
          "lineno": 37,
          "name": "str.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p)",
          "lineno": 37,
          "name": "str",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "assertions.append({'path': path, 'confidence': float(raw.get('confidence', settings.skill_confidence_default)), 'evidence': raw.get('evidence') or 'gh:event'})",
          "lineno": 41,
          "name": "assertions.append",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "float(raw.get('confidence', settings.skill_confidence_default))",
          "lineno": 44,
          "name": "float",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "raw.get('confidence', settings.skill_confidence_default)",
          "lineno": 44,
          "name": "raw.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "raw.get('evidence')",
          "lineno": 45,
          "name": "raw.get",
          "resolved_module": null
        }
      ],
      "docstring": "Call the planner to derive skill assertions without mutating the database.",
      "function": "generate_skill_assertions",
      "lineno": 30,
      "module": "worker.handlers.skill_extractor",
      "path": "Src/backend/worker/handlers/skill_extractor.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "str(p).strip()",
          "lineno": 54,
          "name": "str.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p)",
          "lineno": 54,
          "name": "str",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p).strip()",
          "lineno": 54,
          "name": "str.strip",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "str(p)",
          "lineno": 54,
          "name": "str",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "'>'.join(parts)",
          "lineno": 57,
          "name": ">.join",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "len(parts)",
          "lineno": 58,
          "name": "len",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "session.execute(text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES(:name, NULL, :path, :depth)\\n            ON CONFLICT (path_cache) DO UPDATE SET\\n                name = EXCLUDED.name,\\n                depth = EXCLUDED.depth\\n            '), {'name': parts[-1], 'path': path_cache, 'depth': depth})",
          "lineno": 59,
          "name": "session.execute",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES(:name, NULL, :path, :depth)\\n            ON CONFLICT (path_cache) DO UPDATE SET\\n                name = EXCLUDED.name,\\n                depth = EXCLUDED.depth\\n            ')",
          "lineno": 60,
          "name": "text",
          "resolved_module": "sqlalchemy.text"
        },
        {
          "category": "internal",
          "display": "session.execute(text('SELECT id FROM skill WHERE path_cache=:path'), {'path': path_cache}).scalar_one()",
          "lineno": 71,
          "name": "session.execute.scalar_one",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "session.execute(text('SELECT id FROM skill WHERE path_cache=:path'), {'path': path_cache})",
          "lineno": 71,
          "name": "session.execute",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "text('SELECT id FROM skill WHERE path_cache=:path')",
          "lineno": 72,
          "name": "text",
          "resolved_module": "sqlalchemy.text"
        },
        {
          "category": "internal",
          "display": "int(skill_id)",
          "lineno": 74,
          "name": "int",
          "resolved_module": null
        }
      ],
      "docstring": "Ensure a skill hierarchy path exists and return the leaf skill id.",
      "function": "ensure_skill",
      "lineno": 51,
      "module": "worker.handlers.skill_extractor",
      "path": "Src/backend/worker/handlers/skill_extractor.py"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "session.execute(text('\\n            INSERT INTO developer_skill(developer_id, skill_id, score, confidence, evidence_ref, project_id)\\n            VALUES(:developer_id, :skill_id, :delta, :confidence, :evidence_ref, :project_id)\\n            ON CONFLICT (developer_id, skill_id) DO UPDATE SET\\n                score = developer_skill.score + EXCLUDED.score,\\n                confidence = MAX(developer_skill.confidence, EXCLUDED.confidence),\\n                evidence_ref = EXCLUDED.evidence_ref,\\n                project_id = COALESCE(EXCLUDED.project_id, developer_skill.project_id),\\n                last_seen_at = CURRENT_TIMESTAMP\\n            '), {'developer_id': developer_id, 'skill_id': skill_id, 'delta': delta, 'confidence': confidence, 'evidence_ref': evidence_ref[:255], 'project_id': project_id})",
          "lineno": 89,
          "name": "session.execute",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "text('\\n            INSERT INTO developer_skill(developer_id, skill_id, score, confidence, evidence_ref, project_id)\\n            VALUES(:developer_id, :skill_id, :delta, :confidence, :evidence_ref, :project_id)\\n            ON CONFLICT (developer_id, skill_id) DO UPDATE SET\\n                score = developer_skill.score + EXCLUDED.score,\\n                confidence = MAX(developer_skill.confidence, EXCLUDED.confidence),\\n                evidence_ref = EXCLUDED.evidence_ref,\\n                project_id = COALESCE(EXCLUDED.project_id, developer_skill.project_id),\\n                last_seen_at = CURRENT_TIMESTAMP\\n            ')",
          "lineno": 90,
          "name": "text",
          "resolved_module": "sqlalchemy.text"
        }
      ],
      "docstring": "Apply a score delta to a developer skill, ensuring timestamps update.",
      "function": "apply_skill_delta",
      "lineno": 77,
      "module": "worker.handlers.skill_extractor",
      "path": "Src/backend/worker/handlers/skill_extractor.py"
    }
  ],
  "endpoints": [
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 19,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin'))",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin')",
          "lineno": 20,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "list_users(db, tenant_id=tenant_id)",
          "lineno": 25,
          "name": "list_users",
          "resolved_module": "app.ports.users.list_users"
        },
        {
          "category": "internal",
          "display": "router.get('/users', response_model=UserListResp)",
          "lineno": 17,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "list_tenant_users",
      "lineno": 18,
      "methods": [
        "GET"
      ],
      "module": "app.routes.admin_user_routes",
      "path": "Src/backend/app/routes/admin_user_routes.py",
      "response_model": "UserListResp",
      "status_code": null,
      "summary": "Return all users for the caller's tenant.",
      "tags": [
        "admin"
      ],
      "url": "/admin/users"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 32,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin'))",
          "lineno": 33,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin')",
          "lineno": 33,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "update_user_role(db, tenant_id=tenant_id, user_id=user_id, role=body.role)",
          "lineno": 38,
          "name": "update_user_role",
          "resolved_module": "app.ports.users.update_user_role"
        },
        {
          "category": "internal",
          "display": "router.patch('/users/{user_id}/role', response_model=UserResp)",
          "lineno": 28,
          "name": "router.patch",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "patch_user_role",
      "lineno": 29,
      "methods": [
        "PATCH"
      ],
      "module": "app.routes.admin_user_routes",
      "path": "Src/backend/app/routes/admin_user_routes.py",
      "response_model": "UserResp",
      "status_code": null,
      "summary": "Update the role for the selected user in the tenant.",
      "tags": [
        "admin"
      ],
      "url": "/admin/users/{user_id}/role"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(require_role(('Admin', 'PO', 'BA', 'Dev')))",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role(('Admin', 'PO', 'BA', 'Dev'))",
          "lineno": 20,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "create_plan(task_prompt=req.prompt, allowed_tools=req.allowed_tools)",
          "lineno": 25,
          "name": "create_plan",
          "resolved_module": "app.ports.planner.create_plan"
        },
        {
          "category": "internal",
          "display": "plan.get('steps', [])",
          "lineno": 28,
          "name": "plan.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "step.get('tool')",
          "lineno": 29,
          "name": "step.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "overrides.get(tool_name)",
          "lineno": 32,
          "name": "overrides.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "isinstance(override_args, dict)",
          "lineno": 33,
          "name": "isinstance",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "step.setdefault('args', {})",
          "lineno": 35,
          "name": "step.setdefault",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "override_args.items()",
          "lineno": 36,
          "name": "override_args.items",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "execute_plan(plan, user_claims=user)",
          "lineno": 39,
          "name": "execute_plan",
          "resolved_module": "app.ports.planner.execute_plan"
        },
        {
          "category": "internal",
          "display": "isinstance(detail, dict)",
          "lineno": 42,
          "name": "isinstance",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "detail.get('code')",
          "lineno": 42,
          "name": "detail.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "JSONResponse(status_code=exc.status_code, content=detail)",
          "lineno": 43,
          "name": "JSONResponse",
          "resolved_module": "fastapi.responses.JSONResponse"
        },
        {
          "category": "internal",
          "display": "result.get('output', {}).get('notes')",
          "lineno": 46,
          "name": "result.get.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "result.get('output', {})",
          "lineno": 46,
          "name": "result.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "result.get('artifacts', {})",
          "lineno": 50,
          "name": "result.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "result.get('output', {})",
          "lineno": 51,
          "name": "result.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "AgentQueryResp(**resp_kwargs)",
          "lineno": 55,
          "name": "AgentQueryResp",
          "resolved_module": "app.domain.schemas.AgentQueryResp"
        },
        {
          "category": "internal",
          "display": "router.post('/query', response_model=AgentQueryResp)",
          "lineno": 17,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(require_role(('Admin', 'PO', 'BA', 'Dev')))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "agent_query",
      "lineno": 18,
      "methods": [
        "POST"
      ],
      "module": "app.routes.agent_routes",
      "path": "Src/backend/app/routes/agent_routes.py",
      "response_model": "AgentQueryResp",
      "status_code": null,
      "summary": "Generate and execute an agentic plan for the provided prompt.",
      "tags": [
        "agent"
      ],
      "url": "/agent/query"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 29,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO'))",
          "lineno": 30,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO')",
          "lineno": 30,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "create_assignment(db, tenant_id=tenant_id, developer_id=body.developer_id, project_id=body.project_id, role=body.role, start_date=body.start_date)",
          "lineno": 35,
          "name": "create_assignment",
          "resolved_module": "app.ports.assignments.create_assignment"
        },
        {
          "category": "internal",
          "display": "router.post('/assignments', response_model=AssignmentResp)",
          "lineno": 26,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "post_assignment",
      "lineno": 27,
      "methods": [
        "POST"
      ],
      "module": "app.routes.assignment_routes",
      "path": "Src/backend/app/routes/assignment_routes.py",
      "response_model": "AssignmentResp",
      "status_code": null,
      "summary": "Create a new assignment for a developer.",
      "tags": [
        "assignments"
      ],
      "url": "/assignments"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 49,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO'))",
          "lineno": 50,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO')",
          "lineno": 50,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "update_assignment(db, tenant_id=tenant_id, assignment_id=assignment_id, role=body.role, status=body.status, end_date=body.end_date)",
          "lineno": 55,
          "name": "update_assignment",
          "resolved_module": "app.ports.assignments.update_assignment"
        },
        {
          "category": "internal",
          "display": "router.patch('/assignments/{assignment_id}', response_model=AssignmentResp)",
          "lineno": 45,
          "name": "router.patch",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "patch_assignment",
      "lineno": 46,
      "methods": [
        "PATCH"
      ],
      "module": "app.routes.assignment_routes",
      "path": "Src/backend/app/routes/assignment_routes.py",
      "response_model": "AssignmentResp",
      "status_code": null,
      "summary": "Update details of an existing assignment.",
      "tags": [
        "assignments"
      ],
      "url": "/assignments/{assignment_id}"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 68,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA'))",
          "lineno": 69,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA')",
          "lineno": 69,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "list_assignments_for_project(db, tenant_id=tenant_id, project_id=project_id)",
          "lineno": 74,
          "name": "list_assignments_for_project",
          "resolved_module": "app.ports.assignments.list_assignments_for_project"
        },
        {
          "category": "internal",
          "display": "router.get('/projects/{project_id}/assignments', response_model=AssignmentListResp)",
          "lineno": 65,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "get_project_assignments",
      "lineno": 66,
      "methods": [
        "GET"
      ],
      "module": "app.routes.assignment_routes",
      "path": "Src/backend/app/routes/assignment_routes.py",
      "response_model": "AssignmentListResp",
      "status_code": null,
      "summary": "Return assignments for the specified project.",
      "tags": [
        "assignments"
      ],
      "url": "/projects/{project_id}/assignments"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 21,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA'))",
          "lineno": 22,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA')",
          "lineno": 22,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "list_audit_entries(db, user_claims=_user, actor=actor, limit=limit)",
          "lineno": 26,
          "name": "list_audit_entries",
          "resolved_module": "app.ports.audit.list_audit_entries"
        },
        {
          "category": "internal",
          "display": "router.get('', response_model=AuditResp)",
          "lineno": 17,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
          "parameter": "_user",
          "provider": "require_role"
        }
      ],
      "function": "audit",
      "lineno": 18,
      "methods": [
        "GET"
      ],
      "module": "app.routes.audit_routes",
      "path": "Src/backend/app/routes/audit_routes.py",
      "response_model": "AuditResp",
      "status_code": null,
      "summary": "Return recent audit log entries filtered by actor when provided.",
      "tags": [
        "audit"
      ],
      "url": "/audit"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 22,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "database",
          "display": "db.query(m.User).filter(m.User.username == username).one_or_none()",
          "lineno": 25,
          "name": "db.query.filter.one_or_none",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.User).filter(m.User.username == username)",
          "lineno": 25,
          "name": "db.query.filter",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.User)",
          "lineno": 25,
          "name": "db.query",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "HTTPException(status_code=401, detail='Invalid credentials')",
          "lineno": 27,
          "name": "HTTPException",
          "resolved_module": "fastapi.HTTPException"
        },
        {
          "category": "database",
          "display": "db.query(m.Developer).filter(m.Developer.user_id == user.id, m.Developer.tenant_id == tenant_id).one_or_none()",
          "lineno": 33,
          "name": "db.query.filter.one_or_none",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Developer).filter(m.Developer.user_id == user.id, m.Developer.tenant_id == tenant_id)",
          "lineno": 33,
          "name": "db.query.filter",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Developer)",
          "lineno": 33,
          "name": "db.query",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key).filter(m.Project.tenant_id == tenant_id).all()",
          "lineno": 40,
          "name": "db.query.filter.all",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key).filter(m.Project.tenant_id == tenant_id)",
          "lineno": 40,
          "name": "db.query.filter",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key)",
          "lineno": 40,
          "name": "db.query",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "accessible.update(keys)",
          "lineno": 41,
          "name": "accessible.update",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id).filter(m.Assignment.developer_id == developer.id, m.Project.tenant_id == tenant_id, or_(m.Assignment.status.is_(None), m.Assignment.status == 'active')).all()",
          "lineno": 46,
          "name": "db.query.join.filter.all",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id).filter(m.Assignment.developer_id == developer.id, m.Project.tenant_id == tenant_id, or_(m.Assignment.status.is_(None), m.Assignment.status == 'active'))",
          "lineno": 46,
          "name": "db.query.join.filter",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id)",
          "lineno": 46,
          "name": "db.query.join",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "db.query(m.Project.key)",
          "lineno": 46,
          "name": "db.query",
          "resolved_module": null
        },
        {
          "category": "database",
          "display": "or_(m.Assignment.status.is_(None), m.Assignment.status == 'active')",
          "lineno": 51,
          "name": "or_",
          "resolved_module": "sqlalchemy.or_"
        },
        {
          "category": "internal",
          "display": "m.Assignment.status.is_(None)",
          "lineno": 51,
          "name": "m.Assignment.status.is_",
          "resolved_module": "app.domain.models"
        },
        {
          "category": "internal",
          "display": "accessible.update(keys)",
          "lineno": 56,
          "name": "accessible.update",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "sorted(accessible)",
          "lineno": 58,
          "name": "sorted",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "int(time.time())",
          "lineno": 59,
          "name": "int",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "time.time()",
          "lineno": 59,
          "name": "time.time",
          "resolved_module": "time"
        },
        {
          "category": "internal",
          "display": "jwt.encode(payload, settings.jwt_secret, algorithm='HS256')",
          "lineno": 73,
          "name": "jwt.encode",
          "resolved_module": "jwt"
        },
        {
          "category": "internal",
          "display": "TokenResp(access_token=token)",
          "lineno": 74,
          "name": "TokenResp",
          "resolved_module": "app.domain.schemas.TokenResp"
        },
        {
          "category": "internal",
          "display": "router.post('/token', response_model=TokenResp)",
          "lineno": 21,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        }
      ],
      "function": "token",
      "lineno": 22,
      "methods": [
        "POST"
      ],
      "module": "app.routes.auth_routes",
      "path": "Src/backend/app/routes/auth_routes.py",
      "response_model": "TokenResp",
      "status_code": null,
      "summary": "Return a JWT sourced from the database user record.",
      "tags": [
        "auth"
      ],
      "url": "/auth/token"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "request.body()",
          "lineno": 33,
          "name": "request.body",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "request.headers.get('X-Hub-Signature-256')",
          "lineno": 34,
          "name": "request.headers.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "_verify_signature(signature, body)",
          "lineno": 36,
          "name": "_verify_signature",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "HTTPException(status_code=401, detail='Invalid signature')",
          "lineno": 37,
          "name": "HTTPException",
          "resolved_module": "fastapi.HTTPException"
        },
        {
          "category": "internal",
          "display": "request_key(dict(request.headers), body, prefix='webhook')",
          "lineno": 39,
          "name": "request_key",
          "resolved_module": "app.utils.idempotency.request_key"
        },
        {
          "category": "internal",
          "display": "dict(request.headers)",
          "lineno": 39,
          "name": "dict",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "acquire_once(idem_key, ttl_seconds=900)",
          "lineno": 40,
          "name": "acquire_once",
          "resolved_module": "app.utils.idempotency.acquire_once"
        },
        {
          "category": "internal",
          "display": "request.headers.get('X-GitHub-Event', 'unknown')",
          "lineno": 43,
          "name": "request.headers.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "request.json()",
          "lineno": 44,
          "name": "request.json",
          "resolved_module": null
        },
        {
          "category": "queue",
          "display": "enqueue_github_event({'event': event, 'payload': payload})",
          "lineno": 45,
          "name": "enqueue_github_event",
          "resolved_module": "worker.job_queue.enqueue_github_event"
        },
        {
          "category": "internal",
          "display": "router.post('/github')",
          "lineno": 29,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [],
      "function": "github",
      "lineno": 30,
      "methods": [
        "POST"
      ],
      "module": "app.routes.github_routes",
      "path": "Src/backend/app/routes/github_routes.py",
      "response_model": null,
      "status_code": null,
      "summary": "Receive a GitHub webhook and enqueue it for background processing.",
      "tags": [
        "events"
      ],
      "url": "/events/github"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "request.body()",
          "lineno": 18,
          "name": "request.body",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "dict(request.headers)",
          "lineno": 19,
          "name": "dict",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "request_key(headers, body, prefix='webhook')",
          "lineno": 20,
          "name": "request_key",
          "resolved_module": "app.utils.idempotency.request_key"
        },
        {
          "category": "internal",
          "display": "acquire_once(idem_key, ttl_seconds=900)",
          "lineno": 21,
          "name": "acquire_once",
          "resolved_module": "app.utils.idempotency.acquire_once"
        },
        {
          "category": "internal",
          "display": "HTTPException(status_code=500, detail='Jira integration not configured')",
          "lineno": 25,
          "name": "HTTPException",
          "resolved_module": "fastapi.HTTPException"
        },
        {
          "category": "internal",
          "display": "request.json()",
          "lineno": 27,
          "name": "request.json",
          "resolved_module": null
        },
        {
          "category": "queue",
          "display": "enqueue_jira_event({'event': request.headers.get('X-Event-Key'), 'payload': payload})",
          "lineno": 28,
          "name": "enqueue_jira_event",
          "resolved_module": "worker.job_queue.enqueue_jira_event"
        },
        {
          "category": "internal",
          "display": "request.headers.get('X-Event-Key')",
          "lineno": 28,
          "name": "request.headers.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "router.post('/jira')",
          "lineno": 16,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [],
      "function": "jira",
      "lineno": 17,
      "methods": [
        "POST"
      ],
      "module": "app.routes.jira_routes",
      "path": "Src/backend/app/routes/jira_routes.py",
      "response_model": null,
      "status_code": null,
      "summary": "",
      "tags": [
        "events"
      ],
      "url": "/events/jira"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO'))",
          "lineno": 21,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO')",
          "lineno": 21,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "generate_plan(db, user_claims=user, developer_id=req.developer_id, project_id=req.project_id, autonomy=req.autonomy)",
          "lineno": 25,
          "name": "generate_plan",
          "resolved_module": "app.ports.onboarding.generate_plan"
        },
        {
          "category": "internal",
          "display": "router.post('/generate', response_model=OnboardingResp)",
          "lineno": 17,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "generate",
      "lineno": 18,
      "methods": [
        "POST"
      ],
      "module": "app.routes.onboarding_routes",
      "path": "Src/backend/app/routes/onboarding_routes.py",
      "response_model": "OnboardingResp",
      "status_code": null,
      "summary": "Generate an onboarding plan for the requested developer.",
      "tags": [
        "onboarding"
      ],
      "url": "/onboarding/generate"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 19,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
          "lineno": 20,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "list_projects(db, tenant_id=tenant_id)",
          "lineno": 25,
          "name": "list_projects",
          "resolved_module": "app.ports.projects.list_projects"
        },
        {
          "category": "internal",
          "display": "router.get('', response_model=List[ProjectResp])",
          "lineno": 17,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "list_tenant_projects",
      "lineno": 18,
      "methods": [
        "GET"
      ],
      "module": "app.routes.project_read_routes",
      "path": "Src/backend/app/routes/project_read_routes.py",
      "response_model": "List[ProjectResp]",
      "status_code": null,
      "summary": "Return all projects for the caller's tenant.",
      "tags": [
        "projects-read"
      ],
      "url": "/projects"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 31,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "lineno": 32,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
          "lineno": 32,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "get_project_by_key(db, tenant_id=tenant_id, key=key)",
          "lineno": 37,
          "name": "get_project_by_key",
          "resolved_module": "app.ports.projects.get_project_by_key"
        },
        {
          "category": "internal",
          "display": "router.get('/{key}', response_model=ProjectResp)",
          "lineno": 28,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "get_project",
      "lineno": 29,
      "methods": [
        "GET"
      ],
      "module": "app.routes.project_read_routes",
      "path": "Src/backend/app/routes/project_read_routes.py",
      "response_model": "ProjectResp",
      "status_code": null,
      "summary": "Return a single project referenced by key.",
      "tags": [
        "projects-read"
      ],
      "url": "/projects/{key}"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 22,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO'))",
          "lineno": 23,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO')",
          "lineno": 23,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "create_project_port(db, tenant_id=tenant_id, key=key, name=name, description=description)",
          "lineno": 28,
          "name": "create_project_port",
          "resolved_module": "app.ports.projects.create_project"
        },
        {
          "category": "internal",
          "display": "router.post('', response_model=ProjectResp)",
          "lineno": 17,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "create_project",
      "lineno": 18,
      "methods": [
        "POST"
      ],
      "module": "app.routes.project_routes",
      "path": "Src/backend/app/routes/project_routes.py",
      "response_model": "ProjectResp",
      "status_code": null,
      "summary": "Create a new project for the tenant.",
      "tags": [
        "projects"
      ],
      "url": "/projects"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "lineno": 10,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
          "lineno": 10,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "user.get('tenant_id')",
          "lineno": 11,
          "name": "user.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "user.get('accessible_projects', [])",
          "lineno": 12,
          "name": "user.get",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "HTTPException(status_code=403, detail=f'Access denied to project: {t}')",
          "lineno": 16,
          "name": "HTTPException",
          "resolved_module": "fastapi.HTTPException"
        },
        {
          "category": "internal",
          "display": "rag_search(tenant_id=tenant_id, user_claims=user, query=req.query, targets=targets, k=req.k, strategy=req.strategy)",
          "lineno": 18,
          "name": "rag_search",
          "resolved_module": "app.ports.retriever.rag_search"
        },
        {
          "category": "internal",
          "display": "api_response(payload)",
          "lineno": 26,
          "name": "api_response",
          "resolved_module": "app.ports.retriever.api_response"
        },
        {
          "category": "internal",
          "display": "router.post('', response_model=RetrieveResp)",
          "lineno": 9,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "retrieve",
      "lineno": 10,
      "methods": [
        "POST"
      ],
      "module": "app.routes.retrieve_routes",
      "path": "Src/backend/app/routes/retrieve_routes.py",
      "response_model": "RetrieveResp",
      "status_code": null,
      "summary": "",
      "tags": [
        "retrieve"
      ],
      "url": "/retrieve"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(get_current_user)",
          "lineno": 21,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "developer_profile(db, user_claims=_user, developer_id=developer_id)",
          "lineno": 25,
          "name": "developer_profile",
          "resolved_module": "app.ports.skills.developer_profile"
        },
        {
          "category": "internal",
          "display": "router.get('/profile', response_model=SkillProfileResp)",
          "lineno": 17,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(get_current_user)",
          "parameter": "_user",
          "provider": "get_current_user"
        }
      ],
      "function": "profile",
      "lineno": 18,
      "methods": [
        "GET"
      ],
      "module": "app.routes.skills_routes",
      "path": "Src/backend/app/routes/skills_routes.py",
      "response_model": "SkillProfileResp",
      "status_code": null,
      "summary": "Return the skill profile for a developer.",
      "tags": [
        "skills"
      ],
      "url": "/skills/profile"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 20,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO', 'BA'))",
          "lineno": 21,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO', 'BA')",
          "lineno": 21,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "recommend_staff_port(db, user_claims=user, project_id=project_id)",
          "lineno": 25,
          "name": "recommend_staff_port",
          "resolved_module": "app.ports.staffing.recommend_staff"
        },
        {
          "category": "internal",
          "display": "router.get('/recommend', response_model=StaffResp)",
          "lineno": 17,
          "name": "router.get",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "recommend",
      "lineno": 18,
      "methods": [
        "GET"
      ],
      "module": "app.routes.staff_routes",
      "path": "Src/backend/app/routes/staff_routes.py",
      "response_model": "StaffResp",
      "status_code": null,
      "summary": "Return ranked developer candidates for the project.",
      "tags": [
        "staff"
      ],
      "url": "/staff/recommend"
    },
    {
      "calls": [
        {
          "category": "internal",
          "display": "Form(...)",
          "lineno": 19,
          "name": "Form",
          "resolved_module": "fastapi.Form"
        },
        {
          "category": "internal",
          "display": "File(...)",
          "lineno": 20,
          "name": "File",
          "resolved_module": "fastapi.File"
        },
        {
          "category": "internal",
          "display": "Depends(get_db)",
          "lineno": 21,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "Depends(require_role('Admin', 'PO'))",
          "lineno": 22,
          "name": "Depends",
          "resolved_module": "fastapi.Depends"
        },
        {
          "category": "internal",
          "display": "require_role('Admin', 'PO')",
          "lineno": 22,
          "name": "require_role",
          "resolved_module": "app.deps.require_role"
        },
        {
          "category": "internal",
          "display": "file.read()",
          "lineno": 26,
          "name": "file.read",
          "resolved_module": null
        },
        {
          "category": "internal",
          "display": "ingest_upload(db, user_claims=user, project_key=project_key, file_bytes=data, filename=file.filename or '')",
          "lineno": 27,
          "name": "ingest_upload",
          "resolved_module": "app.ports.ingestion.ingest_upload"
        },
        {
          "category": "internal",
          "display": "router.post('', response_model=UploadResp)",
          "lineno": 17,
          "name": "router.post",
          "resolved_module": null
        }
      ],
      "dependencies": [
        {
          "default_repr": "Depends(get_db)",
          "parameter": "db",
          "provider": "get_db"
        },
        {
          "default_repr": "Depends(require_role('Admin', 'PO'))",
          "parameter": "user",
          "provider": "require_role"
        }
      ],
      "function": "upload",
      "lineno": 18,
      "methods": [
        "POST"
      ],
      "module": "app.routes.upload_routes",
      "path": "Src/backend/app/routes/upload_routes.py",
      "response_model": "UploadResp",
      "status_code": null,
      "summary": "Ingest an uploaded file for the specified project.",
      "tags": [
        "upload"
      ],
      "url": "/upload"
    }
  ],
  "jobs": [
    {
      "calls": [
        {
          "category": "queue",
          "display": "queue.enqueue(handle_github_event, payload, job_timeout=300)",
          "lineno": 44,
          "name": "queue.enqueue",
          "resolved_module": null
        }
      ],
      "docstring": "Enqueue handling of a GitHub webhook payload.",
      "function": "enqueue_github_event",
      "lineno": 39,
      "module": "worker.job_queue",
      "path": "Src/backend/worker/job_queue.py"
    },
    {
      "calls": [
        {
          "category": "queue",
          "display": "queue.enqueue(handle_jira_event, payload, job_timeout=300)",
          "lineno": 52,
          "name": "queue.enqueue",
          "resolved_module": null
        }
      ],
      "docstring": "Enqueue handling of a Jira webhook payload.",
      "function": "enqueue_jira_event",
      "lineno": 47,
      "module": "worker.job_queue",
      "path": "Src/backend/worker/job_queue.py"
    }
  ],
  "modules": [
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "create_engine(f'postgresql+psycopg2://{settings.postgres_user}:{settings.postgres_password}@{settings.postgres_host}:{settings.postgres_port}/{settings.postgres_db}')",
              "lineno": 7,
              "name": "create_engine",
              "resolved_module": "sqlalchemy.create_engine"
            },
            {
              "category": "internal",
              "display": "engine.begin()",
              "lineno": 11,
              "name": "engine.begin",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conn.execute(text(\"DELETE FROM event WHERE type = 'kb_chunk'\"))",
              "lineno": 12,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text(\"DELETE FROM event WHERE type = 'kb_chunk'\")",
              "lineno": 12,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "__clear_kb_chunks",
      "path": "Src/backend/__clear_kb_chunks.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "create_engine(f'postgresql+psycopg2://{settings.postgres_user}:{settings.postgres_password}@{settings.postgres_host}:{settings.postgres_port}/{settings.postgres_db}')",
              "lineno": 7,
              "name": "create_engine",
              "resolved_module": "sqlalchemy.create_engine"
            },
            {
              "category": "internal",
              "display": "engine.connect()",
              "lineno": 11,
              "name": "engine.connect",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conn.execute(text(\"SELECT count(*) FROM event WHERE type = 'kb_chunk'\"))",
              "lineno": 12,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text(\"SELECT count(*) FROM event WHERE type = 'kb_chunk'\")",
              "lineno": 12,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "print(total.scalar())",
              "lineno": 13,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "total.scalar()",
              "lineno": 13,
              "name": "total.scalar",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "__count_kb_chunks",
      "path": "Src/backend/__count_kb_chunks.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "create_engine(f'postgresql+psycopg2://{settings.postgres_user}:{settings.postgres_password}@{settings.postgres_host}:{settings.postgres_port}/{settings.postgres_db}')",
              "lineno": 7,
              "name": "create_engine",
              "resolved_module": "sqlalchemy.create_engine"
            },
            {
              "category": "internal",
              "display": "engine.connect()",
              "lineno": 11,
              "name": "engine.connect",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conn.execute(text(\"SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname='public' ORDER BY tablename\"))",
              "lineno": 12,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text(\"SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname='public' ORDER BY tablename\")",
              "lineno": 13,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "print([row[0] for row in rows])",
              "lineno": 15,
              "name": "print",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "__inspect_db",
      "path": "Src/backend/__inspect_db.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 7,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == 'PX').first()",
              "lineno": 8,
              "name": "db.query.filter.first",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == 'PX')",
              "lineno": 8,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project)",
              "lineno": 8,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "store_chunks(db, tenant_id=project.tenant_id, project=project, text=text, source='manual')",
              "lineno": 10,
              "name": "store_chunks",
              "resolved_module": "app.application.local_kb.store_chunks"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "store_chunks",
          "source": "app.application.local_kb.store_chunks",
          "type": "from"
        },
        {
          "alias": "SessionLocal",
          "source": "app.deps.SessionLocal",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "__manual_store",
      "path": "Src/backend/__manual_store.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "rag_search(settings.tenant_id, {'accessible_projects': ['PX', 'PB', 'global'], 'tenant_id': settings.tenant_id}, query='pricing strategy')",
              "lineno": 6,
              "name": "rag_search",
              "resolved_module": "app.ports.retriever.rag_search"
            },
            {
              "category": "internal",
              "display": "print(payload)",
              "lineno": 11,
              "name": "print",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 5,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "rag_search",
          "source": "app.ports.retriever.rag_search",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "__tmp_rag",
      "path": "Src/backend/__tmp_rag.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        }
      ],
      "module": "app.__init__",
      "path": "Src/backend/app/__init__.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Cerebras configuration is incomplete')",
              "lineno": 19,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "settings.cerebras_base_url.rstrip('/')",
              "lineno": 21,
              "name": "settings.cerebras_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "base.endswith('/v1')",
              "lineno": 22,
              "name": "base.endswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len('/v1')",
              "lineno": 23,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=120)",
              "lineno": 40,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.post(url, headers=headers, json=payload)",
              "lineno": 41,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 43,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Cerebras request failed: {exc.response.status_code}')",
              "lineno": 45,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 48,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError('Cerebras returned an unexpected payload')",
              "lineno": 50,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "json.loads(content)",
              "lineno": 51,
              "name": "json.loads",
              "resolved_module": "json"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Call the Cerebras chat completion endpoint expecting JSON output.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "chat_json",
          "qualname": "chat_json",
          "return_annotation": "Dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "sync_client",
          "source": "app.utils.http.sync_client",
          "type": "from"
        }
      ],
      "module": "app.adapters.cerebras_planner",
      "path": "Src/backend/app/adapters/cerebras_planner.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian credentials are not configured')",
              "lineno": 20,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "base64.b64encode(f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode()).decode()",
              "lineno": 21,
              "name": "base64.b64encode.decode",
              "resolved_module": "base64"
            },
            {
              "category": "internal",
              "display": "base64.b64encode(f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode())",
              "lineno": 21,
              "name": "base64.b64encode",
              "resolved_module": "base64"
            },
            {
              "category": "internal",
              "display": "f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode()",
              "lineno": 21,
              "name": "encode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return HTTP headers for Confluence authentication.",
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "_auth_headers",
          "qualname": "_auth_headers",
          "return_annotation": "Dict[str, str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail=detail)",
              "lineno": 29,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 25,
          "name": "_tool_args_invalid",
          "qualname": "_tool_args_invalid",
          "return_annotation": "HTTPException"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 35,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 36,
              "name": "value.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, (int, float))",
              "lineno": 38,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, bool)",
              "lineno": 38,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 39,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 40,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 32,
          "name": "_to_str_or_none",
          "qualname": "_to_str_or_none",
          "return_annotation": "str | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_tool_args_invalid('space_key or space_id required', details={'missing': ['space_key', 'space_id']})",
              "lineno": 47,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 50,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 52,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(space_id)",
              "lineno": 54,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(space_key)",
              "lineno": 58,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=30)",
              "lineno": 62,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.get(url, headers=_auth_headers(), params=params)",
              "lineno": 63,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 63,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 65,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid(f'Confluence space lookup failed ({status})', details={'body': body, 'space_key': space_key, 'space_id': space_id})",
              "lineno": 70,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Confluence {status}: {body}')",
              "lineno": 74,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 76,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(data.get('id') or space_id)",
              "lineno": 79,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('id')",
              "lineno": 79,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(data.get('key') or space_key)",
              "lineno": 80,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('key')",
              "lineno": 80,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('name')",
              "lineno": 81,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('results', [])",
              "lineno": 84,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid('Confluence space not found', details={'space_key': space_key})",
              "lineno": 86,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(item.get('id'))",
              "lineno": 90,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('id')",
              "lineno": 90,
              "name": "item.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(item.get('key', space_key))",
              "lineno": 91,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('key', space_key)",
              "lineno": 91,
              "name": "item.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('name')",
              "lineno": 92,
              "name": "item.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Resolve a Confluence space to its metadata.",
          "endpoint": null,
          "is_async": false,
          "lineno": 43,
          "name": "resolve_space",
          "qualname": "resolve_space",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 100,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 102,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=30)",
              "lineno": 106,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.get(url, headers=_auth_headers(), params=params)",
              "lineno": 107,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 107,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 109,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Confluence {status}: {body}')",
              "lineno": 113,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 115,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('results', [])",
              "lineno": 116,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid('No Confluence spaces available')",
              "lineno": 118,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(item.get('id'))",
              "lineno": 121,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('id')",
              "lineno": 121,
              "name": "item.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(item.get('key'))",
              "lineno": 122,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('key')",
              "lineno": 122,
              "name": "item.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.get('name')",
              "lineno": 123,
              "name": "item.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the first accessible Confluence space for the credentials.",
          "endpoint": null,
          "is_async": false,
          "lineno": 96,
          "name": "discover_default_space",
          "qualname": "discover_default_space",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 138,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(space_id)",
              "lineno": 140,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(space_key)",
              "lineno": 141,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid('space_key or space_id required', details={'space_key': space_key, 'space_id': space_id})",
              "lineno": 143,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "title.strip()",
              "lineno": 145,
              "name": "title.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(body_html or '').strip()",
              "lineno": 146,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 148,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=60)",
              "lineno": 156,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.post(url, headers=_auth_headers(), json=payload)",
              "lineno": 157,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 157,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 159,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Confluence {exc.response.status_code}: {body}')",
              "lineno": 162,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 164,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('id')",
              "lineno": 165,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('_links')",
              "lineno": 166,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 171,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a Confluence page and return identifiers.",
          "endpoint": null,
          "is_async": false,
          "lineno": 127,
          "name": "create_page",
          "qualname": "create_page",
          "return_annotation": "Dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "base64",
          "source": "base64",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "sync_client",
          "source": "app.utils.http.sync_client",
          "type": "from"
        }
      ],
      "module": "app.adapters.confluence_adapter",
      "path": "Src/backend/app/adapters/confluence_adapter.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "SentenceTransformer(settings.bge_model)",
              "lineno": 16,
              "name": "SentenceTransformer",
              "resolved_module": "sentence_transformers.SentenceTransformer"
            },
            {
              "category": "cache",
              "display": "lru_cache(maxsize=1)",
              "lineno": 13,
              "name": "lru_cache",
              "resolved_module": "functools.lru_cache"
            }
          ],
          "decorators": [
            "lru_cache"
          ],
          "dependencies": [],
          "docstring": "Lazily load and cache the embedding model.",
          "endpoint": null,
          "is_async": false,
          "lineno": 14,
          "name": "_model",
          "qualname": "_model",
          "return_annotation": "SentenceTransformer"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_model()",
              "lineno": 21,
              "name": "_model",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "model.encode(texts, normalize_embeddings=True).tolist()",
              "lineno": 22,
              "name": "model.encode.tolist",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "model.encode(texts, normalize_embeddings=True)",
              "lineno": 22,
              "name": "model.encode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Embed a list of texts as dense vectors.",
          "endpoint": null,
          "is_async": false,
          "lineno": 19,
          "name": "embed_texts",
          "qualname": "embed_texts",
          "return_annotation": "List[List[float]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "embed_texts(texts)",
              "lineno": 27,
              "name": "embed_texts",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Alias used by ingestion_service.",
          "endpoint": null,
          "is_async": false,
          "lineno": 25,
          "name": "embed_batch",
          "qualname": "embed_batch",
          "return_annotation": "List[List[float]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "embed_texts([text])",
              "lineno": 32,
              "name": "embed_texts",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Embed a single string as a dense vector.",
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "embed_one",
          "qualname": "embed_one",
          "return_annotation": "List[float]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "lru_cache",
          "source": "functools.lru_cache",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "SentenceTransformer",
          "source": "sentence_transformers.SentenceTransformer",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.adapters.dense_bge",
      "path": "Src/backend/app/adapters/dense_bge.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "meta_filters.items()",
              "lineno": 31,
              "name": "meta_filters.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, dict)",
              "lineno": 32,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.get('in')",
              "lineno": 33,
              "name": "value.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.get('not_in')",
              "lineno": 34,
              "name": "value.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "must_conditions.append(qm.FieldCondition(key=key, match=qm.MatchAny(any=values_in)))",
              "lineno": 36,
              "name": "must_conditions.append",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.FieldCondition(key=key, match=qm.MatchAny(any=values_in))",
              "lineno": 37,
              "name": "qm.FieldCondition",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.MatchAny(any=values_in)",
              "lineno": 37,
              "name": "qm.MatchAny",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "must_not_conditions.append(qm.FieldCondition(key=key, match=qm.MatchAny(any=values_not_in)))",
              "lineno": 40,
              "name": "must_not_conditions.append",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.FieldCondition(key=key, match=qm.MatchAny(any=values_not_in))",
              "lineno": 41,
              "name": "qm.FieldCondition",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.MatchAny(any=values_not_in)",
              "lineno": 41,
              "name": "qm.MatchAny",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "must_conditions.append(qm.FieldCondition(key=key, match=qm.MatchValue(value=value)))",
              "lineno": 44,
              "name": "must_conditions.append",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.FieldCondition(key=key, match=qm.MatchValue(value=value))",
              "lineno": 44,
              "name": "qm.FieldCondition",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.MatchValue(value=value)",
              "lineno": 44,
              "name": "qm.MatchValue",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.Filter()",
              "lineno": 49,
              "name": "qm.Filter",
              "resolved_module": "qdrant_client.http.models"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "_build_filter",
          "qualname": "_build_filter",
          "return_annotation": "qm.Filter | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 58,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc).lower()",
              "lineno": 59,
              "name": "str.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 59,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 57,
          "name": "_should_retry_for_index",
          "qualname": "_should_retry_for_index",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "client.search(collection_name=collection, query_vector=qm.NamedVector(name='dense', vector=query_dense), limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter)",
              "lineno": 66,
              "name": "client.search",
              "resolved_module": "app.adapters.qdrant_client.client"
            },
            {
              "category": "external-ai",
              "display": "qm.NamedVector(name='dense', vector=query_dense)",
              "lineno": 68,
              "name": "qm.NamedVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 72,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "_should_retry_for_index(exc)",
              "lineno": 76,
              "name": "_should_retry_for_index",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Encountered missing Qdrant index during dense search; attempting autofix', collection=collection)",
              "lineno": 78,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "integration",
              "display": "ensure_payload_indexes(collection)",
              "lineno": 82,
              "name": "ensure_payload_indexes",
              "resolved_module": "app.adapters.qdrant_client.ensure_payload_indexes"
            },
            {
              "category": "integration",
              "display": "client.search(collection_name=collection, query_vector=qm.NamedVector(name='dense', vector=query_dense), limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter)",
              "lineno": 83,
              "name": "client.search",
              "resolved_module": "app.adapters.qdrant_client.client"
            },
            {
              "category": "external-ai",
              "display": "qm.NamedVector(name='dense', vector=query_dense)",
              "lineno": 85,
              "name": "qm.NamedVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 89,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant dense search failed due to missing index', collection=collection, status=getattr(exc, 'status_code', None))",
              "lineno": 92,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 95,
              "name": "getattr",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Search dense vectors within a collection.",
          "endpoint": null,
          "is_async": false,
          "lineno": 63,
          "name": "_search_dense",
          "qualname": "_search_dense",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "client.search(collection_name=collection, query_vector=qm.NamedSparseVector(name='sparse', vector=query_sparse), limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter)",
              "lineno": 103,
              "name": "client.search",
              "resolved_module": "app.adapters.qdrant_client.client"
            },
            {
              "category": "external-ai",
              "display": "qm.NamedSparseVector(name='sparse', vector=query_sparse)",
              "lineno": 105,
              "name": "qm.NamedSparseVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 109,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "_should_retry_for_index(exc)",
              "lineno": 113,
              "name": "_should_retry_for_index",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Encountered missing Qdrant index during sparse search; attempting autofix', collection=collection)",
              "lineno": 115,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "integration",
              "display": "ensure_payload_indexes(collection)",
              "lineno": 119,
              "name": "ensure_payload_indexes",
              "resolved_module": "app.adapters.qdrant_client.ensure_payload_indexes"
            },
            {
              "category": "integration",
              "display": "client.search(collection_name=collection, query_vector=qm.NamedSparseVector(name='sparse', vector=query_sparse), limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter)",
              "lineno": 120,
              "name": "client.search",
              "resolved_module": "app.adapters.qdrant_client.client"
            },
            {
              "category": "external-ai",
              "display": "qm.NamedSparseVector(name='sparse', vector=query_sparse)",
              "lineno": 122,
              "name": "qm.NamedSparseVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 126,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant sparse search failed due to missing index', collection=collection, status=getattr(exc, 'status_code', None))",
              "lineno": 129,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 132,
              "name": "getattr",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Search sparse vectors within a collection.",
          "endpoint": null,
          "is_async": false,
          "lineno": 100,
          "name": "_search_sparse",
          "qualname": "_search_sparse",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(point.id)",
              "lineno": 139,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(dense_res)",
              "lineno": 139,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(point.id)",
              "lineno": 140,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(sparse_res)",
              "lineno": 140,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(dense_rank)",
              "lineno": 141,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(sparse_rank)",
              "lineno": 141,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dense_rank.get(identifier, 10 ** 6)",
              "lineno": 144,
              "name": "dense_rank.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sparse_rank.get(identifier, 10 ** 6)",
              "lineno": 145,
              "name": "sparse_rank.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(candidate.id)",
              "lineno": 149,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(candidate.id)",
              "lineno": 154,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "scored.append((score, payload))",
              "lineno": 157,
              "name": "scored.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "scored.sort(key=lambda item: item[0], reverse=True)",
              "lineno": 158,
              "name": "scored.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Fuse dense and sparse results using Reciprocal Rank Fusion.",
          "endpoint": null,
          "is_async": false,
          "lineno": 137,
          "name": "_rrf_rank",
          "qualname": "_rrf_rank",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "list(targets)",
              "lineno": 172,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "embed_one(query)",
              "lineno": 174,
              "name": "embed_one",
              "resolved_module": "app.adapters.dense_bge.embed_one"
            },
            {
              "category": "internal",
              "display": "len(query_dense)",
              "lineno": 175,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Embedding dimension mismatch; expected {settings.embed_dim}, got {len(query_dense)}')",
              "lineno": 176,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "len(query_dense)",
              "lineno": 177,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "encode_sparse(query)",
              "lineno": 179,
              "name": "encode_sparse",
              "resolved_module": "app.adapters.sparse_hash.encode_sparse"
            },
            {
              "category": "external-ai",
              "display": "qm.SparseVector(indices=sparse_encoded.indices, values=sparse_encoded.values)",
              "lineno": 180,
              "name": "qm.SparseVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "_build_filter(meta_filters or {})",
              "lineno": 181,
              "name": "_build_filter",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "ensure_collection(collection, dense_dim=settings.embed_dim, create_if_missing=False)",
              "lineno": 185,
              "name": "ensure_collection",
              "resolved_module": "app.adapters.qdrant_client.ensure_collection"
            },
            {
              "category": "internal",
              "display": "_search_dense(collection, query_dense, k, query_filter)",
              "lineno": 187,
              "name": "_search_dense",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_search_sparse(collection, query_sparse, k, query_filter)",
              "lineno": 188,
              "name": "_search_sparse",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_rrf_rank(dense_results, sparse_results, k=k)",
              "lineno": 189,
              "name": "_rrf_rank",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fused.append((float(score), collection, payload or {}))",
              "lineno": 190,
              "name": "fused.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(score)",
              "lineno": 190,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "qdrant_hybrid_search([collection], query_dense, query_sparse, k, _lambda=0.5, query_filter=query_filter)",
              "lineno": 192,
              "name": "qdrant_hybrid_search",
              "resolved_module": "app.adapters.qdrant_client.hybrid_search"
            },
            {
              "category": "internal",
              "display": "fused.append(point)",
              "lineno": 200,
              "name": "fused.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fused.sort(key=lambda item: item[0], reverse=True)",
              "lineno": 201,
              "name": "fused.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Search hybrid collections for the query using the requested strategy.",
          "endpoint": null,
          "is_async": false,
          "lineno": 162,
          "name": "search",
          "qualname": "search",
          "return_annotation": "List[Tuple[float, str, dict]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "qm",
          "source": "qdrant_client.http.models",
          "type": "from"
        },
        {
          "alias": "embed_one",
          "source": "app.adapters.dense_bge.embed_one",
          "type": "from"
        },
        {
          "alias": "ResponseHandlingException",
          "source": "app.adapters.qdrant_client.ResponseHandlingException",
          "type": "from"
        },
        {
          "alias": "UnexpectedResponse",
          "source": "app.adapters.qdrant_client.UnexpectedResponse",
          "type": "from"
        },
        {
          "alias": "client",
          "source": "app.adapters.qdrant_client.client",
          "type": "from"
        },
        {
          "alias": "ensure_collection",
          "source": "app.adapters.qdrant_client.ensure_collection",
          "type": "from"
        },
        {
          "alias": "ensure_payload_indexes",
          "source": "app.adapters.qdrant_client.ensure_payload_indexes",
          "type": "from"
        },
        {
          "alias": "qdrant_hybrid_search",
          "source": "app.adapters.qdrant_client.hybrid_search",
          "type": "from"
        },
        {
          "alias": "encode_sparse",
          "source": "app.adapters.sparse_hash.encode_sparse",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        }
      ],
      "module": "app.adapters.hybrid_retriever",
      "path": "Src/backend/app/adapters/hybrid_retriever.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail=detail)",
              "lineno": 28,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "_tool_args_invalid",
          "qualname": "_tool_args_invalid",
          "return_annotation": "HTTPException"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail=detail)",
              "lineno": 35,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 31,
          "name": "_upstream_validation_error",
          "qualname": "_upstream_validation_error",
          "return_annotation": "HTTPException"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian credentials are not configured')",
              "lineno": 42,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "base64.b64encode(f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode()).decode()",
              "lineno": 43,
              "name": "base64.b64encode.decode",
              "resolved_module": "base64"
            },
            {
              "category": "internal",
              "display": "base64.b64encode(f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode())",
              "lineno": 43,
              "name": "base64.b64encode",
              "resolved_module": "base64"
            },
            {
              "category": "internal",
              "display": "f'{settings.atlassian_email}:{settings.atlassian_api_token}'.encode()",
              "lineno": 43,
              "name": "encode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return HTTP headers for Atlassian basic authentication.",
          "endpoint": null,
          "is_async": false,
          "lineno": 38,
          "name": "_auth_headers",
          "qualname": "_auth_headers",
          "return_annotation": "Dict[str, str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 50,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 51,
              "name": "value.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, (int, float))",
              "lineno": 53,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, bool)",
              "lineno": 53,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 54,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 55,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 47,
          "name": "_to_str_or_none",
          "qualname": "_to_str_or_none",
          "return_annotation": "str | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_tool_args_invalid('project_key or project_id required', details={'missing': ['project_key', 'project_id']})",
              "lineno": 62,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 65,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "isinstance(identifier, str)",
              "lineno": 68,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "identifier.strip()",
              "lineno": 68,
              "name": "identifier.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(identifier)",
              "lineno": 68,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 69,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=30)",
              "lineno": 71,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.get(url, headers=_auth_headers())",
              "lineno": 72,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 72,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 74,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid(f'Jira project lookup failed ({status})', details={'body': body, 'project_key': project_key, 'project_id': project_id})",
              "lineno": 79,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Jira {status}: {body}')",
              "lineno": 83,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 84,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('id')",
              "lineno": 85,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('key')",
              "lineno": 86,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(resolved_id)",
              "lineno": 88,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(resolved_key)",
              "lineno": 89,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('name')",
              "lineno": 90,
              "name": "data.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Resolve project metadata ensuring both id and key when possible.",
          "endpoint": null,
          "is_async": false,
          "lineno": 58,
          "name": "resolve_project",
          "qualname": "resolve_project",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 107,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 115,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=60)",
              "lineno": 116,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.get(url, headers=_auth_headers())",
              "lineno": 117,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 117,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 119,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Jira {exc.response.status_code}: {body}')",
              "lineno": 122,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 124,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(field, dict)",
              "lineno": 125,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "field.get('name')",
              "lineno": 125,
              "name": "field.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "field.get('id')",
              "lineno": 126,
              "name": "field.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(field_id)",
              "lineno": 128,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the Jira custom field id used for the Epic Name, if available.",
          "endpoint": null,
          "is_async": false,
          "lineno": 94,
          "name": "get_epic_name_field_id",
          "qualname": "get_epic_name_field_id",
          "return_annotation": "str | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "(description_text or '').strip()",
              "lineno": 138,
              "name": "strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 135,
          "name": "_ensure_description_adf",
          "qualname": "_ensure_description_adf",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_to_str_or_none(project_meta.get('id'))",
              "lineno": 155,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('id')",
              "lineno": 155,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(project_meta.get('key'))",
              "lineno": 156,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('key')",
              "lineno": 156,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid('Unable to resolve Jira project reference')",
              "lineno": 162,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(request.parent_issue_key)",
              "lineno": 175,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 148,
          "name": "build_jira_fields",
          "qualname": "build_jira_fields",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 186,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "params.append(('projectKeys', project_key))",
              "lineno": 190,
              "name": "params.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "params.append(('projectId', str(project_id)))",
              "lineno": 192,
              "name": "params.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id)",
              "lineno": 192,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 194,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=60)",
              "lineno": 195,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.get(url, headers=_auth_headers(), params=params)",
              "lineno": 196,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 196,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 198,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Jira {exc.response.status_code}: {body}')",
              "lineno": 201,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 203,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('projects', [])",
              "lineno": 204,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project.get('issuetypes')",
              "lineno": 205,
              "name": "project.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type.get('name')",
              "lineno": 207,
              "name": "issue_type.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type.get('fields')",
              "lineno": 208,
              "name": "issue_type.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 180,
          "name": "_epic_name_allowed_on_create",
          "qualname": "_epic_name_allowed_on_create",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('Atlassian base URL is not configured')",
              "lineno": 227,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(request.project_id)",
              "lineno": 230,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(request.project_key)",
              "lineno": 231,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "resolve_project(request.project_key, request.project_id)",
              "lineno": 234,
              "name": "resolve_project",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(resolved.get('id'))",
              "lineno": 235,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "resolved.get('id')",
              "lineno": 235,
              "name": "resolved.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(resolved.get('key'))",
              "lineno": 236,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "resolved.get('key')",
              "lineno": 236,
              "name": "resolved.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "build_jira_fields(request=request, description_adf=_ensure_description_adf(description_adf, request.description_text), labels=labels, project_meta=project_meta)",
              "lineno": 238,
              "name": "build_jira_fields",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_ensure_description_adf(description_adf, request.description_text)",
              "lineno": 240,
              "name": "_ensure_description_adf",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(epic_name_field_id)",
              "lineno": 248,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "get_epic_name_field_id()",
              "lineno": 248,
              "name": "get_epic_name_field_id",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(request.epic_name)",
              "lineno": 249,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(request.summary)",
              "lineno": 249,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(project_meta.get('key'))",
              "lineno": 250,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('key')",
              "lineno": 250,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_str_or_none(project_meta.get('id'))",
              "lineno": 251,
              "name": "_to_str_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('id')",
              "lineno": 251,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_epic_name_allowed_on_create(project_key, project_id, candidate_field_id)",
              "lineno": 253,
              "name": "_epic_name_allowed_on_create",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 257,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=60)",
              "lineno": 259,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.post(url, headers=_auth_headers(), json=payload)",
              "lineno": 260,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 260,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 262,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "exc.response.json()",
              "lineno": 270,
              "name": "exc.response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(error_json, dict)",
              "lineno": 273,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "error_json.get('errors')",
              "lineno": 273,
              "name": "error_json.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(field_errors, dict)",
              "lineno": 275,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "field_errors.get(epic_field_id_used)",
              "lineno": 276,
              "name": "field_errors.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(field_error, str)",
              "lineno": 277,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "field_error.lower()",
              "lineno": 278,
              "name": "field_error.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(payload['fields'])",
              "lineno": 285,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "trimmed_payload['fields'].pop(epic_field_id_used, None)",
              "lineno": 286,
              "name": "trimmed_payload.pop",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post(url, headers=_auth_headers(), json=trimmed_payload)",
              "lineno": 287,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_auth_headers()",
              "lineno": 287,
              "name": "_auth_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "retry_response.raise_for_status()",
              "lineno": 289,
              "name": "retry_response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_upstream_validation_error('Jira epic creation failed after retry', details={'status': retry_exc.response.status_code, 'body': retry_body, 'payload': trimmed_payload})",
              "lineno": 292,
              "name": "_upstream_validation_error",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "retry_response.json()",
              "lineno": 301,
              "name": "retry_response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('key')",
              "lineno": 302,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('id')",
              "lineno": 305,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('key')",
              "lineno": 306,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 307,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            },
            {
              "category": "internal",
              "display": "_upstream_validation_error(f'Jira issue create failed ({status})', details={'body': body, 'payload': payload})",
              "lineno": 310,
              "name": "_upstream_validation_error",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tool_args_invalid(f'Jira issue create failed ({status})', details={'body': body, 'payload': payload})",
              "lineno": 315,
              "name": "_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Jira {status}: {body}')",
              "lineno": 319,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 321,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.get('key')",
              "lineno": 322,
              "name": "data.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('id')",
              "lineno": 325,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('key')",
              "lineno": 326,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "settings.atlassian_base_url.rstrip('/')",
              "lineno": 327,
              "name": "settings.atlassian_base_url.rstrip",
              "resolved_module": "app.config.settings"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a Jira issue (Epic/Task/etc) and return identifiers.",
          "endpoint": null,
          "is_async": false,
          "lineno": 217,
          "name": "create_issue",
          "qualname": "create_issue",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "request.model_copy(update={'issue_type': 'Epic'})",
              "lineno": 344,
              "name": "request.model_copy",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "epic_request.model_copy(update={'project_id': project_id})",
              "lineno": 348,
              "name": "epic_request.model_copy",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "epic_request.model_copy(update={'project_key': project_key})",
              "lineno": 350,
              "name": "epic_request.model_copy",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "create_issue(request=epic_request, description_adf=description_adf, labels=labels, epic_name_field_id=epic_name_field_id)",
              "lineno": 351,
              "name": "create_issue",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Backwards-compatible wrapper that always creates an Epic.",
          "endpoint": null,
          "is_async": false,
          "lineno": 331,
          "name": "create_epic",
          "qualname": "create_epic",
          "return_annotation": "Dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "base64",
          "source": "base64",
          "type": "import"
        },
        {
          "alias": "Lock",
          "source": "threading.Lock",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "PublishJiraRequest",
          "source": "app.schemas.publish.PublishJiraRequest",
          "type": "from"
        },
        {
          "alias": "sync_client",
          "source": "app.utils.http.sync_client",
          "type": "from"
        }
      ],
      "module": "app.adapters.jira_adapter",
      "path": "Src/backend/app/adapters/jira_adapter.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "service",
              "display": "ExternalServiceError('OpenAI configuration is incomplete (missing API key)')",
              "lineno": 19,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "(settings.openai_base_url or 'https://api.openai.com/v1').rstrip('/')",
              "lineno": 21,
              "name": "rstrip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sync_client(timeout=120)",
              "lineno": 38,
              "name": "sync_client",
              "resolved_module": "app.utils.http.sync_client"
            },
            {
              "category": "internal",
              "display": "client.post(url, headers=headers, json=payload)",
              "lineno": 39,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.raise_for_status()",
              "lineno": 41,
              "name": "response.raise_for_status",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'OpenAI request failed: {exc.response.status_code}')",
              "lineno": 43,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 46,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError('OpenAI returned an unexpected payload')",
              "lineno": 48,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "json.loads(content)",
              "lineno": 49,
              "name": "json.loads",
              "resolved_module": "json"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Call OpenAI chat completion endpoint expecting JSON output.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "chat_json",
          "qualname": "chat_json",
          "return_annotation": "Dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "sync_client",
          "source": "app.utils.http.sync_client",
          "type": "from"
        }
      ],
      "module": "app.adapters.openai_planner",
      "path": "Src/backend/app/adapters/openai_planner.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 27,
          "name": "get_client",
          "qualname": "get_client",
          "return_annotation": "QdrantClient"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "logger.info('Provisioning Qdrant collection', collection=name, dim=int(dense_dim))",
              "lineno": 32,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "int(dense_dim)",
              "lineno": 32,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.create_collection(collection_name=name, vectors_config={'dense': qm.VectorParams(size=dense_dim, distance=qm.Distance.COSINE)}, sparse_vectors_config={'sparse': qm.SparseVectorParams()})",
              "lineno": 33,
              "name": "client.create_collection",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.VectorParams(size=dense_dim, distance=qm.Distance.COSINE)",
              "lineno": 36,
              "name": "qm.VectorParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "external-ai",
              "display": "qm.SparseVectorParams()",
              "lineno": 39,
              "name": "qm.SparseVectorParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "logger.info('Provisioned Qdrant collection', collection=name)",
              "lineno": 42,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 31,
          "name": "_create_collection",
          "qualname": "_create_collection",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.create_payload_index(collection_name=name, field_name=field, field_schema=qm.PayloadSchemaType.KEYWORD)",
              "lineno": 50,
              "name": "client.create_payload_index",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('Qdrant payload index ensured', collection=name, index=field, status='created')",
              "lineno": 55,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 62,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc).lower()",
              "lineno": 63,
              "name": "str.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 63,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('Qdrant payload index ensured', collection=name, index=field, status='exists')",
              "lineno": 65,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant collection unavailable for index creation', collection=name, index=field, status=status)",
              "lineno": 73,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant collection '{name}' is not accessible for index creation\")",
              "lineno": 79,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant payload index creation failed', collection=name, index=field, status=status, error=str(exc))",
              "lineno": 82,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 87,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant payload index creation failed for '{name}.{field}': {exc}\")",
              "lineno": 89,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ensure required payload indexes exist for tenant and project filters.",
          "endpoint": null,
          "is_async": false,
          "lineno": 45,
          "name": "ensure_payload_indexes",
          "qualname": "ensure_payload_indexes",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.get_collections()",
              "lineno": 98,
              "name": "client.get_collections",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Unable to enumerate Qdrant collections for index bootstrap: {}', exc)",
              "lineno": 100,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "getattr(collections, 'collections', [])",
              "lineno": 103,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(collection, 'name', None)",
              "lineno": 104,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ensure_payload_indexes(name)",
              "lineno": 108,
              "name": "ensure_payload_indexes",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Failed to ensure payload indexes', collection=name, error=str(exc))",
              "lineno": 110,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 110,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Enumerate collections and ensure payload indexes exist (idempotent).",
          "endpoint": null,
          "is_async": false,
          "lineno": 94,
          "name": "ensure_all_payload_indexes",
          "qualname": "ensure_all_payload_indexes",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.get_collection(name)",
              "lineno": 118,
              "name": "client.get_collection",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant collection '{name}' is unavailable\")",
              "lineno": 120,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "getattr(info.config, 'params', None)",
              "lineno": 123,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(params, 'vectors', None)",
              "lineno": 125,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(vectors, Mapping)",
              "lineno": 126,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "vectors.get('dense')",
              "lineno": 127,
              "name": "vectors.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(vectors, 'dense', None)",
              "lineno": 129,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(dense, Mapping)",
              "lineno": 132,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dense.get('size')",
              "lineno": 133,
              "name": "dense.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(dense, 'size', None)",
              "lineno": 135,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(size)",
              "lineno": 137,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(expected_dim)",
              "lineno": 137,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant collection has incompatible vector size', collection=name, actual_dim=int(size), expected_dim=int(expected_dim))",
              "lineno": 138,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "int(size)",
              "lineno": 141,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(expected_dim)",
              "lineno": 142,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant collection '{name}' has incompatible vector size; expected {expected_dim}\")",
              "lineno": 144,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "ensure_payload_indexes(name)",
              "lineno": 148,
              "name": "ensure_payload_indexes",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 151,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Qdrant collection missing', collection=name, expected_dim=int(expected_dim))",
              "lineno": 154,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "int(expected_dim)",
              "lineno": 157,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant collection '{name}' is missing\")",
              "lineno": 159,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "_create_collection(name, expected_dim)",
              "lineno": 162,
              "name": "_create_collection",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ensure_payload_indexes(name)",
              "lineno": 163,
              "name": "ensure_payload_indexes",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant collection error', collection=name, status=status, expected_dim=int(expected_dim), error=str(exc))",
              "lineno": 165,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "int(expected_dim)",
              "lineno": 169,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 170,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Qdrant collection '{name}' is not accessible: {exc}\")",
              "lineno": 172,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Validate that the expected collection exists and matches schema.",
          "endpoint": null,
          "is_async": false,
          "lineno": 113,
          "name": "ensure_collection",
          "qualname": "ensure_collection",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.upsert(collection_name=collection, points=qm.Batch(ids=list(ids), vectors={'dense': list(dense_vectors), 'sparse': list(sparse_vectors)}, payloads=list(payloads)))",
              "lineno": 184,
              "name": "client.upsert",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.Batch(ids=list(ids), vectors={'dense': list(dense_vectors), 'sparse': list(sparse_vectors)}, payloads=list(payloads))",
              "lineno": 186,
              "name": "qm.Batch",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "list(ids)",
              "lineno": 187,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(dense_vectors)",
              "lineno": 188,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(sparse_vectors)",
              "lineno": 188,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(payloads)",
              "lineno": 189,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.error('Failed to upsert points into Qdrant', collection=collection, count=len(ids), error=str(exc))",
              "lineno": 193,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "len(ids)",
              "lineno": 196,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 197,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f\"Failed to upsert points into '{collection}': {exc}\")",
              "lineno": 199,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Upsert a batch of points into Qdrant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 175,
          "name": "upsert_points",
          "qualname": "upsert_points",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(point.id)",
              "lineno": 211,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fused.setdefault(identifier, {'payload': point.payload or {}, 'dense': 0.0, 'sparse': 0.0})",
              "lineno": 212,
              "name": "fused.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(float(point.score), float(entry.get('dense', 0.0)))",
              "lineno": 213,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(point.score)",
              "lineno": 213,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(entry.get('dense', 0.0))",
              "lineno": 213,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('dense', 0.0)",
              "lineno": 213,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('payload')",
              "lineno": 214,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(point.id)",
              "lineno": 218,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fused.setdefault(identifier, {'payload': point.payload or {}, 'dense': 0.0, 'sparse': 0.0})",
              "lineno": 219,
              "name": "fused.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(float(point.score), float(entry.get('sparse', 0.0)))",
              "lineno": 220,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(point.score)",
              "lineno": 220,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(entry.get('sparse', 0.0))",
              "lineno": 220,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('sparse', 0.0)",
              "lineno": 220,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('payload')",
              "lineno": 221,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fused.values()",
              "lineno": 225,
              "name": "fused.values",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(entry.get('dense', 0.0))",
              "lineno": 226,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('dense', 0.0)",
              "lineno": 226,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(entry.get('sparse', 0.0))",
              "lineno": 227,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('sparse', 0.0)",
              "lineno": 227,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "combined.append((score, entry.get('payload', {}) or {}))",
              "lineno": 229,
              "name": "combined.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('payload', {})",
              "lineno": 229,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "combined.sort(key=lambda item: item[0], reverse=True)",
              "lineno": 231,
              "name": "combined.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 202,
          "name": "_fuse_hybrid",
          "qualname": "_fuse_hybrid",
          "return_annotation": "List[Tuple[float, dict]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "max(0.0, min(1.0, _lambda))",
              "lineno": 245,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "min(1.0, _lambda)",
              "lineno": 245,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(query_dense)",
              "lineno": 248,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Embedding dimension mismatch; expected {settings.embed_dim}, got {len(query_dense)}')",
              "lineno": 249,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "len(query_dense)",
              "lineno": 250,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(query_filter, dict)",
              "lineno": 253,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "_build_filter(query_filter)",
              "lineno": 256,
              "name": "_build_filter",
              "resolved_module": "app.adapters.hybrid_retriever._build_filter"
            },
            {
              "category": "internal",
              "display": "ensure_collection(col, dense_dim=settings.embed_dim, create_if_missing=False)",
              "lineno": 260,
              "name": "ensure_collection",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.search(collection_name=col, query_vector=vector, limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter if isinstance(query_filter, qm.Filter) else None)",
              "lineno": 264,
              "name": "client.search",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 270,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "isinstance(query_filter, qm.Filter)",
              "lineno": 271,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 274,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc).lower()",
              "lineno": 275,
              "name": "str.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 275,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(vector, 'name', 'unknown')",
              "lineno": 276,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Encountered missing Qdrant index; attempting autofix', collection=col, vector_type=vector_name)",
              "lineno": 278,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "ensure_payload_indexes(col)",
              "lineno": 283,
              "name": "ensure_payload_indexes",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.search(collection_name=col, query_vector=vector, limit=k, with_payload=True, with_vectors=False, search_params=qm.SearchParams(hnsw_ef=128, exact=False), query_filter=query_filter if isinstance(query_filter, qm.Filter) else None)",
              "lineno": 284,
              "name": "client.search",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.SearchParams(hnsw_ef=128, exact=False)",
              "lineno": 290,
              "name": "qm.SearchParams",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "isinstance(query_filter, qm.Filter)",
              "lineno": 291,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant search failed due to missing index', collection=col, vector_type=vector_name, status=status)",
              "lineno": 294,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.error('Qdrant search failure', collection=col, vector_type=getattr(vector, 'name', 'unknown'), status=status)",
              "lineno": 301,
              "name": "logger.error",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "getattr(vector, 'name', 'unknown')",
              "lineno": 304,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_search_with_retry(qm.NamedVector(name='dense', vector=query_dense))",
              "lineno": 309,
              "name": "_search_with_retry",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.NamedVector(name='dense', vector=query_dense)",
              "lineno": 309,
              "name": "qm.NamedVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "_search_with_retry(qm.NamedSparseVector(name='sparse', vector=query_sparse))",
              "lineno": 310,
              "name": "_search_with_retry",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.NamedSparseVector(name='sparse', vector=query_sparse)",
              "lineno": 310,
              "name": "qm.NamedSparseVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "_fuse_hybrid(dense_points, sparse_points, weight_dense, weight_sparse)",
              "lineno": 312,
              "name": "_fuse_hybrid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "results.append((score, col, payload))",
              "lineno": 313,
              "name": "results.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "results.sort(key=lambda item: item[0], reverse=True)",
              "lineno": 315,
              "name": "results.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Perform hybrid search across multiple collections and aggregate results.",
          "endpoint": null,
          "is_async": false,
          "lineno": 235,
          "name": "hybrid_search",
          "qualname": "hybrid_search",
          "return_annotation": "List[Tuple[float, str, dict]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Mapping",
          "source": "collections.abc.Mapping",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "QdrantClient",
          "source": "qdrant_client.QdrantClient",
          "type": "from"
        },
        {
          "alias": "qm",
          "source": "qdrant_client.http.models",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        }
      ],
      "module": "app.adapters.qdrant_client",
      "path": "Src/backend/app/adapters/qdrant_client.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Sparse encoding result suitable for Qdrant sparse vectors.",
          "lineno": 23,
          "methods": [],
          "name": "SparseEncoded"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "hashlib.md5(token.encode('utf-8'), usedforsecurity=False).hexdigest()",
              "lineno": 18,
              "name": "hashlib.md5.hexdigest",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "hashlib.md5(token.encode('utf-8'), usedforsecurity=False)",
              "lineno": 18,
              "name": "hashlib.md5",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "token.encode('utf-8')",
              "lineno": 18,
              "name": "token.encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(digest, 16)",
              "lineno": 19,
              "name": "int",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Hash a token into the sparse feature space.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "_hash",
          "qualname": "_hash",
          "return_annotation": "int"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "token.lower()",
              "lineno": 33,
              "name": "token.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "TOKEN_RE.findall(text)",
              "lineno": 33,
              "name": "TOKEN_RE.findall",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "Counter(tokens)",
              "lineno": 34,
              "name": "Counter",
              "resolved_module": "collections.Counter"
            },
            {
              "category": "internal",
              "display": "counts.items()",
              "lineno": 37,
              "name": "counts.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_hash(token)",
              "lineno": 38,
              "name": "_hash",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.log(1 + term_freq)",
              "lineno": 39,
              "name": "math.log",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "indices.append(index)",
              "lineno": 40,
              "name": "indices.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "values.append(weight)",
              "lineno": 41,
              "name": "values.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SparseEncoded(indices=indices, values=values)",
              "lineno": 42,
              "name": "SparseEncoded",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Tokenise *text* and return hashed sparse features.",
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "encode_sparse",
          "qualname": "encode_sparse",
          "return_annotation": "SparseEncoded"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "hashlib",
          "source": "hashlib",
          "type": "import"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "Counter",
          "source": "collections.Counter",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        }
      ],
      "module": "app.adapters.sparse_hash",
      "path": "Src/backend/app/adapters/sparse_hash.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "app.agentic.__init__",
      "path": "Src/backend/app/agentic/__init__.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail={'code': 'TOOL_ARGS_INVALID', 'message': 'Invalid tool arguments', 'details': exc.errors()})",
              "lineno": 23,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "exc.errors()",
              "lineno": 28,
              "name": "exc.errors",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "_validation_error_to_http",
          "qualname": "_validation_error_to_http",
          "return_annotation": "HTTPException"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 43,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 45,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "retriever_port.rag_search(tenant_id=tenant_id, user_claims=user_claims, query=query, targets=targets or ['global'], k=k, strategy=strategy)",
              "lineno": 49,
              "name": "retriever_port.rag_search",
              "resolved_module": "app.ports.retriever"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Expose the retrieval service as a planner tool.",
          "endpoint": null,
          "is_async": false,
          "lineno": 33,
          "name": "rag_search_tool",
          "qualname": "rag_search_tool",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('role', 'Dev')",
              "lineno": 76,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "policy",
              "display": "enforce('publish_artifact', role)",
              "lineno": 77,
              "name": "enforce",
              "resolved_module": "app.application.policy_bus.enforce"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=502, detail={'code': 'ATLASSIAN_CONFIG_MISSING', 'message': 'Atlassian Jira integration is not configured'})",
              "lineno": 80,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key=project_key, project_id=project_id, issue_type=issue_type or 'Epic', summary=summary, description_text=description_text or description, epic_name=epic_name, parent_issue_key=parent_issue_key)",
              "lineno": 89,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "internal",
              "display": "_validation_error_to_http(exc)",
              "lineno": 99,
              "name": "_validation_error_to_http",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(resolved_id)",
              "lineno": 107,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "deps.SessionLocal()",
              "lineno": 111,
              "name": "deps.SessionLocal",
              "resolved_module": "app.deps"
            },
            {
              "category": "internal",
              "display": "session.get(m.Project, db_project_id)",
              "lineno": 112,
              "name": "session.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(resolved_key).strip()",
              "lineno": 118,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(resolved_key)",
              "lineno": 118,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(resolved_id).strip()",
              "lineno": 120,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(resolved_id)",
              "lineno": 120,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "request.model_copy(update={'project_key': resolved_key, 'project_id': resolved_id})",
              "lineno": 123,
              "name": "request.model_copy",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "jira_adapter.resolve_project(project_key=request.project_key, project_id=request.project_id)",
              "lineno": 126,
              "name": "jira_adapter.resolve_project",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "integration",
              "display": "jira_adapter.resolve_project(request.project_key)",
              "lineno": 129,
              "name": "jira_adapter.resolve_project",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "integration",
              "display": "jira_adapter.resolve_project(request.project_id)",
              "lineno": 131,
              "name": "jira_adapter.resolve_project",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "internal",
              "display": "project_meta.get('id')",
              "lineno": 139,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_meta.get('key')",
              "lineno": 140,
              "name": "project_meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "request.model_copy(update={'project_id': resolved_id, 'project_key': resolved_key})",
              "lineno": 141,
              "name": "request.model_copy",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "jira_adapter.create_epic(request=request, description_adf=description_adf, labels=normalised_labels, epic_name_field_id=epic_name_field_id, project_id=request.project_id, project_key=request.project_key)",
              "lineno": 144,
              "name": "jira_adapter.create_epic",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "internal",
              "display": "logger.info('publish_artifact:jira_epic', project_key=request.project_key, project_id=request.project_id, actor_role=role, actor='redacted')",
              "lineno": 152,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 60,
          "name": "jira_epic_tool",
          "qualname": "jira_epic_tool",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('role', 'Dev')",
              "lineno": 174,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "policy",
              "display": "enforce('publish_artifact', role)",
              "lineno": 175,
              "name": "enforce",
              "resolved_module": "app.application.policy_bus.enforce"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=502, detail={'code': 'ATLASSIAN_CONFIG_MISSING', 'message': 'Atlassian Confluence integration is not configured'})",
              "lineno": 178,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.discover_default_space()",
              "lineno": 190,
              "name": "confluence_adapter.discover_default_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "internal",
              "display": "default_space.get('key')",
              "lineno": 191,
              "name": "default_space.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "default_space.get('id')",
              "lineno": 192,
              "name": "default_space.get",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "PublishConfluenceRequest(space_key=resolved_space_key, space_id=resolved_space_id, title=title, body_html=body_html)",
              "lineno": 195,
              "name": "PublishConfluenceRequest",
              "resolved_module": "app.schemas.publish.PublishConfluenceRequest"
            },
            {
              "category": "internal",
              "display": "_validation_error_to_http(exc)",
              "lineno": 202,
              "name": "_validation_error_to_http",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space(space_key=request.space_key, space_id=request.space_id)",
              "lineno": 205,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space(request.space_key)",
              "lineno": 209,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space(request.space_id)",
              "lineno": 211,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "internal",
              "display": "isinstance(exc.detail, dict)",
              "lineno": 215,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(detail, dict)",
              "lineno": 216,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "detail.get('code')",
              "lineno": 216,
              "name": "detail.get",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.discover_default_space()",
              "lineno": 218,
              "name": "confluence_adapter.discover_default_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "internal",
              "display": "request.model_copy(update={'space_key': fallback_space.get('key'), 'space_id': fallback_space.get('id')})",
              "lineno": 219,
              "name": "request.model_copy",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fallback_space.get('key')",
              "lineno": 221,
              "name": "fallback_space.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fallback_space.get('id')",
              "lineno": 222,
              "name": "fallback_space.get",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space(space_key=updated_request.space_key, space_id=updated_request.space_id)",
              "lineno": 226,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space(updated_request.space_key or updated_request.space_id)",
              "lineno": 231,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "integration",
              "display": "to_confluence_html(evidence)",
              "lineno": 238,
              "name": "to_confluence_html",
              "resolved_module": "worker.handlers.evidence_builder.to_confluence_html"
            },
            {
              "category": "integration",
              "display": "to_confluence_html('Auto-generated by North Star')",
              "lineno": 240,
              "name": "to_confluence_html",
              "resolved_module": "worker.handlers.evidence_builder.to_confluence_html"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.create_page(space_id=space['id'], space_key=space['key'], title=request.title, body_html=final_body, draft=settings.confluence_draft_mode)",
              "lineno": 243,
              "name": "confluence_adapter.create_page",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "internal",
              "display": "logger.info('publish_artifact:confluence_page', space_key=space['key'], space_id=space.get('id'), title=request.title[:120], actor_role=role, actor='redacted')",
              "lineno": 250,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "space.get('id')",
              "lineno": 253,
              "name": "space.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 164,
          "name": "confluence_page_tool",
          "qualname": "confluence_page_tool",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "register_tool('rag_search', rag_search_tool)",
              "lineno": 264,
              "name": "register_tool",
              "resolved_module": "app.ports.planner.register_tool"
            },
            {
              "category": "internal",
              "display": "register_tool('jira_epic', jira_epic_tool)",
              "lineno": 265,
              "name": "register_tool",
              "resolved_module": "app.ports.planner.register_tool"
            },
            {
              "category": "internal",
              "display": "register_tool('confluence_page', confluence_page_tool)",
              "lineno": 266,
              "name": "register_tool",
              "resolved_module": "app.ports.planner.register_tool"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 263,
          "name": "register_all_tools",
          "qualname": "register_all_tools",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "ValidationError",
          "source": "pydantic.ValidationError",
          "type": "from"
        },
        {
          "alias": "confluence_adapter",
          "source": "app.adapters.confluence_adapter",
          "type": "from"
        },
        {
          "alias": "jira_adapter",
          "source": "app.adapters.jira_adapter",
          "type": "from"
        },
        {
          "alias": "enforce",
          "source": "app.application.policy_bus.enforce",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "import"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "register_tool",
          "source": "app.ports.planner.register_tool",
          "type": "from"
        },
        {
          "alias": "PublishConfluenceRequest",
          "source": "app.schemas.publish.PublishConfluenceRequest",
          "type": "from"
        },
        {
          "alias": "PublishJiraRequest",
          "source": "app.schemas.publish.PublishJiraRequest",
          "type": "from"
        },
        {
          "alias": "to_confluence_html",
          "source": "worker.handlers.evidence_builder.to_confluence_html",
          "type": "from"
        }
      ],
      "module": "app.agentic.tools",
      "path": "Src/backend/app/agentic/tools.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 17,
          "methods": [],
          "name": "MapperOut"
        },
        {
          "docstring": "Contrastive A\u2192B mapper (per-tenant).\n- Learns term deltas from (A,B) concept pairs via simple additive delta.\n- Infers skills/doc deltas for a new target set weighted by hit.score and learnt weights.\n- Strictly tenant-scoped; honors allowed_targets to avoid cross-project leakage.",
          "lineno": 23,
          "methods": [
            "__init__",
            "_get_session",
            "_concept_tokens",
            "fit",
            "infer"
          ],
          "name": "ABMapper"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "ABMapEdge",
          "source": "app.domain.models.ABMapEdge",
          "type": "from"
        },
        {
          "alias": "TenantMapperWeights",
          "source": "app.domain.models.TenantMapperWeights",
          "type": "from"
        },
        {
          "alias": "hash_text",
          "source": "app.utils.hashing.hash_text",
          "type": "from"
        }
      ],
      "module": "app.application.contrastive_mapper",
      "path": "Src/backend/app/application/contrastive_mapper.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the Qdrant collection name for the project.",
          "endpoint": null,
          "is_async": false,
          "lineno": 23,
          "name": "_collection_name",
          "qualname": "_collection_name",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "enumerate(zip(chunks, dense_vecs))",
              "lineno": 38,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "zip(chunks, dense_vecs)",
              "lineno": 38,
              "name": "zip",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "encode_sparse(chunk)",
              "lineno": 39,
              "name": "encode_sparse",
              "resolved_module": "app.adapters.sparse_hash.encode_sparse"
            },
            {
              "category": "internal",
              "display": "hash_text(chunk, namespace=f'{tenant_id}:{project_key}')",
              "lineno": 40,
              "name": "hash_text",
              "resolved_module": "app.utils.hashing.hash_text"
            },
            {
              "category": "internal",
              "display": "UUID(hex=digest[:32])",
              "lineno": 41,
              "name": "UUID",
              "resolved_module": "uuid.UUID"
            },
            {
              "category": "internal",
              "display": "str(chunk_uuid)",
              "lineno": 42,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ids.append(chunk_id)",
              "lineno": 43,
              "name": "ids.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sparse_vectors.append(qm.SparseVector(indices=sparse.indices, values=sparse.values))",
              "lineno": 44,
              "name": "sparse_vectors.append",
              "resolved_module": null
            },
            {
              "category": "external-ai",
              "display": "qm.SparseVector(indices=sparse.indices, values=sparse.values)",
              "lineno": 44,
              "name": "qm.SparseVector",
              "resolved_module": "qdrant_client.http.models"
            },
            {
              "category": "internal",
              "display": "payloads.append({'text': chunk, 'chunk_id': chunk_id, 'chunk_hash': digest, 'tenant_id': str(tenant_id), 'project_key': str(project_key), 'source': 'upload', 'position': index})",
              "lineno": 45,
              "name": "payloads.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(tenant_id)",
              "lineno": 50,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_key)",
              "lineno": 51,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Convert embedded chunks into components suitable for upsert.",
          "endpoint": null,
          "is_async": false,
          "lineno": 28,
          "name": "_to_points",
          "qualname": "_to_points",
          "return_annotation": "tuple[List[str], List[List[float]], List[qm.SparseVector], List[dict[str, Any]]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "text.strip()",
              "lineno": 68,
              "name": "text.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Empty document')",
              "lineno": 69,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "list(smart_chunks(text, max_tokens=max_tokens, overlap_tokens=overlap_tokens, respect_markdown=True, section_prefix=True))",
              "lineno": 71,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "smart_chunks(text, max_tokens=max_tokens, overlap_tokens=overlap_tokens, respect_markdown=True, section_prefix=True)",
              "lineno": 72,
              "name": "smart_chunks",
              "resolved_module": "app.utils.chunk.smart_chunks"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='No chunkable content')",
              "lineno": 81,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "integration",
              "display": "embed_batch(chunks)",
              "lineno": 84,
              "name": "embed_batch",
              "resolved_module": "app.adapters.dense_bge.embed_batch"
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Embedding model unavailable: {exc}')",
              "lineno": 86,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "service",
              "display": "ExternalServiceError('Embedding returned empty vectors')",
              "lineno": 89,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "len(dense_vecs[0])",
              "lineno": 91,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError(f'Embedding dimension mismatch; expected {settings.embed_dim}, got {vector_dim}')",
              "lineno": 93,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "_collection_name(tenant_id, project_key)",
              "lineno": 97,
              "name": "_collection_name",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "ensure_qdrant_collection(collection, dense_dim=settings.embed_dim)",
              "lineno": 98,
              "name": "ensure_qdrant_collection",
              "resolved_module": "app.adapters.qdrant_client.ensure_collection"
            },
            {
              "category": "internal",
              "display": "_to_points(chunks, dense_vecs, tenant_id, project_key)",
              "lineno": 100,
              "name": "_to_points",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "upsert_points(collection, ids, dense_vectors, sparse_vectors, payloads)",
              "lineno": 101,
              "name": "upsert_points",
              "resolved_module": "app.adapters.qdrant_client.upsert_points"
            },
            {
              "category": "internal",
              "display": "logger.info('Ingested chunks', count=len(ids), collection=collection)",
              "lineno": 102,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "len(ids)",
              "lineno": 102,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(ids)",
              "lineno": 104,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(ids)",
              "lineno": 104,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Chunk, embed, and upsert plain text into Qdrant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 59,
          "name": "ingest_text",
          "qualname": "ingest_text",
          "return_annotation": "dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=415, detail='PDF support not installed; pip install PyPDF2')",
              "lineno": 112,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "PdfReader(BytesIO(file_bytes))",
              "lineno": 114,
              "name": "PdfReader",
              "resolved_module": "PyPDF2.PdfReader"
            },
            {
              "category": "internal",
              "display": "BytesIO(file_bytes)",
              "lineno": 114,
              "name": "BytesIO",
              "resolved_module": "io.BytesIO"
            },
            {
              "category": "internal",
              "display": "pages.append(page.extract_text() or '')",
              "lineno": 118,
              "name": "pages.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "page.extract_text()",
              "lineno": 118,
              "name": "page.extract_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Failed to extract text from PDF page', error=str(exc))",
              "lineno": 120,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 120,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pages.append('')",
              "lineno": 121,
              "name": "pages.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n\\n'.join(pages).strip()",
              "lineno": 122,
              "name": "\n\n.join.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n\\n'.join(pages)",
              "lineno": 122,
              "name": "\n\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Extract text from a PDF file.",
          "endpoint": null,
          "is_async": false,
          "lineno": 107,
          "name": "_pdf_to_text",
          "qualname": "_pdf_to_text",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "(filename or '').lower()",
              "lineno": 128,
              "name": "lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "name.endswith(('.md', '.markdown', '.txt'))",
              "lineno": 129,
              "name": "name.endswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "file_bytes.decode('utf-8')",
              "lineno": 131,
              "name": "file_bytes.decode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "file_bytes.decode('latin-1', errors='ignore')",
              "lineno": 133,
              "name": "file_bytes.decode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "name.endswith('.pdf')",
              "lineno": 135,
              "name": "name.endswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_pdf_to_text(file_bytes)",
              "lineno": 136,
              "name": "_pdf_to_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=422, detail='Could not extract text from PDF')",
              "lineno": 138,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "file_bytes.decode('utf-8')",
              "lineno": 142,
              "name": "file_bytes.decode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "file_bytes.decode('latin-1', errors='ignore')",
              "lineno": 144,
              "name": "file_bytes.decode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Decode file bytes into plain text using best-effort heuristics.",
          "endpoint": null,
          "is_async": false,
          "lineno": 125,
          "name": "extract_text",
          "qualname": "extract_text",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "extract_text(file_bytes, filename)",
              "lineno": 155,
              "name": "extract_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ingest_text(text, tenant_id, project_key)",
              "lineno": 156,
              "name": "ingest_text",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ingest a file by dispatching to the correct decoder.",
          "endpoint": null,
          "is_async": false,
          "lineno": 147,
          "name": "ingest_file",
          "qualname": "ingest_file",
          "return_annotation": "dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "collections.abc.Iterable",
          "type": "from"
        },
        {
          "alias": "BytesIO",
          "source": "io.BytesIO",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "UUID",
          "source": "uuid.UUID",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "qm",
          "source": "qdrant_client.http.models",
          "type": "from"
        },
        {
          "alias": "embed_batch",
          "source": "app.adapters.dense_bge.embed_batch",
          "type": "from"
        },
        {
          "alias": "ensure_qdrant_collection",
          "source": "app.adapters.qdrant_client.ensure_collection",
          "type": "from"
        },
        {
          "alias": "get_client",
          "source": "app.adapters.qdrant_client.get_client",
          "type": "from"
        },
        {
          "alias": "upsert_points",
          "source": "app.adapters.qdrant_client.upsert_points",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "encode_sparse",
          "source": "app.adapters.sparse_hash.encode_sparse",
          "type": "from"
        },
        {
          "alias": "smart_chunks",
          "source": "app.utils.chunk.smart_chunks",
          "type": "from"
        },
        {
          "alias": "hash_text",
          "source": "app.utils.hashing.hash_text",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.application.ingestion_service",
      "path": "Src/backend/app/application/ingestion_service.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "token.lower()",
              "lineno": 21,
              "name": "token.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_TOKEN_RE.findall(text or '')",
              "lineno": 21,
              "name": "_TOKEN_RE.findall",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "_tokenise",
          "qualname": "_tokenise",
          "return_annotation": "List[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "list(smart_chunks(text, max_tokens=max_tokens, overlap_tokens=overlap_tokens, respect_markdown=True, section_prefix=True))",
              "lineno": 36,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "smart_chunks(text, max_tokens=max_tokens, overlap_tokens=overlap_tokens, respect_markdown=True, section_prefix=True)",
              "lineno": 37,
              "name": "smart_chunks",
              "resolved_module": "app.utils.chunk.smart_chunks"
            },
            {
              "category": "internal",
              "display": "ValueError('No chunkable content for fallback store')",
              "lineno": 46,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(chunks)",
              "lineno": 49,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hash_text(chunk, namespace=f'{tenant_id}:{project.key}')",
              "lineno": 50,
              "name": "hash_text",
              "resolved_module": "app.utils.hashing.hash_text"
            },
            {
              "category": "internal",
              "display": "payloads.append(m.Event(tenant_id=tenant_id, project_id=project.id, developer_id=0, type='kb_chunk', payload_json={'chunk_id': chunk_id, 'text': chunk, 'project_key': project.key, 'position': index, 'source': source}))",
              "lineno": 51,
              "name": "payloads.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Event(tenant_id=tenant_id, project_id=project.id, developer_id=0, type='kb_chunk', payload_json={'chunk_id': chunk_id, 'text': chunk, 'project_key': project.key, 'position': index, 'source': source})",
              "lineno": 52,
              "name": "m.Event",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.query(m.Event).filter(m.Event.tenant_id == tenant_id).filter(m.Event.type == 'kb_chunk').all()",
              "lineno": 69,
              "name": "db.query.filter.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Event).filter(m.Event.tenant_id == tenant_id).filter(m.Event.type == 'kb_chunk')",
              "lineno": 69,
              "name": "db.query.filter.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Event).filter(m.Event.tenant_id == tenant_id)",
              "lineno": 69,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Event)",
              "lineno": 69,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(event.payload_json or {}).get('project_key')",
              "lineno": 75,
              "name": "get",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.delete(event)",
              "lineno": 76,
              "name": "db.delete",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.add_all(payloads)",
              "lineno": 77,
              "name": "db.add_all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 78,
              "name": "db.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.bind(req='').info('Stored fallback knowledge chunks', project=project.key, tenant=tenant_id, chunks=len(payloads))",
              "lineno": 80,
              "name": "logger.bind.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='')",
              "lineno": 80,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "len(payloads)",
              "lineno": 84,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(payloads)",
              "lineno": 87,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(payloads)",
              "lineno": 87,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Persist document chunks into the ``event`` table for fallback retrieval.",
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "store_chunks",
          "qualname": "store_chunks",
          "return_annotation": "dict[str, int]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_tokenise(query)",
              "lineno": 100,
              "name": "_tokenise",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "token.lower()",
              "lineno": 102,
              "name": "token.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(query or '').split()",
              "lineno": 102,
              "name": "split",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.Event).where(m.Event.tenant_id == tenant_id).where(m.Event.type == 'kb_chunk')",
              "lineno": 105,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Event).where(m.Event.tenant_id == tenant_id)",
              "lineno": 105,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Event)",
              "lineno": 105,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "db.execute(stmt).scalars().all()",
              "lineno": 110,
              "name": "db.execute.scalars.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(stmt).scalars()",
              "lineno": 110,
              "name": "db.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(stmt)",
              "lineno": 110,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(project_keys)",
              "lineno": 112,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(event.payload_json or {}).get('project_key')",
              "lineno": 113,
              "name": "get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('text', '')",
              "lineno": 117,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_tokenise(text)",
              "lineno": 118,
              "name": "_tokenise",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "chunk_tokens.count(token)",
              "lineno": 122,
              "name": "chunk_tokens.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(chunk_tokens)",
              "lineno": 122,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "token_counts.get(token, 0)",
              "lineno": 125,
              "name": "token_counts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.log(tf)",
              "lineno": 127,
              "name": "math.log",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "results.append((score, payload.get('project_key', ''), payload))",
              "lineno": 132,
              "name": "results.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('project_key', '')",
              "lineno": 132,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "results.sort(key=lambda item: item[0], reverse=True)",
              "lineno": 134,
              "name": "results.sort",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "evt.payload_json.get('project_key', '')",
              "lineno": 138,
              "name": "evt.payload_json.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Retrieve chunks via simple keyword scoring for fallback responses.",
          "endpoint": null,
          "is_async": false,
          "lineno": 90,
          "name": "search_chunks",
          "qualname": "search_chunks",
          "return_annotation": "List[Tuple[float, str, dict]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "delete",
          "source": "sqlalchemy.delete",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "smart_chunks",
          "source": "app.utils.chunk.smart_chunks",
          "type": "from"
        },
        {
          "alias": "hash_text",
          "source": "app.utils.hashing.hash_text",
          "type": "from"
        }
      ],
      "module": "app.application.local_kb",
      "path": "Src/backend/app/application/local_kb.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "'\\n'.join((f'- {path} (gap {gap:.2f})' for path, gap in gaps[:5]))",
              "lineno": 17,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return markdown bullet list of the top gaps.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "_format_gap_bullets",
          "qualname": "_format_gap_bullets",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "project_skill_gap(db, developer_id=developer_id, project_id=project_id)",
              "lineno": 37,
              "name": "project_skill_gap",
              "resolved_module": "app.ports.talent_graph.project_skill_gap"
            },
            {
              "category": "internal",
              "display": "_format_gap_bullets(gaps_algo)",
              "lineno": 38,
              "name": "_format_gap_bullets",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_planner.create_plan(task_prompt=task, allowed_tools=['rag_search', 'confluence_page', 'jira_epic'])",
              "lineno": 48,
              "name": "_planner.create_plan",
              "resolved_module": "app.ports.planner"
            },
            {
              "category": "internal",
              "display": "plan.setdefault('_meta', {})",
              "lineno": 52,
              "name": "plan.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.setdefault('project_key', project_key)",
              "lineno": 53,
              "name": "meta.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.setdefault('developer_name', dev_name)",
              "lineno": 54,
              "name": "meta.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.setdefault('tenant_id', user_claims.get('tenant_id'))",
              "lineno": 55,
              "name": "meta.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 55,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.setdefault('space_key', settings.atlassian_space)",
              "lineno": 57,
              "name": "meta.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_planner.execute_plan(plan, user_claims=user_claims)",
              "lineno": 58,
              "name": "_planner.execute_plan",
              "resolved_module": "app.ports.planner"
            },
            {
              "category": "internal",
              "display": "exec_res.get('output', {}).get('notes')",
              "lineno": 59,
              "name": "exec_res.get.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "exec_res.get('output', {})",
              "lineno": 59,
              "name": "exec_res.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Planner fallback engaged for onboarding; returning heuristic plan')",
              "lineno": 60,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "_fallback_onboarding_plan(dev_name, project_key, gaps_algo)",
              "lineno": 61,
              "name": "_fallback_onboarding_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "exec_res.get('output', {})",
              "lineno": 62,
              "name": "exec_res.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "exec_res.get('artifacts', {})",
              "lineno": 63,
              "name": "exec_res.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('gaps')",
              "lineno": 65,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "OnboardingPlan(summary=output.get('summary', 'Onboarding plan'), gaps=llm_gaps, two_week_plan=output.get('two_week_plan', []), artifacts={'confluence': artifacts.get('step_2:confluence_page') or artifacts.get('confluence_page') or {}, 'jira_epic': artifacts.get('step_3:jira_epic') or artifacts.get('jira_epic') or {}})",
              "lineno": 69,
              "name": "OnboardingPlan",
              "resolved_module": "app.domain.schemas.OnboardingPlan"
            },
            {
              "category": "internal",
              "display": "output.get('summary', 'Onboarding plan')",
              "lineno": 70,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('two_week_plan', [])",
              "lineno": 72,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifacts.get('step_2:confluence_page')",
              "lineno": 74,
              "name": "artifacts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifacts.get('confluence_page')",
              "lineno": 74,
              "name": "artifacts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifacts.get('step_3:jira_epic')",
              "lineno": 75,
              "name": "artifacts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifacts.get('jira_epic')",
              "lineno": 75,
              "name": "artifacts.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create an onboarding plan by merging planner output with graph-derived gaps.\n\nNOTE: We import the planner lazily inside this function to avoid a circular\nimport between app.ports.planner -> app.application.policy_bus -> app.application.*.",
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "generate_onboarding",
          "qualname": "generate_onboarding",
          "return_annotation": "OnboardingPlan"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "min(0.9, 0.6 + gap / 2)",
              "lineno": 91,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "tasks.append({'day': day, 'task': f\"Deep dive into '{path}' with focus on closing gap ({gap:.2f}).\"})",
              "lineno": 96,
              "name": "tasks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "tasks.extend([{'day': max(day, 7), 'task': 'Shadow senior engineer and document environment setup.'}, {'day': max(day + 3, 10), 'task': 'Deliver a walkthrough or demo to confirm understanding.'}])",
              "lineno": 102,
              "name": "tasks.extend",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(day, 7)",
              "lineno": 104,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(day + 3, 10)",
              "lineno": 105,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "OnboardingPlan(summary=summary, gaps=gap_entries, two_week_plan=tasks, artifacts={'confluence': {'url': 'Planner fallback engaged; create Confluence page manually.'}, 'jira_epic': {'url': 'Planner fallback engaged; create Jira epic manually.'}}, notice='Planner service unavailable; delivered heuristic onboarding plan. Please retry later.')",
              "lineno": 114,
              "name": "OnboardingPlan",
              "resolved_module": "app.domain.schemas.OnboardingPlan"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Produce a deterministic onboarding plan when the planner is unavailable.",
          "endpoint": null,
          "is_async": false,
          "lineno": 80,
          "name": "_fallback_onboarding_plan",
          "qualname": "_fallback_onboarding_plan",
          "return_annotation": "OnboardingPlan"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "OnboardingPlan",
          "source": "app.domain.schemas.OnboardingPlan",
          "type": "from"
        },
        {
          "alias": "project_skill_gap",
          "source": "app.ports.talent_graph.project_skill_gap",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.application.onboarding_service",
      "path": "Src/backend/app/application/onboarding_service.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "ALLOWED_TOOLS.get(role, set())",
              "lineno": 47,
              "name": "ALLOWED_TOOLS.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set()",
              "lineno": 47,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail={'code': 'RBAC_DENIED', 'message': f'{role} cannot run {tool}'})",
              "lineno": 49,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ensure *role* can execute *tool*; raise ``HTTPException`` otherwise.",
          "endpoint": null,
          "is_async": false,
          "lineno": 44,
          "name": "enforce",
          "qualname": "enforce",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Mapping",
          "source": "typing.Mapping",
          "type": "from"
        },
        {
          "alias": "Set",
          "source": "typing.Set",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        }
      ],
      "module": "app.application.policy_bus",
      "path": "Src/backend/app/application/policy_bus.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "list(targets)",
              "lineno": 20,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "retriever.rag_search(tenant_id=tenant_id, user_claims=user_claims, query=query, targets=resolved_targets, k=k, strategy='qdrant')",
              "lineno": 22,
              "name": "retriever.rag_search",
              "resolved_module": "app.ports.retriever"
            },
            {
              "category": "internal",
              "display": "retriever.api_response(payload)",
              "lineno": 30,
              "name": "retriever.api_response",
              "resolved_module": "app.ports.retriever"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Run the configured retriever and normalise its response.",
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "retrieve_context",
          "qualname": "retrieve_context",
          "return_annotation": "RetrieveResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "RetrieveResp",
          "source": "app.domain.schemas.RetrieveResp",
          "type": "from"
        },
        {
          "alias": "retriever",
          "source": "app.ports.retriever",
          "type": "from"
        }
      ],
      "module": "app.application.retrieval_service",
      "path": "Src/backend/app/application/retrieval_service.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "set(lhs).intersection(rhs)",
              "lineno": 22,
              "name": "set.intersection",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(lhs)",
              "lineno": 22,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum((lhs[key] * rhs[key] for key in intersection))",
              "lineno": 25,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.sqrt(sum((value * value for value in lhs.values())))",
              "lineno": 26,
              "name": "math.sqrt",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "sum((value * value for value in lhs.values()))",
              "lineno": 26,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lhs.values()",
              "lineno": 26,
              "name": "lhs.values",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.sqrt(sum((value * value for value in rhs.values())))",
              "lineno": 26,
              "name": "math.sqrt",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "sum((value * value for value in rhs.values()))",
              "lineno": 27,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "rhs.values()",
              "lineno": 27,
              "name": "rhs.values",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Compute cosine similarity between two sparse vectors represented as dicts.",
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "cosine_dict",
          "qualname": "cosine_dict",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "timestamp.replace(tzinfo=timezone.utc)",
              "lineno": 35,
              "name": "timestamp.replace",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 32,
          "name": "_ensure_aware",
          "qualname": "_ensure_aware",
          "return_annotation": "datetime | None"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.tenant_id == tenant_id).all()",
              "lineno": 41,
              "name": "db.query.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.tenant_id == tenant_id)",
              "lineno": 41,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer)",
              "lineno": 41,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "get_project_required_skills(db, project.id)",
              "lineno": 42,
              "name": "get_project_required_skills",
              "resolved_module": "app.application.talent_service.get_project_required_skills"
            },
            {
              "category": "service",
              "display": "get_dev_skill_vector(db, developer.id)",
              "lineno": 46,
              "name": "get_dev_skill_vector",
              "resolved_module": "app.application.talent_service.get_dev_skill_vector"
            },
            {
              "category": "internal",
              "display": "cosine_dict(vector, requirements)",
              "lineno": 47,
              "name": "cosine_dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum(requirements.values())",
              "lineno": 49,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "requirements.values()",
              "lineno": 49,
              "name": "requirements.values",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum((min(vector.get(path, 0.0), weight) for path, weight in requirements.items()))",
              "lineno": 50,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "min(vector.get(path, 0.0), weight)",
              "lineno": 50,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "vector.get(path, 0.0)",
              "lineno": 50,
              "name": "vector.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "requirements.items()",
              "lineno": 50,
              "name": "requirements.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(requirements.keys())",
              "lineno": 52,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "requirements.keys()",
              "lineno": 52,
              "name": "requirements.keys",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.max(m.DeveloperSkill.last_seen_at)).join(m.Skill, m.Skill.id == m.DeveloperSkill.skill_id).where(m.DeveloperSkill.developer_id == developer.id).where(m.Skill.path_cache.in_(paths))",
              "lineno": 56,
              "name": "select.join.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.max(m.DeveloperSkill.last_seen_at)).join(m.Skill, m.Skill.id == m.DeveloperSkill.skill_id).where(m.DeveloperSkill.developer_id == developer.id)",
              "lineno": 56,
              "name": "select.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.max(m.DeveloperSkill.last_seen_at)).join(m.Skill, m.Skill.id == m.DeveloperSkill.skill_id)",
              "lineno": 56,
              "name": "select.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.max(m.DeveloperSkill.last_seen_at))",
              "lineno": 56,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.max(m.DeveloperSkill.last_seen_at)",
              "lineno": 56,
              "name": "func.max",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "cache",
              "display": "m.Skill.path_cache.in_(paths)",
              "lineno": 59,
              "name": "m.Skill.path_cache.in_",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.execute(stmt).scalar()",
              "lineno": 61,
              "name": "db.execute.scalar",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(stmt)",
              "lineno": 61,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "recency_boost(_ensure_aware(last_seen if isinstance(last_seen, datetime) else None))",
              "lineno": 62,
              "name": "recency_boost",
              "resolved_module": "app.application.talent_service.recency_boost"
            },
            {
              "category": "internal",
              "display": "_ensure_aware(last_seen if isinstance(last_seen, datetime) else None)",
              "lineno": 62,
              "name": "_ensure_aware",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(last_seen, datetime)",
              "lineno": 62,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_skill_gap(db, developer_id=developer.id, project_id=project.id)",
              "lineno": 67,
              "name": "project_skill_gap",
              "resolved_module": "app.ports.talent_graph.project_skill_gap"
            },
            {
              "category": "internal",
              "display": "enumerate(gaps[:3])",
              "lineno": 68,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "results.append({'developer_id': developer.id, 'fit': round(fit, 4), 'factors': {'project_similarity': round(project_similarity, 3), 'proven_skill': round(proven, 3), 'recency': round(recency, 3), 'availability': round(availability, 3)}, 'availability': {'earliest_start': None, 'percent_free': 0.5}, 'explanations': ['Project similarity is cosine over hierarchical skill paths.', 'Proven skill coverage is overlap against required weights.', 'Recency uses exponential decay with 90-day half-life.', *gap_lines]})",
              "lineno": 70,
              "name": "results.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "round(fit, 4)",
              "lineno": 73,
              "name": "round",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "round(project_similarity, 3)",
              "lineno": 75,
              "name": "round",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "round(proven, 3)",
              "lineno": 76,
              "name": "round",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "round(recency, 3)",
              "lineno": 77,
              "name": "round",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "round(availability, 3)",
              "lineno": 78,
              "name": "round",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "results.sort(key=lambda candidate: candidate['fit'], reverse=True)",
              "lineno": 90,
              "name": "results.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return ranked candidate dictionaries for the requested project.",
          "endpoint": null,
          "is_async": false,
          "lineno": 38,
          "name": "rank_candidates",
          "qualname": "rank_candidates",
          "return_annotation": "List[Dict[str, object]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "func",
          "source": "sqlalchemy.func",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_dev_skill_vector",
          "source": "app.application.talent_service.get_dev_skill_vector",
          "type": "from"
        },
        {
          "alias": "get_project_required_skills",
          "source": "app.application.talent_service.get_project_required_skills",
          "type": "from"
        },
        {
          "alias": "recency_boost",
          "source": "app.application.talent_service.recency_boost",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "project_skill_gap",
          "source": "app.ports.talent_graph.project_skill_gap",
          "type": "from"
        }
      ],
      "module": "app.application.staffing_service",
      "path": "Src/backend/app/application/staffing_service.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 15,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 14,
          "name": "_utc_now",
          "qualname": "_utc_now",
          "return_annotation": "datetime"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_utc_now()",
              "lineno": 23,
              "name": "_utc_now",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.exp(-days / half_life_days)",
              "lineno": 24,
              "name": "math.exp",
              "resolved_module": "math"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a decay score between 0.5 and 1.0 based on recency.",
          "endpoint": null,
          "is_async": false,
          "lineno": 18,
          "name": "recency_boost",
          "qualname": "recency_boost",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill, m.Skill).join(m.Skill, m.DeveloperSkill.skill_id == m.Skill.id).filter(m.DeveloperSkill.developer_id == developer_id).all()",
              "lineno": 31,
              "name": "db.query.join.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill, m.Skill).join(m.Skill, m.DeveloperSkill.skill_id == m.Skill.id).filter(m.DeveloperSkill.developer_id == developer_id)",
              "lineno": 31,
              "name": "db.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill, m.Skill).join(m.Skill, m.DeveloperSkill.skill_id == m.Skill.id)",
              "lineno": 31,
              "name": "db.query.join",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill, m.Skill)",
              "lineno": 31,
              "name": "db.query",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a mapping of skill path to score for a developer.",
          "endpoint": null,
          "is_async": false,
          "lineno": 27,
          "name": "get_dev_skill_vector",
          "qualname": "get_dev_skill_vector",
          "return_annotation": "Dict[str, float]"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill, m.Skill).join(m.Skill, m.ProjectSkill.skill_id == m.Skill.id).filter(m.ProjectSkill.project_id == project_id).all()",
              "lineno": 43,
              "name": "db.query.join.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill, m.Skill).join(m.Skill, m.ProjectSkill.skill_id == m.Skill.id).filter(m.ProjectSkill.project_id == project_id)",
              "lineno": 43,
              "name": "db.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill, m.Skill).join(m.Skill, m.ProjectSkill.skill_id == m.Skill.id)",
              "lineno": 43,
              "name": "db.query.join",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill, m.Skill)",
              "lineno": 43,
              "name": "db.query",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return required skills for a project keyed by skill path.",
          "endpoint": null,
          "is_async": false,
          "lineno": 39,
          "name": "get_project_required_skills",
          "qualname": "get_project_required_skills",
          "return_annotation": "Dict[str, float]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "app.application.talent_service",
      "path": "Src/backend/app/application/talent_service.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Application configuration validated at import time.",
          "lineno": 23,
          "methods": [
            "_blank_database_url",
            "_split_policy_denies"
          ],
          "name": "Settings"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Literal",
          "source": "typing.Literal",
          "type": "from"
        },
        {
          "alias": "load_dotenv",
          "source": "dotenv.load_dotenv",
          "type": "from"
        },
        {
          "alias": "AliasChoices",
          "source": "pydantic.AliasChoices",
          "type": "from"
        },
        {
          "alias": "Field",
          "source": "pydantic.Field",
          "type": "from"
        },
        {
          "alias": "field_validator",
          "source": "pydantic.field_validator",
          "type": "from"
        },
        {
          "alias": "BaseSettings",
          "source": "pydantic_settings.BaseSettings",
          "type": "from"
        },
        {
          "alias": "SettingsConfigDict",
          "source": "pydantic_settings.SettingsConfigDict",
          "type": "from"
        }
      ],
      "module": "app.config",
      "path": "Src/backend/app/config.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "make_url(settings.database_url)",
              "lineno": 23,
              "name": "make_url",
              "resolved_module": "sqlalchemy.engine.url.make_url"
            },
            {
              "category": "database",
              "display": "URL.create(drivername='postgresql+psycopg2', username=settings.postgres_user, password=settings.postgres_password, host=settings.postgres_host, port=settings.postgres_port, database=settings.postgres_db)",
              "lineno": 25,
              "name": "URL.create",
              "resolved_module": "sqlalchemy.engine.URL"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Construct the SQLAlchemy URL used for engine creation.",
          "endpoint": null,
          "is_async": false,
          "lineno": 19,
          "name": "_build_db_url",
          "qualname": "_build_db_url",
          "return_annotation": "URL"
        },
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": "Apply SSL / timeout settings when connecting to managed Postgres.",
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "_build_postgres_connect_args",
          "qualname": "_build_postgres_connect_args",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "url.get_dialect()",
              "lineno": 49,
              "name": "url.get_dialect",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dialect_name.startswith('postgresql')",
              "lineno": 52,
              "name": "dialect_name.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_build_postgres_connect_args()",
              "lineno": 53,
              "name": "_build_postgres_connect_args",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 48,
          "name": "_build_connect_args",
          "qualname": "_build_connect_args",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 75,
              "name": "SessionLocal",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.close()",
              "lineno": 79,
              "name": "db.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "FastAPI dependency that yields a scoped Session per-request.\nProperly annotated as a Generator to satisfy type checkers.",
          "endpoint": null,
          "is_async": false,
          "lineno": 70,
          "name": "get_db",
          "qualname": "get_db",
          "return_annotation": "Generator[Session, None, None]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "request.headers.get('Authorization', '')",
              "lineno": 86,
              "name": "request.headers.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "auth.startswith('Bearer ')",
              "lineno": 87,
              "name": "auth.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=401, detail='Missing bearer token')",
              "lineno": 88,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "auth.split(' ', 1)",
              "lineno": 90,
              "name": "auth.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "bool(getattr(settings, 'jwt_aud', None))",
              "lineno": 96,
              "name": "bool",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(settings, 'jwt_aud', None)",
              "lineno": 96,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(settings, 'jwt_aud', None)",
              "lineno": 104,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "jwt.decode(token, **decode_kwargs)",
              "lineno": 108,
              "name": "jwt.decode",
              "resolved_module": "jwt"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=401, detail=f'Invalid token: {exc}')",
              "lineno": 110,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "getattr(request.state, 'request_id', None)",
              "lineno": 114,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(claims, dict)",
              "lineno": 115,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "claims.setdefault('request_id', request_id)",
              "lineno": 116,
              "name": "claims.setdefault",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Decode JWT and return claims; enforce presence.\nAlso sets request.state.user for middleware (audit, etc.).",
          "endpoint": null,
          "is_async": false,
          "lineno": 81,
          "name": "get_current_user",
          "qualname": "get_current_user",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "set()",
              "lineno": 122,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(item, str)",
              "lineno": 124,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "roles.add(item)",
              "lineno": 125,
              "name": "roles.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "roles.update((str(role) for role in item))",
              "lineno": 127,
              "name": "roles.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(role)",
              "lineno": 127,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ValueError('require_role must receive at least one allowed role')",
              "lineno": 130,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "Depends(get_current_user)",
              "lineno": 132,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "user.get('role')",
              "lineno": 133,
              "name": "user.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail=f'Role {role} not allowed, need one of {sorted(roles)}')",
              "lineno": 135,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "sorted(roles)",
              "lineno": 137,
              "name": "sorted",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Dependency factory allowing multiple roles (supports tuples/lists).",
          "endpoint": null,
          "is_async": false,
          "lineno": 119,
          "name": "require_role",
          "qualname": "require_role",
          "return_annotation": "Callable[[Dict[str, Any]], Dict[str, Any]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Generator",
          "source": "typing.Generator",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "fastapi.Request",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "URL",
          "source": "sqlalchemy.engine.URL",
          "type": "from"
        },
        {
          "alias": "make_url",
          "source": "sqlalchemy.engine.url.make_url",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "PyJWTError",
          "source": "jwt.PyJWTError",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.deps",
      "path": "Src/backend/app/deps.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Base class for domain errors with structured metadata.",
          "lineno": 11,
          "methods": [
            "__init__"
          ],
          "name": "AppError"
        },
        {
          "docstring": "Raised when a requested resource is missing.",
          "lineno": 28,
          "methods": [],
          "name": "NotFoundError"
        },
        {
          "docstring": "Raised when a user lacks privileges for an operation.",
          "lineno": 36,
          "methods": [],
          "name": "PermissionDeniedError"
        },
        {
          "docstring": "Raised when input payloads fail validation.",
          "lineno": 44,
          "methods": [],
          "name": "ValidationError"
        },
        {
          "docstring": "Raised when an upstream dependency fails.",
          "lineno": 52,
          "methods": [],
          "name": "ExternalServiceError"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "trace_exception('app_error', exc, code=exc.code, status=exc.status_code)",
              "lineno": 65,
              "name": "trace_exception",
              "resolved_module": "app.instrumentation.trace.trace_exception"
            },
            {
              "category": "internal",
              "display": "JSONResponse(status_code=exc.status_code, content={'error': {'code': exc.code, 'message': exc.message}})",
              "lineno": 66,
              "name": "JSONResponse",
              "resolved_module": "fastapi.responses.JSONResponse"
            },
            {
              "category": "internal",
              "display": "app.exception_handler(AppError)",
              "lineno": 63,
              "name": "app.exception_handler",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "trace_exception('http_exception', exc, status=exc.status_code, detail=exc.detail)",
              "lineno": 70,
              "name": "trace_exception",
              "resolved_module": "app.instrumentation.trace.trace_exception"
            },
            {
              "category": "internal",
              "display": "JSONResponse(status_code=exc.status_code, content=payload)",
              "lineno": 75,
              "name": "JSONResponse",
              "resolved_module": "fastapi.responses.JSONResponse"
            },
            {
              "category": "internal",
              "display": "app.exception_handler(HTTPException)",
              "lineno": 68,
              "name": "app.exception_handler",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Register exception handlers for :class:`AppError` and :class:`HTTPException`.",
          "endpoint": null,
          "is_async": false,
          "lineno": 60,
          "name": "add_exception_handlers",
          "qualname": "add_exception_handlers",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "FastAPI",
          "source": "fastapi.FastAPI",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "fastapi.Request",
          "type": "from"
        },
        {
          "alias": "JSONResponse",
          "source": "fastapi.responses.JSONResponse",
          "type": "from"
        },
        {
          "alias": "trace_exception",
          "source": "app.instrumentation.trace.trace_exception",
          "type": "from"
        }
      ],
      "module": "app.domain.errors",
      "path": "Src/backend/app/domain/errors.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Declarative base for all ORM models.",
          "lineno": 31,
          "methods": [],
          "name": "Base"
        },
        {
          "docstring": "Tenant metadata for multi-tenant isolation.",
          "lineno": 35,
          "methods": [],
          "name": "Tenant"
        },
        {
          "docstring": "Platform user with authentication credentials.",
          "lineno": 44,
          "methods": [],
          "name": "User"
        },
        {
          "docstring": "Project requiring staffing and onboarding.",
          "lineno": 56,
          "methods": [],
          "name": "Project"
        },
        {
          "docstring": "Developer profile linked to a platform user.",
          "lineno": 68,
          "methods": [],
          "name": "Developer"
        },
        {
          "docstring": "Join table tracking developers assigned to projects.",
          "lineno": 79,
          "methods": [],
          "name": "Assignment"
        },
        {
          "docstring": "Hierarchical skill taxonomy nodes.",
          "lineno": 95,
          "methods": [],
          "name": "Skill"
        },
        {
          "docstring": "Target skills required for a project.",
          "lineno": 110,
          "methods": [],
          "name": "ProjectSkill"
        },
        {
          "docstring": "Skills extracted for developers along with scores and confidence.",
          "lineno": 124,
          "methods": [],
          "name": "DeveloperSkill"
        },
        {
          "docstring": "External identity bindings for developers (e.g., GitHub).",
          "lineno": 149,
          "methods": [],
          "name": "DeveloperIdentity"
        },
        {
          "docstring": "Repository-to-tenant/project mapping for contextual attribution.",
          "lineno": 185,
          "methods": [],
          "name": "RepositoryMapping"
        },
        {
          "docstring": "Idempotency ledger for processed integration events.",
          "lineno": 216,
          "methods": [],
          "name": "IntegrationEventLog"
        },
        {
          "docstring": "Tracks correlation between GitHub PRs and Jira issues prior to skill attribution.",
          "lineno": 241,
          "methods": [],
          "name": "AttributionWorkflow"
        },
        {
          "docstring": "Tracks peer review contributions to avoid double-counting bonuses.",
          "lineno": 288,
          "methods": [],
          "name": "PeerReviewCredit"
        },
        {
          "docstring": "Records unmatched identity or context events for manual review.",
          "lineno": 318,
          "methods": [],
          "name": "AttributionTriage"
        },
        {
          "docstring": "Audit trail of authenticated requests.",
          "lineno": 338,
          "methods": [],
          "name": "AuditLog"
        },
        {
          "docstring": "Domain events emitted by integrations.",
          "lineno": 354,
          "methods": [],
          "name": "Event"
        },
        {
          "docstring": "Record of planner tool invocations.",
          "lineno": 368,
          "methods": [],
          "name": "ToolExecution"
        },
        {
          "docstring": "Bandit statistics for the hybrid router.",
          "lineno": 382,
          "methods": [],
          "name": "RouterStats"
        },
        {
          "docstring": "Stored weights for contrastive A\u2192B mapper per tenant.",
          "lineno": 397,
          "methods": [],
          "name": "TenantMapperWeights"
        },
        {
          "docstring": "Contrastive mapping edges between projects for ramp planning.",
          "lineno": 408,
          "methods": [],
          "name": "ABMapEdge"
        },
        {
          "docstring": "Historical evaluation runs capturing metric snapshots.",
          "lineno": 427,
          "methods": [],
          "name": "EvalRun"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 28,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a timezone-aware UTC timestamp.",
          "endpoint": null,
          "is_async": false,
          "lineno": 25,
          "name": "_utc_now",
          "qualname": "_utc_now",
          "return_annotation": "datetime"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "date",
          "source": "datetime.date",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Boolean",
          "source": "sqlalchemy.Boolean",
          "type": "from"
        },
        {
          "alias": "Date",
          "source": "sqlalchemy.Date",
          "type": "from"
        },
        {
          "alias": "DateTime",
          "source": "sqlalchemy.DateTime",
          "type": "from"
        },
        {
          "alias": "Float",
          "source": "sqlalchemy.Float",
          "type": "from"
        },
        {
          "alias": "ForeignKey",
          "source": "sqlalchemy.ForeignKey",
          "type": "from"
        },
        {
          "alias": "Index",
          "source": "sqlalchemy.Index",
          "type": "from"
        },
        {
          "alias": "Integer",
          "source": "sqlalchemy.Integer",
          "type": "from"
        },
        {
          "alias": "JSON",
          "source": "sqlalchemy.JSON",
          "type": "from"
        },
        {
          "alias": "String",
          "source": "sqlalchemy.String",
          "type": "from"
        },
        {
          "alias": "Text",
          "source": "sqlalchemy.Text",
          "type": "from"
        },
        {
          "alias": "UniqueConstraint",
          "source": "sqlalchemy.UniqueConstraint",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "DeclarativeBase",
          "source": "sqlalchemy.orm.DeclarativeBase",
          "type": "from"
        },
        {
          "alias": "Mapped",
          "source": "sqlalchemy.orm.Mapped",
          "type": "from"
        },
        {
          "alias": "mapped_column",
          "source": "sqlalchemy.orm.mapped_column",
          "type": "from"
        },
        {
          "alias": "relationship",
          "source": "sqlalchemy.orm.relationship",
          "type": "from"
        }
      ],
      "module": "app.domain.models",
      "path": "Src/backend/app/domain/models.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "OAuth-style token response returned during authentication.",
          "lineno": 14,
          "methods": [],
          "name": "TokenResp"
        },
        {
          "docstring": "Request payload for retrieval endpoints.",
          "lineno": 22,
          "methods": [],
          "name": "RetrieveReq"
        },
        {
          "docstring": "Individual retrieval hit containing text and metadata.",
          "lineno": 34,
          "methods": [],
          "name": "RetrieveHit"
        },
        {
          "docstring": "Response wrapper for retrieval results.",
          "lineno": 43,
          "methods": [],
          "name": "RetrieveResp"
        },
        {
          "docstring": "Project representation used for create and read operations.",
          "lineno": 52,
          "methods": [],
          "name": "ProjectResp"
        },
        {
          "docstring": "Lightweight projection of a platform user.",
          "lineno": 61,
          "methods": [],
          "name": "UserResp"
        },
        {
          "docstring": "Collection wrapper for user listings.",
          "lineno": 70,
          "methods": [],
          "name": "UserListResp"
        },
        {
          "docstring": "Request body for updating a user's role.",
          "lineno": 76,
          "methods": [],
          "name": "UserRolePatchReq"
        },
        {
          "docstring": "Request body for assignment creation.",
          "lineno": 82,
          "methods": [],
          "name": "AssignmentCreateReq"
        },
        {
          "docstring": "Request body for updating an existing assignment.",
          "lineno": 91,
          "methods": [],
          "name": "AssignmentUpdateReq"
        },
        {
          "docstring": "Assignment projection returned from admin endpoints.",
          "lineno": 99,
          "methods": [],
          "name": "AssignmentResp"
        },
        {
          "docstring": "Wrapper for assignment listings.",
          "lineno": 109,
          "methods": [],
          "name": "AssignmentListResp"
        },
        {
          "docstring": "Response payload for document ingestion.",
          "lineno": 115,
          "methods": [],
          "name": "UploadResp"
        },
        {
          "docstring": "Single audit log entry.",
          "lineno": 125,
          "methods": [],
          "name": "AuditEntry"
        },
        {
          "docstring": "Audit log response wrapper.",
          "lineno": 135,
          "methods": [],
          "name": "AuditResp"
        },
        {
          "docstring": "Single skill row for a developer.",
          "lineno": 141,
          "methods": [],
          "name": "SkillEntry"
        },
        {
          "docstring": "Developer skill profile response.",
          "lineno": 149,
          "methods": [],
          "name": "SkillProfileResp"
        },
        {
          "docstring": "Staffing candidate with fit breakdown information.",
          "lineno": 156,
          "methods": [],
          "name": "StaffCandidate"
        },
        {
          "docstring": "Response payload for staffing results.",
          "lineno": 166,
          "methods": [],
          "name": "StaffResp"
        },
        {
          "docstring": "Request body for onboarding plan generation.",
          "lineno": 173,
          "methods": [],
          "name": "OnboardingReq"
        },
        {
          "docstring": "Reference to generated planner artifacts.",
          "lineno": 181,
          "methods": [],
          "name": "Artifact"
        },
        {
          "docstring": "Structured onboarding plan output.",
          "lineno": 189,
          "methods": [],
          "name": "OnboardingPlan"
        },
        {
          "docstring": "Response wrapper for onboarding plan generation.",
          "lineno": 199,
          "methods": [],
          "name": "OnboardingResp"
        },
        {
          "docstring": "Request payload for the agent planning endpoint.",
          "lineno": 207,
          "methods": [],
          "name": "AgentQueryReq"
        },
        {
          "docstring": "Response payload for the agent planning endpoint.",
          "lineno": 219,
          "methods": [],
          "name": "AgentQueryResp"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "date",
          "source": "datetime.date",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Literal",
          "source": "typing.Literal",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "BaseModel",
          "source": "pydantic.BaseModel",
          "type": "from"
        },
        {
          "alias": "Field",
          "source": "pydantic.Field",
          "type": "from"
        }
      ],
      "module": "app.domain.schemas",
      "path": "Src/backend/app/domain/schemas.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "app.eval.__init__",
      "path": "Src/backend/app/eval/__init__.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 21,
          "methods": [
            "to_dict"
          ],
          "name": "MetricSnapshot"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "path.exists()",
              "lineno": 41,
              "name": "path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "FileNotFoundError(f'Eval dataset not found: {path}')",
              "lineno": 42,
              "name": "FileNotFoundError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "path.open('r', encoding='utf-8')",
              "lineno": 44,
              "name": "path.open",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.strip()",
              "lineno": 46,
              "name": "line.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entries.append(json.loads(line))",
              "lineno": 49,
              "name": "entries.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json.loads(line)",
              "lineno": 49,
              "name": "json.loads",
              "resolved_module": "json"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 40,
          "name": "_load_jsonl",
          "qualname": "_load_jsonl",
          "return_annotation": "List[Dict[str, Any]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "hit.text.lower()",
              "lineno": 54,
              "name": "hit.text.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "term.lower()",
              "lineno": 61,
              "name": "term.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(len(gold_terms), 1)",
              "lineno": 63,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(gold_terms)",
              "lineno": 63,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 53,
          "name": "_similarity",
          "qualname": "_similarity",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "(hit.source or '').strip()",
              "lineno": 67,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "bool(source)",
              "lineno": 68,
              "name": "bool",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 66,
          "name": "_determine_leak",
          "qualname": "_determine_leak",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "enumerate(hits, start=1)",
              "lineno": 72,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "term.lower()",
              "lineno": 74,
              "name": "term.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hit.text.lower()",
              "lineno": 74,
              "name": "hit.text.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(index)",
              "lineno": 75,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(len(hits) + 1)",
              "lineno": 76,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(hits)",
              "lineno": 76,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 71,
          "name": "_time_to_first_correct",
          "qualname": "_time_to_first_correct",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "entry.get('tenant', settings.tenant_id)",
              "lineno": 91,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('targets')",
              "lineno": 93,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entry.get('gold', [])",
              "lineno": 94,
              "name": "entry.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "retriever.rag_search(tenant_id=tenant, user_claims=user_claims, query=query, targets=list(targets), k=k, strategy='qdrant')",
              "lineno": 101,
              "name": "retriever.rag_search",
              "resolved_module": "app.ports.retriever"
            },
            {
              "category": "internal",
              "display": "list(targets)",
              "lineno": 105,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_similarity(hit, gold_terms=gold)",
              "lineno": 110,
              "name": "_similarity",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "similarities.append(mean(rel_scores) if rel_scores else 0.0)",
              "lineno": 111,
              "name": "similarities.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mean(rel_scores)",
              "lineno": 111,
              "name": "mean",
              "resolved_module": "statistics.mean"
            },
            {
              "category": "internal",
              "display": "leaks.append(1.0 if any((_determine_leak(hit, allowed=targets) for hit in hits)) else 0.0)",
              "lineno": 112,
              "name": "leaks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "any((_determine_leak(hit, allowed=targets) for hit in hits))",
              "lineno": 114,
              "name": "any",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_determine_leak(hit, allowed=targets)",
              "lineno": 114,
              "name": "_determine_leak",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ttfc_scores.append(_time_to_first_correct(hits, gold))",
              "lineno": 117,
              "name": "ttfc_scores.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_time_to_first_correct(hits, gold)",
              "lineno": 117,
              "name": "_time_to_first_correct",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mean(similarities)",
              "lineno": 119,
              "name": "mean",
              "resolved_module": "statistics.mean"
            },
            {
              "category": "internal",
              "display": "mean(leaks)",
              "lineno": 120,
              "name": "mean",
              "resolved_module": "statistics.mean"
            },
            {
              "category": "internal",
              "display": "mean(ttfc_scores)",
              "lineno": 121,
              "name": "mean",
              "resolved_module": "statistics.mean"
            },
            {
              "category": "internal",
              "display": "float(k + 1)",
              "lineno": 121,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "MetricSnapshot(dataset=dataset_name, k=k, dreln=dreln, safety_leak=safety_leak, ttfc=ttfc, total_tasks=total)",
              "lineno": 122,
              "name": "MetricSnapshot",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 79,
          "name": "_evaluate_dataset",
          "qualname": "_evaluate_dataset",
          "return_annotation": "MetricSnapshot"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "out_path.write_text('\\n'.join(lines), encoding='utf-8')",
              "lineno": 139,
              "name": "out_path.write_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(lines)",
              "lineno": 139,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 125,
          "name": "_render_markdown",
          "qualname": "_render_markdown",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Path(args.out or './artifacts/eval')",
              "lineno": 145,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "out_dir.mkdir(parents=True, exist_ok=True)",
              "lineno": 146,
              "name": "out_dir.mkdir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "Path(settings.eval_data_dir)",
              "lineno": 148,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "_load_jsonl(tasks_path)",
              "lineno": 149,
              "name": "_load_jsonl",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_evaluate_dataset(dataset, tasks, k)",
              "lineno": 150,
              "name": "_evaluate_dataset",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json_path.write_text(json.dumps(snapshot.to_dict(), indent=2), encoding='utf-8')",
              "lineno": 153,
              "name": "json_path.write_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json.dumps(snapshot.to_dict(), indent=2)",
              "lineno": 153,
              "name": "json.dumps",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "snapshot.to_dict()",
              "lineno": 153,
              "name": "snapshot.to_dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_render_markdown(md_path, snapshot)",
              "lineno": 156,
              "name": "_render_markdown",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('Eval harness completed', dataset=dataset, k=k, json=str(json_path), markdown=str(md_path))",
              "lineno": 158,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(json_path)",
              "lineno": 162,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(md_path)",
              "lineno": 163,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 142,
          "name": "run_cli",
          "qualname": "run_cli",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='North Star evaluation harness')",
              "lineno": 168,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_subparsers(dest='command', required=True)",
              "lineno": 169,
              "name": "parser.add_subparsers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "subparsers.add_parser('run', help='Execute the evaluation harness')",
              "lineno": 171,
              "name": "subparsers.add_parser",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "run_parser.add_argument('--dataset', default='quick', help='Dataset identifier to process')",
              "lineno": 172,
              "name": "run_parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "run_parser.add_argument('--k', type=int, default=DEFAULT_K, help='Top-k results to evaluate')",
              "lineno": 173,
              "name": "run_parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "run_parser.add_argument('--out', help='Output directory for artifacts')",
              "lineno": 174,
              "name": "run_parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "run_parser.set_defaults(func=run_cli)",
              "lineno": 175,
              "name": "run_parser.set_defaults",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 167,
          "name": "build_parser",
          "qualname": "build_parser",
          "return_annotation": "argparse.ArgumentParser"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "build_parser()",
              "lineno": 180,
              "name": "build_parser",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(argv)",
              "lineno": 181,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "args.func(args)",
              "lineno": 182,
              "name": "args.func",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 179,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "mean",
          "source": "statistics.mean",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "RetrieveHit",
          "source": "app.domain.schemas.RetrieveHit",
          "type": "from"
        },
        {
          "alias": "retriever",
          "source": "app.ports.retriever",
          "type": "from"
        }
      ],
      "module": "app.eval.harness",
      "path": "Src/backend/app/eval/harness.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "app.instrumentation.__init__",
      "path": "Src/backend/app/instrumentation/__init__.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "logger.bind(metric=metric, **labels).info('metric.increment')",
              "lineno": 7,
              "name": "logger.bind.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(metric=metric, **labels)",
              "lineno": 7,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "increment",
          "qualname": "increment",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "logger.bind(metric=metric, value=value, **labels).info('metric.observe')",
              "lineno": 11,
              "name": "logger.bind.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(metric=metric, value=value, **labels)",
              "lineno": 11,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 10,
          "name": "observe",
          "qualname": "observe",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        }
      ],
      "module": "app.instrumentation.metrics",
      "path": "Src/backend/app/instrumentation/metrics.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Attach request identifiers and structured logging to each request.",
          "lineno": 15,
          "methods": [
            "dispatch"
          ],
          "name": "TraceRequestMiddleware"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "perf_counter",
          "source": "time.perf_counter",
          "type": "from"
        },
        {
          "alias": "Awaitable",
          "source": "typing.Awaitable",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "uuid4",
          "source": "uuid.uuid4",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "BaseHTTPMiddleware",
          "source": "starlette.middleware.base.BaseHTTPMiddleware",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "starlette.requests.Request",
          "type": "from"
        },
        {
          "alias": "Response",
          "source": "starlette.responses.Response",
          "type": "from"
        },
        {
          "alias": "push_request_id",
          "source": "app.instrumentation.trace.push_request_id",
          "type": "from"
        },
        {
          "alias": "reset_request_id",
          "source": "app.instrumentation.trace.reset_request_id",
          "type": "from"
        }
      ],
      "module": "app.instrumentation.middleware",
      "path": "Src/backend/app/instrumentation/middleware.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).isoformat(timespec='milliseconds')",
              "lineno": 19,
              "name": "datetime.now.isoformat",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 19,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 18,
          "name": "_now_iso",
          "qualname": "_now_iso",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "random.random()",
              "lineno": 23,
              "name": "random.random",
              "resolved_module": "random"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "_rand",
          "qualname": "_rand",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_request_id_ctx.set(request_id)",
              "lineno": 27,
              "name": "_request_id_ctx.set",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 26,
          "name": "push_request_id",
          "qualname": "push_request_id",
          "return_annotation": "Token[str | None]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_request_id_ctx.reset(token)",
              "lineno": 31,
              "name": "_request_id_ctx.reset",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "reset_request_id",
          "qualname": "reset_request_id",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_request_id_ctx.get()",
              "lineno": 35,
              "name": "_request_id_ctx.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 34,
          "name": "get_request_id",
          "qualname": "get_request_id",
          "return_annotation": "str | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, (str, int, float, bool))",
              "lineno": 39,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, dict)",
              "lineno": 41,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(key)",
              "lineno": 42,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_coerce(val)",
              "lineno": 42,
              "name": "_coerce",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.items()",
              "lineno": 42,
              "name": "value.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, (list, tuple, set))",
              "lineno": 43,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_coerce(item)",
              "lineno": 44,
              "name": "_coerce",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 45,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 38,
          "name": "_coerce",
          "qualname": "_coerce",
          "return_annotation": "Any"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "max(0.0, min(float(settings.trace_sampling or 0.0), 1.0))",
              "lineno": 51,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "min(float(settings.trace_sampling or 0.0), 1.0)",
              "lineno": 51,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(settings.trace_sampling or 0.0)",
              "lineno": 51,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_rand()",
              "lineno": 55,
              "name": "_rand",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.setdefault('ts', _now_iso())",
              "lineno": 57,
              "name": "payload.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_now_iso()",
              "lineno": 57,
              "name": "_now_iso",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.setdefault('evt', 'trace')",
              "lineno": 58,
              "name": "payload.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.setdefault('request_id', get_request_id() or '')",
              "lineno": 59,
              "name": "payload.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "get_request_id()",
              "lineno": 59,
              "name": "get_request_id",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info(json.dumps(payload, default=_coerce, ensure_ascii=False, separators=(',', ':')))",
              "lineno": 61,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "json.dumps(payload, default=_coerce, ensure_ascii=False, separators=(',', ':'))",
              "lineno": 62,
              "name": "json.dumps",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "_coerce(val)",
              "lineno": 65,
              "name": "_coerce",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.items()",
              "lineno": 65,
              "name": "payload.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info(json.dumps(safe_payload, ensure_ascii=False, separators=(',', ':')))",
              "lineno": 66,
              "name": "logger.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "json.dumps(safe_payload, ensure_ascii=False, separators=(',', ':'))",
              "lineno": 66,
              "name": "json.dumps",
              "resolved_module": "json"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 48,
          "name": "_emit",
          "qualname": "_emit",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "payload.update({key: _coerce(value) for key, value in fields.items()})",
              "lineno": 71,
              "name": "payload.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_coerce(value)",
              "lineno": 71,
              "name": "_coerce",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fields.items()",
              "lineno": 71,
              "name": "fields.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_emit(payload)",
              "lineno": 72,
              "name": "_emit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 69,
          "name": "tracepoint",
          "qualname": "tracepoint",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 80,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(exc, 'status_code', None)",
              "lineno": 83,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "traceback.format_exception_only(exc.__class__, exc)",
              "lineno": 86,
              "name": "traceback.format_exception_only",
              "resolved_module": "traceback"
            },
            {
              "category": "internal",
              "display": "line.strip()",
              "lineno": 87,
              "name": "line.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.strip()",
              "lineno": 87,
              "name": "line.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "data.update({key: _coerce(value) for key, value in fields.items()})",
              "lineno": 88,
              "name": "data.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_coerce(value)",
              "lineno": 88,
              "name": "_coerce",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fields.items()",
              "lineno": 88,
              "name": "fields.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_emit(data, force=True)",
              "lineno": 89,
              "name": "_emit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 75,
          "name": "trace_exception",
          "qualname": "trace_exception",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "push_request_id(request_id)",
              "lineno": 94,
              "name": "push_request_id",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "reset_request_id(token)",
              "lineno": 98,
              "name": "reset_request_id",
              "resolved_module": null
            }
          ],
          "decorators": [
            "contextmanager"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 93,
          "name": "request_id_context",
          "qualname": "request_id_context",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "random",
          "source": "random",
          "type": "import"
        },
        {
          "alias": "traceback",
          "source": "traceback",
          "type": "import"
        },
        {
          "alias": "contextmanager",
          "source": "contextlib.contextmanager",
          "type": "from"
        },
        {
          "alias": "ContextVar",
          "source": "contextvars.ContextVar",
          "type": "from"
        },
        {
          "alias": "Token",
          "source": "contextvars.Token",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.instrumentation.trace",
      "path": "Src/backend/app/instrumentation/trace.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Utility to trace request lifecycle with consistent fields.",
          "lineno": 43,
          "methods": [
            "__init__",
            "request_start",
            "request_end"
          ],
          "name": "RequestLogger"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "record.setdefault('extra', {})",
              "lineno": 17,
              "name": "record.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "extra.setdefault('req', '')",
              "lineno": 18,
              "name": "extra.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "extra.setdefault('route', '')",
              "lineno": 19,
              "name": "extra.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "extra.setdefault('tenant', '')",
              "lineno": 20,
              "name": "extra.setdefault",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Guarantee required ``extra`` keys exist for the log formatter.",
          "endpoint": null,
          "is_async": false,
          "lineno": 14,
          "name": "_inject_defaults",
          "qualname": "_inject_defaults",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "logger.remove()",
              "lineno": 26,
              "name": "logger.remove",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.configure(extra={'req': '', 'route': '', 'tenant': ''}, patcher=_inject_defaults)",
              "lineno": 27,
              "name": "logger.configure",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "(settings.log_level or 'INFO').upper()",
              "lineno": 32,
              "name": "upper",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.add(sys.stdout, format=fmt, level=level, enqueue=True, backtrace=False, diagnose=False)",
              "lineno": 33,
              "name": "logger.add",
              "resolved_module": "loguru.logger"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Configure Loguru with structured JSON-friendly output.",
          "endpoint": null,
          "is_async": false,
          "lineno": 23,
          "name": "setup_logging",
          "qualname": "setup_logging",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "sys",
          "source": "sys",
          "type": "import"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.logging_setup",
      "path": "Src/backend/app/logging_setup.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "setup_logging()",
              "lineno": 26,
              "name": "setup_logging",
              "resolved_module": "app.logging_setup.setup_logging"
            },
            {
              "category": "internal",
              "display": "Base.metadata.create_all(bind=deps.engine)",
              "lineno": 27,
              "name": "Base.metadata.create_all",
              "resolved_module": "app.domain.models.Base"
            },
            {
              "category": "internal",
              "display": "ensure_skill_attribution_schema(deps.engine)",
              "lineno": 28,
              "name": "ensure_skill_attribution_schema",
              "resolved_module": "app.utils.migrations.skill_attribution.ensure_skill_attribution_schema"
            },
            {
              "category": "internal",
              "display": "ensure_seed_data()",
              "lineno": 29,
              "name": "ensure_seed_data",
              "resolved_module": "app.utils.seed_data.ensure_seed_data"
            },
            {
              "category": "integration",
              "display": "ensure_all_payload_indexes()",
              "lineno": 32,
              "name": "ensure_all_payload_indexes",
              "resolved_module": "app.adapters.qdrant_client.ensure_all_payload_indexes"
            },
            {
              "category": "internal",
              "display": "logger.warning('Qdrant payload index bootstrap skipped: {}', exc)",
              "lineno": 34,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "tracepoint('embed_dim.enforced', expected=settings.embed_dim)",
              "lineno": 35,
              "name": "tracepoint",
              "resolved_module": "app.instrumentation.trace.tracepoint"
            },
            {
              "category": "internal",
              "display": "FastAPI(title='North Star API', version='1.2.0')",
              "lineno": 37,
              "name": "FastAPI",
              "resolved_module": "fastapi.FastAPI"
            },
            {
              "category": "internal",
              "display": "add_exception_handlers(app)",
              "lineno": 38,
              "name": "add_exception_handlers",
              "resolved_module": "app.domain.errors.add_exception_handlers"
            },
            {
              "category": "internal",
              "display": "app.add_middleware(AuthMiddleware)",
              "lineno": 39,
              "name": "app.add_middleware",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.add_middleware(AuditMiddleware)",
              "lineno": 40,
              "name": "app.add_middleware",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.add_middleware(TraceRequestMiddleware)",
              "lineno": 41,
              "name": "app.add_middleware",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(auth_routes.router)",
              "lineno": 59,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(admin_user_routes.router)",
              "lineno": 60,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(project_read_routes.router)",
              "lineno": 61,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(project_routes.router)",
              "lineno": 62,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(assignment_routes.router)",
              "lineno": 63,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(upload_routes.router)",
              "lineno": 64,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(retrieve_routes.router)",
              "lineno": 65,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(staff_routes.router)",
              "lineno": 66,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(onboarding_routes.router)",
              "lineno": 67,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(github_routes.router)",
              "lineno": 68,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(jira_routes.router)",
              "lineno": 69,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(skills_routes.router)",
              "lineno": 70,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(audit_routes.router)",
              "lineno": 71,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "app.include_router(agent_routes.router)",
              "lineno": 72,
              "name": "app.include_router",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hasattr(agent_tools, 'register_all_tools')",
              "lineno": 74,
              "name": "hasattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "agent_tools.register_all_tools()",
              "lineno": 75,
              "name": "agent_tools.register_all_tools",
              "resolved_module": "app.agentic.tools"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Initialise and configure the FastAPI application.",
          "endpoint": null,
          "is_async": false,
          "lineno": 23,
          "name": "create_app",
          "qualname": "create_app",
          "return_annotation": "FastAPI"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "FastAPI",
          "source": "fastapi.FastAPI",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "ensure_all_payload_indexes",
          "source": "app.adapters.qdrant_client.ensure_all_payload_indexes",
          "type": "from"
        },
        {
          "alias": "agent_tools",
          "source": "app.agentic.tools",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "add_exception_handlers",
          "source": "app.domain.errors.add_exception_handlers",
          "type": "from"
        },
        {
          "alias": "Base",
          "source": "app.domain.models.Base",
          "type": "from"
        },
        {
          "alias": "TraceRequestMiddleware",
          "source": "app.instrumentation.middleware.TraceRequestMiddleware",
          "type": "from"
        },
        {
          "alias": "tracepoint",
          "source": "app.instrumentation.trace.tracepoint",
          "type": "from"
        },
        {
          "alias": "setup_logging",
          "source": "app.logging_setup.setup_logging",
          "type": "from"
        },
        {
          "alias": "AuditMiddleware",
          "source": "app.middleware.audit_mw.AuditMiddleware",
          "type": "from"
        },
        {
          "alias": "AuthMiddleware",
          "source": "app.middleware.auth_mw.AuthMiddleware",
          "type": "from"
        },
        {
          "alias": "ensure_skill_attribution_schema",
          "source": "app.utils.migrations.skill_attribution.ensure_skill_attribution_schema",
          "type": "from"
        },
        {
          "alias": "ensure_seed_data",
          "source": "app.utils.seed_data.ensure_seed_data",
          "type": "from"
        }
      ],
      "module": "app.main",
      "path": "Src/backend/app/main.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Persist minimal request metadata for auditing purposes.",
          "lineno": 21,
          "methods": [
            "dispatch"
          ],
          "name": "AuditMiddleware"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Awaitable",
          "source": "typing.Awaitable",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "loguru_logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "SQLAlchemyError",
          "source": "sqlalchemy.exc.SQLAlchemyError",
          "type": "from"
        },
        {
          "alias": "BaseHTTPMiddleware",
          "source": "starlette.middleware.base.BaseHTTPMiddleware",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "starlette.requests.Request",
          "type": "from"
        },
        {
          "alias": "Response",
          "source": "starlette.responses.Response",
          "type": "from"
        },
        {
          "alias": "SessionLocal",
          "source": "app.deps.SessionLocal",
          "type": "from"
        },
        {
          "alias": "AuditLog",
          "source": "app.domain.models.AuditLog",
          "type": "from"
        },
        {
          "alias": "RequestLogger",
          "source": "app.logging_setup.RequestLogger",
          "type": "from"
        },
        {
          "alias": "hash_args",
          "source": "app.utils.hashing.hash_args",
          "type": "from"
        }
      ],
      "module": "app.middleware.audit_mw",
      "path": "Src/backend/app/middleware/audit_mw.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Decode bearer tokens opportunistically for downstream dependencies.",
          "lineno": 16,
          "methods": [
            "dispatch"
          ],
          "name": "AuthMiddleware"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Awaitable",
          "source": "typing.Awaitable",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "PyJWTError",
          "source": "jwt.PyJWTError",
          "type": "from"
        },
        {
          "alias": "BaseHTTPMiddleware",
          "source": "starlette.middleware.base.BaseHTTPMiddleware",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "starlette.requests.Request",
          "type": "from"
        },
        {
          "alias": "Response",
          "source": "starlette.responses.Response",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.middleware.auth_mw",
      "path": "Src/backend/app/middleware/auth_mw.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "set()",
              "lineno": 12,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(item or '').strip()",
              "lineno": 15,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seen.add(key)",
              "lineno": 19,
              "name": "seen.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "normalised.append(key)",
              "lineno": 20,
              "name": "normalised.append",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "_normalise_projects",
          "qualname": "_normalise_projects",
          "return_annotation": "List[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(user_claims.get('tenant_id') or settings.tenant_id)",
              "lineno": 25,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 25,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalise_projects(user_claims.get('accessible_projects', []))",
              "lineno": 26,
              "name": "_normalise_projects",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('accessible_projects', [])",
              "lineno": 26,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "accessible.append('global')",
              "lineno": 28,
              "name": "accessible.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalise_projects(req.targets or accessible)",
              "lineno": 30,
              "name": "_normalise_projects",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(settings.policy_deny_projects)",
              "lineno": 38,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(map(str, user_claims.get('deny_projects', [])))",
              "lineno": 39,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "map(str, user_claims.get('deny_projects', []))",
              "lineno": 39,
              "name": "map",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('deny_projects', [])",
              "lineno": 39,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalise_projects(deny_from_policy | deny_from_claims)",
              "lineno": 40,
              "name": "_normalise_projects",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "PlanNode('AllowTenant', {'tenant_id': tenant_id})",
              "lineno": 52,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('AllowProjects', {'projects': allowed})",
              "lineno": 53,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "steps.append(PlanNode('DenyProjects', {'projects': deny_projects}))",
              "lineno": 57,
              "name": "steps.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "PlanNode('DenyProjects', {'projects': deny_projects})",
              "lineno": 57,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "project_filters.setdefault('not_in', deny_projects)",
              "lineno": 58,
              "name": "project_filters.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "steps.extend([PlanNode('FilterByMeta', {'filters': filter_meta}), PlanNode('DenseQuery', {'model': settings.bge_model}), PlanNode('SparseQuery', {'encoder': 'sparse_hash'}), PlanNode('HybridMerge', {'lambda': settings.hybrid_lambda, 'strategy': req.strategy}), PlanNode('DedupByChunk', {}), PlanNode('LimitK', {'k': req.k})])",
              "lineno": 62,
              "name": "steps.extend",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "PlanNode('FilterByMeta', {'filters': filter_meta})",
              "lineno": 64,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('DenseQuery', {'model': settings.bge_model})",
              "lineno": 65,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('SparseQuery', {'encoder': 'sparse_hash'})",
              "lineno": 66,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('HybridMerge', {'lambda': settings.hybrid_lambda, 'strategy': req.strategy})",
              "lineno": 67,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('DedupByChunk', {})",
              "lineno": 74,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "PlanNode('LimitK', {'k': req.k})",
              "lineno": 75,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "internal",
              "display": "steps.append(PlanNode('Explain', {'enabled': True}))",
              "lineno": 80,
              "name": "steps.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "PlanNode('Explain', {'enabled': True})",
              "lineno": 80,
              "name": "PlanNode",
              "resolved_module": "plan.PlanNode"
            },
            {
              "category": "policy",
              "display": "PolicyPlan.from_steps(steps)",
              "lineno": 82,
              "name": "PolicyPlan.from_steps",
              "resolved_module": "plan.PolicyPlan"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "compile_policy",
          "qualname": "compile_policy",
          "return_annotation": "PolicyPlan"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "RetrieveReq",
          "source": "app.domain.schemas.RetrieveReq",
          "type": "from"
        },
        {
          "alias": "PlanNode",
          "source": "plan.PlanNode",
          "type": "from"
        },
        {
          "alias": "PolicyPlan",
          "source": "plan.PolicyPlan",
          "type": "from"
        }
      ],
      "module": "app.policy.compiler",
      "path": "Src/backend/app/policy/compiler.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 22,
          "methods": [],
          "name": "PlanNode"
        },
        {
          "docstring": null,
          "lineno": 28,
          "methods": [
            "from_steps"
          ],
          "name": "PolicyPlan"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "sha256",
          "source": "hashlib.sha256",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Literal",
          "source": "typing.Literal",
          "type": "from"
        }
      ],
      "module": "app.policy.plan",
      "path": "Src/backend/app/policy/plan.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "getattr(obj, 'tenant_id', None)",
              "lineno": 17,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail=not_found)",
              "lineno": 18,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "_ensure_same_tenant",
          "qualname": "_ensure_same_tenant",
          "return_annotation": "object"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "AssignmentResp(id=assignment.id, developer_id=assignment.developer_id, project_id=assignment.project_id, role=assignment.role, status=assignment.status)",
              "lineno": 23,
              "name": "AssignmentResp",
              "resolved_module": "app.domain.schemas.AssignmentResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "_to_assignment_resp",
          "qualname": "_to_assignment_resp",
          "return_annotation": "AssignmentResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_ensure_same_tenant(db.get(m.Developer, developer_id), tenant_id, not_found='Developer not found')",
              "lineno": 43,
              "name": "_ensure_same_tenant",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.get(m.Developer, developer_id)",
              "lineno": 43,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_ensure_same_tenant(db.get(m.Project, project_id), tenant_id, not_found='Project not found')",
              "lineno": 44,
              "name": "_ensure_same_tenant",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.get(m.Project, project_id)",
              "lineno": 44,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Assignment(developer_id=developer.id, project_id=project.id, role=role, start_date=start_date)",
              "lineno": 46,
              "name": "m.Assignment",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(assignment)",
              "lineno": 52,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 54,
              "name": "db.commit",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.rollback()",
              "lineno": 56,
              "name": "db.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=409, detail='Assignment already exists for developer and project')",
              "lineno": 57,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.refresh(assignment)",
              "lineno": 59,
              "name": "db.refresh",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_assignment_resp(assignment)",
              "lineno": 60,
              "name": "_to_assignment_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a new assignment ensuring tenant coherence.",
          "endpoint": null,
          "is_async": false,
          "lineno": 32,
          "name": "create_assignment",
          "qualname": "create_assignment",
          "return_annotation": "AssignmentResp"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.get(m.Assignment, assignment_id)",
              "lineno": 74,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Assignment not found')",
              "lineno": 76,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "_ensure_same_tenant(db.get(m.Developer, assignment.developer_id), tenant_id, not_found='Developer not found')",
              "lineno": 78,
              "name": "_ensure_same_tenant",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.get(m.Developer, assignment.developer_id)",
              "lineno": 78,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_ensure_same_tenant(db.get(m.Project, assignment.project_id), tenant_id, not_found='Project not found')",
              "lineno": 79,
              "name": "_ensure_same_tenant",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.get(m.Project, assignment.project_id)",
              "lineno": 79,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 89,
              "name": "db.commit",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.refresh(assignment)",
              "lineno": 90,
              "name": "db.refresh",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_assignment_resp(assignment)",
              "lineno": 91,
              "name": "_to_assignment_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Update fields on an assignment while enforcing tenant boundaries.",
          "endpoint": null,
          "is_async": false,
          "lineno": 63,
          "name": "update_assignment",
          "qualname": "update_assignment",
          "return_annotation": "AssignmentResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_ensure_same_tenant(db.get(m.Project, project_id), tenant_id, not_found='Project not found')",
              "lineno": 97,
              "name": "_ensure_same_tenant",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.get(m.Project, project_id)",
              "lineno": 97,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).filter(m.Assignment.project_id == project_id, m.Developer.tenant_id == tenant_id).order_by(m.Assignment.id.asc()).all()",
              "lineno": 101,
              "name": "db.query.join.filter.order_by.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).filter(m.Assignment.project_id == project_id, m.Developer.tenant_id == tenant_id).order_by(m.Assignment.id.asc())",
              "lineno": 101,
              "name": "db.query.join.filter.order_by",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).filter(m.Assignment.project_id == project_id, m.Developer.tenant_id == tenant_id)",
              "lineno": 101,
              "name": "db.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id)",
              "lineno": 101,
              "name": "db.query.join",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment)",
              "lineno": 101,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Assignment.id.asc()",
              "lineno": 104,
              "name": "m.Assignment.id.asc",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "AssignmentListResp(assignments=[_to_assignment_resp(row) for row in rows])",
              "lineno": 107,
              "name": "AssignmentListResp",
              "resolved_module": "app.domain.schemas.AssignmentListResp"
            },
            {
              "category": "internal",
              "display": "_to_assignment_resp(row)",
              "lineno": 107,
              "name": "_to_assignment_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "List assignments for the supplied project within the tenant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 94,
          "name": "list_assignments_for_project",
          "qualname": "list_assignments_for_project",
          "return_annotation": "AssignmentListResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "date",
          "source": "datetime.date",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "IntegrityError",
          "source": "sqlalchemy.exc.IntegrityError",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "AssignmentListResp",
          "source": "app.domain.schemas.AssignmentListResp",
          "type": "from"
        },
        {
          "alias": "AssignmentResp",
          "source": "app.domain.schemas.AssignmentResp",
          "type": "from"
        }
      ],
      "module": "app.ports.assignments",
      "path": "Src/backend/app/ports/assignments.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 23,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 25,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "max(1, min(limit, 200))",
              "lineno": 26,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "min(limit, 200)",
              "lineno": 26,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.AuditLog).filter(m.AuditLog.tenant_id == tenant_id)",
              "lineno": 28,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.AuditLog)",
              "lineno": 28,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "query.filter(m.AuditLog.actor_user_id == actor)",
              "lineno": 30,
              "name": "query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "query.order_by(m.AuditLog.ts.desc()).limit(limit).all()",
              "lineno": 32,
              "name": "query.order_by.limit.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "query.order_by(m.AuditLog.ts.desc()).limit(limit)",
              "lineno": 32,
              "name": "query.order_by.limit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "query.order_by(m.AuditLog.ts.desc())",
              "lineno": 32,
              "name": "query.order_by",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.AuditLog.ts.desc()",
              "lineno": 32,
              "name": "m.AuditLog.ts.desc",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "AuditEntry(ts=row.ts, actor=row.actor_user_id, action=row.action, status=row.result_code, request_id=row.request_id)",
              "lineno": 34,
              "name": "AuditEntry",
              "resolved_module": "app.domain.schemas.AuditEntry"
            },
            {
              "category": "internal",
              "display": "AuditResp(items=items)",
              "lineno": 43,
              "name": "AuditResp",
              "resolved_module": "app.domain.schemas.AuditResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return recent audit entries for the caller's tenant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 14,
          "name": "list_audit_entries",
          "qualname": "list_audit_entries",
          "return_annotation": "AuditResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "AuditEntry",
          "source": "app.domain.schemas.AuditEntry",
          "type": "from"
        },
        {
          "alias": "AuditResp",
          "source": "app.domain.schemas.AuditResp",
          "type": "from"
        }
      ],
      "module": "app.ports.audit",
      "path": "Src/backend/app/ports/audit.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 26,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 28,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "user_claims.get('role')",
              "lineno": 29,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail='Only product owners may upload documents')",
              "lineno": 31,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == project_key, m.Project.tenant_id == tenant_id).one_or_none()",
              "lineno": 34,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == project_key, m.Project.tenant_id == tenant_id)",
              "lineno": 34,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project)",
              "lineno": 34,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Project not found')",
              "lineno": 39,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "service",
              "display": "ingest_file(file_bytes, filename, tenant_id=tenant_id, project_key=project_key)",
              "lineno": 42,
              "name": "ingest_file",
              "resolved_module": "app.application.ingestion_service.ingest_file"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='').warning('Falling back to local knowledge store', project=project_key, error=str(exc))",
              "lineno": 44,
              "name": "logger.bind.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='')",
              "lineno": 44,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 45,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "extract_text(file_bytes, filename)",
              "lineno": 47,
              "name": "extract_text",
              "resolved_module": "app.application.ingestion_service.extract_text"
            },
            {
              "category": "internal",
              "display": "store_chunks(db, tenant_id=tenant_id, project=project, text=text, source=filename or 'upload')",
              "lineno": 48,
              "name": "store_chunks",
              "resolved_module": "app.application.local_kb.store_chunks"
            },
            {
              "category": "internal",
              "display": "UploadResp(project_key=project_key, collection=fallback['collection'], count=int(fallback['count']), chunks=int(fallback['chunks']), message='Remote vector index unavailable; using local fallback store. Please retry later.')",
              "lineno": 55,
              "name": "UploadResp",
              "resolved_module": "app.domain.schemas.UploadResp"
            },
            {
              "category": "internal",
              "display": "int(fallback['count'])",
              "lineno": 58,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(fallback['chunks'])",
              "lineno": 59,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "extract_text(file_bytes, filename)",
              "lineno": 65,
              "name": "extract_text",
              "resolved_module": "app.application.ingestion_service.extract_text"
            },
            {
              "category": "internal",
              "display": "store_chunks(db, tenant_id=tenant_id, project=project, text=text, source=filename or 'upload')",
              "lineno": 66,
              "name": "store_chunks",
              "resolved_module": "app.application.local_kb.store_chunks"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='').debug('Unable to mirror upload into local knowledge store', error=str(mirror_exc))",
              "lineno": 74,
              "name": "logger.bind.debug",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='')",
              "lineno": 74,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(mirror_exc)",
              "lineno": 75,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "UploadResp(project_key=project_key, collection=stats['collection'], count=int(stats['count']), chunks=int(stats['chunks']))",
              "lineno": 78,
              "name": "UploadResp",
              "resolved_module": "app.domain.schemas.UploadResp"
            },
            {
              "category": "internal",
              "display": "int(stats['count'])",
              "lineno": 81,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(stats['chunks'])",
              "lineno": 82,
              "name": "int",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ingest a document for the caller's tenant and return upload stats.",
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "ingest_upload",
          "qualname": "ingest_upload",
          "return_annotation": "UploadResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "extract_text",
          "source": "app.application.ingestion_service.extract_text",
          "type": "from"
        },
        {
          "alias": "ingest_file",
          "source": "app.application.ingestion_service.ingest_file",
          "type": "from"
        },
        {
          "alias": "store_chunks",
          "source": "app.application.local_kb.store_chunks",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "UploadResp",
          "source": "app.domain.schemas.UploadResp",
          "type": "from"
        }
      ],
      "module": "app.ports.ingestion",
      "path": "Src/backend/app/ports/ingestion.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('role')",
              "lineno": 26,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail='Only product owners or admins may request onboarding plans')",
              "lineno": 27,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 29,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 31,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.get(m.Project, project_id)",
              "lineno": 32,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Project not found')",
              "lineno": 34,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.get(m.Developer, developer_id)",
              "lineno": 36,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Developer not found')",
              "lineno": 38,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "service",
              "display": "generate_onboarding(db, user_claims=user_claims, project_key=project.key, project_id=project.id, developer_id=developer.id, dev_name=developer.display_name, autonomy=autonomy)",
              "lineno": 41,
              "name": "generate_onboarding",
              "resolved_module": "app.application.onboarding_service.generate_onboarding"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=exc.status_code, detail=exc.message)",
              "lineno": 51,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=500, detail=f'Failed to generate onboarding plan: {exc}')",
              "lineno": 53,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "OnboardingResp(**resp_kwargs)",
              "lineno": 58,
              "name": "OnboardingResp",
              "resolved_module": "app.domain.schemas.OnboardingResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Generate an onboarding plan within tenant boundaries.",
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "generate_plan",
          "qualname": "generate_plan",
          "return_annotation": "OnboardingResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "generate_onboarding",
          "source": "app.application.onboarding_service.generate_onboarding",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "OnboardingPlan",
          "source": "app.domain.schemas.OnboardingPlan",
          "type": "from"
        },
        {
          "alias": "OnboardingResp",
          "source": "app.domain.schemas.OnboardingResp",
          "type": "from"
        }
      ],
      "module": "app.ports.onboarding",
      "path": "Src/backend/app/ports/onboarding.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": "Register a callable for planner execution under *name*.",
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "register_tool",
          "qualname": "register_tool",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "sorted(_TOOL_REGISTRY.keys())",
              "lineno": 32,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_TOOL_REGISTRY.keys()",
              "lineno": 32,
              "name": "_TOOL_REGISTRY.keys",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return registered tool names sorted alphabetically.",
          "endpoint": null,
          "is_async": false,
          "lineno": 29,
          "name": "list_tools",
          "qualname": "list_tools",
          "return_annotation": "List[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "', '.join(allowed_tools or ['rag_search', 'jira_epic', 'confluence_page'])",
              "lineno": 58,
              "name": ", .join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(settings.llm_provider or 'openai').lower()",
              "lineno": 66,
              "name": "lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "chat_impl(full_prompt, SCHEMA_HINT)",
              "lineno": 69,
              "name": "chat_impl",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Planner provider unavailable; using heuristic fallback. reason={}'.format(exc))",
              "lineno": 71,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "'Planner provider unavailable; using heuristic fallback. reason={}'.format(exc)",
              "lineno": 71,
              "name": "Planner provider unavailable; using heuristic fallback. reason={}.format",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_fallback_plan(task_prompt, allowed_tools)",
              "lineno": 72,
              "name": "_fallback_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Planner HTTP failure; using heuristic fallback. status={}'.format(exc.response.status_code))",
              "lineno": 74,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "'Planner HTTP failure; using heuristic fallback. status={}'.format(exc.response.status_code)",
              "lineno": 75,
              "name": "Planner HTTP failure; using heuristic fallback. status={}.format",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_fallback_plan(task_prompt, allowed_tools)",
              "lineno": 77,
              "name": "_fallback_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Planner raised HTTPException; using heuristic fallback. detail={}'.format(exc.detail))",
              "lineno": 79,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "'Planner raised HTTPException; using heuristic fallback. detail={}'.format(exc.detail)",
              "lineno": 79,
              "name": "Planner raised HTTPException; using heuristic fallback. detail={}.format",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_fallback_plan(task_prompt, allowed_tools)",
              "lineno": 80,
              "name": "_fallback_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.exception('Planner parsing error; using heuristic fallback: {}'.format(exc))",
              "lineno": 82,
              "name": "logger.exception",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "'Planner parsing error; using heuristic fallback: {}'.format(exc)",
              "lineno": 82,
              "name": "Planner parsing error; using heuristic fallback: {}.format",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_fallback_plan(task_prompt, allowed_tools)",
              "lineno": 83,
              "name": "_fallback_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(plan, dict)",
              "lineno": 84,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=500, detail='Planner returned invalid structure.')",
              "lineno": 85,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "plan.setdefault('output', {})",
              "lineno": 86,
              "name": "plan.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan['output'].setdefault('notes', 'llm_plan')",
              "lineno": 87,
              "name": "plan.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.setdefault('_meta', {})",
              "lineno": 88,
              "name": "plan.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.setdefault('task_prompt', task_prompt)",
              "lineno": 89,
              "name": "meta.setdefault",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Call the planner LLM and return the generated plan payload.",
          "endpoint": null,
          "is_async": false,
          "lineno": 55,
          "name": "create_plan",
          "qualname": "create_plan",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "task_prompt.strip()",
              "lineno": 96,
              "name": "task_prompt.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task_prompt.strip().splitlines()",
              "lineno": 96,
              "name": "task_prompt.strip.splitlines",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task_prompt.strip()",
              "lineno": 96,
              "name": "task_prompt.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "', '.join(allowed_tools or ['rag_search', 'jira_epic', 'confluence_page'])",
              "lineno": 98,
              "name": ", .join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Generate a deterministic plan when the planner service is unavailable.",
          "endpoint": null,
          "is_async": false,
          "lineno": 93,
          "name": "_fallback_plan",
          "qualname": "_fallback_plan",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "sorted({field for field in missing if field})",
              "lineno": 124,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail={'code': 'TOOL_ARGS_INVALID', 'message': hint, 'details': {'missing': unique_missing}})",
              "lineno": 125,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 123,
          "name": "_raise_tool_args_invalid",
          "qualname": "_raise_tool_args_invalid",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "plan.get('output', {})",
              "lineno": 136,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(output.get('summary') or 'Onboarding plan').strip()",
              "lineno": 137,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('summary')",
              "lineno": 137,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('two_week_plan')",
              "lineno": 138,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('gaps')",
              "lineno": 139,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(gap, dict)",
              "lineno": 143,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(gap.get('topic') or '').strip()",
              "lineno": 145,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(gap.get('topic') or '')",
              "lineno": 145,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gap.get('topic')",
              "lineno": 145,
              "name": "gap.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gap.get('confidence')",
              "lineno": 148,
              "name": "gap.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(confidence, (int, float))",
              "lineno": 149,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gap_items.append(f'<li>{topic} (confidence {confidence:.0%})</li>')",
              "lineno": 150,
              "name": "gap_items.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gap_items.append(f'<li>{topic}</li>')",
              "lineno": 152,
              "name": "gap_items.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(task, dict)",
              "lineno": 156,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '').strip()",
              "lineno": 158,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '')",
              "lineno": 158,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task.get('task')",
              "lineno": 158,
              "name": "task.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task.get('day')",
              "lineno": 161,
              "name": "task.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(day, (int, float))",
              "lineno": 162,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task_items.append(f'<li><strong>Day {int(day)}</strong>: {description}</li>')",
              "lineno": 163,
              "name": "task_items.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(day)",
              "lineno": 163,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task_items.append(f'<li>{description}</li>')",
              "lineno": 165,
              "name": "task_items.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "''.join(gap_items)",
              "lineno": 167,
              "name": "join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "''.join(task_items)",
              "lineno": 168,
              "name": "join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 135,
          "name": "_default_confluence_body",
          "qualname": "_default_confluence_body",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "plan.get('output', {})",
              "lineno": 173,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(output.get('summary') or 'Onboarding objectives').strip()",
              "lineno": 174,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('summary')",
              "lineno": 174,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.get('two_week_plan')",
              "lineno": 175,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(task, dict)",
              "lineno": 179,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '').strip()",
              "lineno": 181,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '')",
              "lineno": 181,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task.get('task')",
              "lineno": 181,
              "name": "task.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task.get('day')",
              "lineno": 184,
              "name": "task.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(day, (int, float))",
              "lineno": 185,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'* Day {int(day)}: {description}')",
              "lineno": 186,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(day)",
              "lineno": 186,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'* {description}')",
              "lineno": 188,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('* Review project documentation and align with mentor.')",
              "lineno": 191,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(lines)",
              "lineno": 193,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 172,
          "name": "_default_jira_description",
          "qualname": "_default_jira_description",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "(text or '').strip()",
              "lineno": 197,
              "name": "strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 196,
          "name": "_adf_from_text",
          "qualname": "_adf_from_text",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 215,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "item.strip()",
              "lineno": 216,
              "name": "item.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.split(',')",
              "lineno": 216,
              "name": "value.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, (list, tuple, set))",
              "lineno": 217,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(item).strip()",
              "lineno": 218,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(item)",
              "lineno": 218,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value).strip()",
              "lineno": 220,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 220,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "re.sub('\\\\s+', '-', item)",
              "lineno": 225,
              "name": "re.sub",
              "resolved_module": "re"
            },
            {
              "category": "internal",
              "display": "normalized.append(sanitized)",
              "lineno": 226,
              "name": "normalized.append",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 212,
          "name": "_normalise_labels",
          "qualname": "_normalise_labels",
          "return_annotation": "List[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 232,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "match.group(1)",
              "lineno": 235,
              "name": "match.group",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "path.split('.')",
              "lineno": 238,
              "name": "path.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(cur, dict)",
              "lineno": 239,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(cur if cur is not None else '')",
              "lineno": 243,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_PLACEHOLDER.sub(repl, value)",
              "lineno": 244,
              "name": "_PLACEHOLDER.sub",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, list)",
              "lineno": 245,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_resolve_value(item, ctx)",
              "lineno": 246,
              "name": "_resolve_value",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, dict)",
              "lineno": 247,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_resolve_value(item, ctx)",
              "lineno": 248,
              "name": "_resolve_value",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.items()",
              "lineno": 248,
              "name": "value.items",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Recursively resolve templated placeholders from the execution context.",
          "endpoint": null,
          "is_async": false,
          "lineno": 229,
          "name": "_resolve_value",
          "qualname": "_resolve_value",
          "return_annotation": "Any"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "(text or '').strip()",
              "lineno": 253,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(snippet)",
              "lineno": 256,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 252,
          "name": "_normalized_snippet",
          "qualname": "_normalized_snippet",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 264,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 266,
              "name": "value.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stripped.lower()",
              "lineno": 269,
              "name": "stripped.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_PLACEHOLDER.search(stripped)",
              "lineno": 270,
              "name": "_PLACEHOLDER.search",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stripped.startswith('<')",
              "lineno": 273,
              "name": "stripped.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stripped.endswith('>')",
              "lineno": 274,
              "name": "stripped.endswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stripped.count('<')",
              "lineno": 276,
              "name": "stripped.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stripped.count('>')",
              "lineno": 277,
              "name": "stripped.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_BRACE_PLACEHOLDER.search(stripped)",
              "lineno": 278,
              "name": "_BRACE_PLACEHOLDER.search",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lowered.startswith('insert ')",
              "lineno": 283,
              "name": "lowered.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lowered.startswith('add placeholder')",
              "lineno": 283,
              "name": "lowered.startswith",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 261,
          "name": "_looks_placeholder",
          "qualname": "_looks_placeholder",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "dict(args)",
              "lineno": 294,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(plan, dict)",
              "lineno": 295,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('_meta', {})",
              "lineno": 295,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(plan, dict)",
              "lineno": 296,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('output', {})",
              "lineno": 296,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value).strip()",
              "lineno": 302,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 302,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('project_key')",
              "lineno": 305,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('projectKey')",
              "lineno": 305,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('project_id')",
              "lineno": 306,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('projectId')",
              "lineno": 306,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.get('project_key')",
              "lineno": 307,
              "name": "meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.get('project_id')",
              "lineno": 308,
              "name": "meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(raw_project_key)",
              "lineno": 311,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(meta_project_key)",
              "lineno": 312,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(settings.atlassian_project_key)",
              "lineno": 313,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(raw_project_id)",
              "lineno": 316,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(meta_project_id)",
              "lineno": 317,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(settings.atlassian_project_id)",
              "lineno": 318,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(project_key)",
              "lineno": 321,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(project_id)",
              "lineno": 323,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(raw_project_key)",
              "lineno": 327,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(out.get('summary'))",
              "lineno": 328,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 328,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_clean_candidate(raw_project_id)",
              "lineno": 330,
              "name": "_clean_candidate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('project_id')",
              "lineno": 335,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(claims_project_id)",
              "lineno": 336,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(claims_project_id).strip()",
              "lineno": 337,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(claims_project_id)",
              "lineno": 337,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('accessible_projects')",
              "lineno": 339,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(candidate).strip()",
              "lineno": 342,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(candidate)",
              "lineno": 342,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(candidate_str)",
              "lineno": 343,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "candidate_str.lower()",
              "lineno": 344,
              "name": "candidate_str.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('project_key')",
              "lineno": 355,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('project_id')",
              "lineno": 357,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('project_key')",
              "lineno": 359,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('issue_type')",
              "lineno": 361,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('issuetype')",
              "lineno": 361,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(issue_type)",
              "lineno": 362,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(issue_type).strip()",
              "lineno": 364,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(issue_type)",
              "lineno": 364,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type_str.replace('_', '-').replace(' ', '-').lower()",
              "lineno": 365,
              "name": "issue_type_str.replace.replace.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type_str.replace('_', '-').replace(' ', '-')",
              "lineno": 365,
              "name": "issue_type_str.replace.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type_str.replace('_', '-')",
              "lineno": 365,
              "name": "issue_type_str.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "issue_type_map.get(issue_type_key, 'Task')",
              "lineno": 374,
              "name": "issue_type_map.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('summary')",
              "lineno": 376,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('title')",
              "lineno": 376,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(raw_summary)",
              "lineno": 378,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 379,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(fallback_summary)",
              "lineno": 380,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('summary')",
              "lineno": 381,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalized_snippet(str(fallback_summary))",
              "lineno": 383,
              "name": "_normalized_snippet",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(fallback_summary)",
              "lineno": 383,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(raw_summary).strip()",
              "lineno": 385,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(raw_summary)",
              "lineno": 385,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('summary')",
              "lineno": 387,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('description_text')",
              "lineno": 389,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('description')",
              "lineno": 389,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(raw_description)",
              "lineno": 391,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(out.get('summary'))",
              "lineno": 392,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 392,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "any((isinstance(task, dict) and str(task.get('task') or '').strip() for task in out.get('two_week_plan') or []))",
              "lineno": 393,
              "name": "any",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(task, dict)",
              "lineno": 394,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '').strip()",
              "lineno": 394,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(task.get('task') or '')",
              "lineno": 394,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "task.get('task')",
              "lineno": 394,
              "name": "task.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('two_week_plan')",
              "lineno": 395,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_default_jira_description(plan)",
              "lineno": 398,
              "name": "_default_jira_description",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('description')",
              "lineno": 400,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(raw_description).strip()",
              "lineno": 402,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(raw_description)",
              "lineno": 402,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "missing_fields.append('description')",
              "lineno": 404,
              "name": "missing_fields.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_raise_tool_args_invalid(missing_fields, 'Jira issue requires additional fields')",
              "lineno": 407,
              "name": "_raise_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(description_text or 'generated by North Star').strip()",
              "lineno": 410,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_adf_from_text(description_text)",
              "lineno": 411,
              "name": "_adf_from_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalise_labels(raw_args.get('labels'))",
              "lineno": 413,
              "name": "_normalise_labels",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('labels')",
              "lineno": 413,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('epic_name')",
              "lineno": 415,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('epicName')",
              "lineno": 415,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('parent_issue_key')",
              "lineno": 419,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('parentIssueKey')",
              "lineno": 419,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(parent_issue_key)",
              "lineno": 421,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_raise_tool_args_invalid(['parent_issue_key'], 'Sub-task requires parent_issue_key')",
              "lineno": 422,
              "name": "_raise_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(parent_issue_key).strip()",
              "lineno": 423,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(parent_issue_key)",
              "lineno": 423,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_key).strip()",
              "lineno": 426,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_key)",
              "lineno": 426,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id).strip()",
              "lineno": 427,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id)",
              "lineno": 427,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(epic_name).strip()",
              "lineno": 434,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(epic_name)",
              "lineno": 434,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('epic_name_field_id')",
              "lineno": 436,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('epicNameFieldId')",
              "lineno": 436,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('space_key')",
              "lineno": 443,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('space')",
              "lineno": 444,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.get('space_key')",
              "lineno": 445,
              "name": "meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('space_id')",
              "lineno": 449,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('spaceId')",
              "lineno": 450,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "meta.get('space_id')",
              "lineno": 451,
              "name": "meta.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(space_key)",
              "lineno": 454,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(space_id)",
              "lineno": 456,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.discover_default_space()",
              "lineno": 467,
              "name": "confluence_adapter.discover_default_space",
              "resolved_module": "app.adapters.confluence_adapter"
            },
            {
              "category": "internal",
              "display": "default_space.get('key')",
              "lineno": 468,
              "name": "default_space.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "default_space.get('id')",
              "lineno": 469,
              "name": "default_space.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('Default Confluence space discovery failed: {}', exc)",
              "lineno": 473,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "_raise_tool_args_invalid(['space_key', 'space_id'], 'Confluence page requires space_key or space_id')",
              "lineno": 475,
              "name": "_raise_tool_args_invalid",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_normalized_snippet(out.get('summary') or 'Onboarding plan')",
              "lineno": 477,
              "name": "_normalized_snippet",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 477,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('title')",
              "lineno": 478,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(title)",
              "lineno": 479,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(title or default_title).strip()",
              "lineno": 481,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('body_html')",
              "lineno": 483,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('html')",
              "lineno": 483,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('body')",
              "lineno": 483,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(body_html)",
              "lineno": 484,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('description_text')",
              "lineno": 485,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 485,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "html.escape((default_text or 'generated by North Star').strip() or 'generated by North Star')",
              "lineno": 486,
              "name": "html.escape",
              "resolved_module": "html"
            },
            {
              "category": "internal",
              "display": "(default_text or 'generated by North Star').strip()",
              "lineno": 486,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('evidence')",
              "lineno": 489,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw_args.get('notes')",
              "lineno": 489,
              "name": "raw_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_looks_placeholder(evidence)",
              "lineno": 490,
              "name": "_looks_placeholder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "out.get('summary')",
              "lineno": 491,
              "name": "out.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(evidence or '').strip()",
              "lineno": 492,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(space_key).strip()",
              "lineno": 495,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(space_key)",
              "lineno": 495,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(space_id).strip()",
              "lineno": 496,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(space_id)",
              "lineno": 496,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(settings, 'atlassian_space', None)",
              "lineno": 506,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(configured_space).strip()",
              "lineno": 508,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(configured_space)",
              "lineno": 508,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(args)",
              "lineno": 516,
              "name": "dict",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 288,
          "name": "_sanitize_tool_args",
          "qualname": "_sanitize_tool_args",
          "return_annotation": "Tuple[Dict[str, Any], str | None]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('role', 'Dev')",
              "lineno": 522,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('steps', [])",
              "lineno": 524,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(steps, start=1)",
              "lineno": 528,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('tool')",
              "lineno": 529,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('args', {})",
              "lineno": 530,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning(f\"Unknown tool '{tool}' in step {idx}; skipping.\")",
              "lineno": 532,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "policy",
              "display": "enforce(tool, role)",
              "lineno": 534,
              "name": "enforce",
              "resolved_module": "app.application.policy_bus.enforce"
            },
            {
              "category": "internal",
              "display": "_resolve_value(args, ctx)",
              "lineno": 536,
              "name": "_resolve_value",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_sanitize_tool_args(tool, args, user_claims, plan)",
              "lineno": 538,
              "name": "_sanitize_tool_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning(f\"Skipping tool '{tool}' in step {idx}: {skip_reason}\")",
              "lineno": 541,
              "name": "logger.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "_TOOL_REGISTRY[tool](user_claims=user_claims, **args)",
              "lineno": 545,
              "name": "_TOOL_REGISTRY",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(res, dict)",
              "lineno": 547,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.exception(f\"Tool '{tool}' failed: {e}\")",
              "lineno": 551,
              "name": "logger.exception",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(e)",
              "lineno": 552,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('output', {})",
              "lineno": 555,
              "name": "plan.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Execute a plan against registered tools while enforcing RBAC.",
          "endpoint": null,
          "is_async": false,
          "lineno": 520,
          "name": "execute_plan",
          "qualname": "execute_plan",
          "return_annotation": "Dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "html",
          "source": "html",
          "type": "import"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "cerebras_chat_json",
          "source": "app.adapters.cerebras_planner.chat_json",
          "type": "from"
        },
        {
          "alias": "openai_chat_json",
          "source": "app.adapters.openai_planner.chat_json",
          "type": "from"
        },
        {
          "alias": "enforce",
          "source": "app.application.policy_bus.enforce",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        }
      ],
      "module": "app.ports.planner",
      "path": "Src/backend/app/ports/planner.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "ProjectResp(id=project.id, key=project.key, name=project.name, description=project.description)",
              "lineno": 16,
              "name": "ProjectResp",
              "resolved_module": "app.domain.schemas.ProjectResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "_to_project_resp",
          "qualname": "_to_project_resp",
          "return_annotation": "ProjectResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "m.Project(key=key, name=name, description=description, tenant_id=tenant_id)",
              "lineno": 34,
              "name": "m.Project",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(project)",
              "lineno": 35,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 37,
              "name": "db.commit",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.rollback()",
              "lineno": 39,
              "name": "db.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=409, detail='Project key already exists')",
              "lineno": 40,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.refresh(project)",
              "lineno": 42,
              "name": "db.refresh",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_project_resp(project)",
              "lineno": 43,
              "name": "_to_project_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a new project scoped to *tenant_id* and return its schema.",
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "create_project",
          "qualname": "create_project",
          "return_annotation": "ProjectResp"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == key, m.Project.tenant_id == tenant_id).one_or_none()",
              "lineno": 50,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == key, m.Project.tenant_id == tenant_id)",
              "lineno": 50,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project)",
              "lineno": 50,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Project not found')",
              "lineno": 55,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "_to_project_resp(project)",
              "lineno": 56,
              "name": "_to_project_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a single project by key within the caller's tenant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 46,
          "name": "get_project_by_key",
          "qualname": "get_project_by_key",
          "return_annotation": "ProjectResp"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.tenant_id == tenant_id).order_by(m.Project.key.asc()).all()",
              "lineno": 63,
              "name": "db.query.filter.order_by.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.tenant_id == tenant_id).order_by(m.Project.key.asc())",
              "lineno": 63,
              "name": "db.query.filter.order_by",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.tenant_id == tenant_id)",
              "lineno": 63,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project)",
              "lineno": 63,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Project.key.asc()",
              "lineno": 65,
              "name": "m.Project.key.asc",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "_to_project_resp(project)",
              "lineno": 68,
              "name": "_to_project_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return all projects for the provided tenant ordered by key.",
          "endpoint": null,
          "is_async": false,
          "lineno": 59,
          "name": "list_projects",
          "qualname": "list_projects",
          "return_annotation": "List[ProjectResp]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "IntegrityError",
          "source": "sqlalchemy.exc.IntegrityError",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "ProjectResp",
          "source": "app.domain.schemas.ProjectResp",
          "type": "from"
        }
      ],
      "module": "app.ports.projects",
      "path": "Src/backend/app/ports/projects.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail=f'Access denied to project: {t}')",
              "lineno": 28,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ensure requested targets are within the caller's accessible projects.",
          "endpoint": null,
          "is_async": false,
          "lineno": 23,
          "name": "_assert_targets_allowed",
          "qualname": "_assert_targets_allowed",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "pl.get('chunk_id')",
              "lineno": 38,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hash_text(pl.get('text', ''), namespace='retrieval')",
              "lineno": 38,
              "name": "hash_text",
              "resolved_module": "app.utils.hashing.hash_text"
            },
            {
              "category": "internal",
              "display": "pl.get('text', '')",
              "lineno": 38,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('project_key', pl.get('project_id', col))",
              "lineno": 39,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('project_id', col)",
              "lineno": 39,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(src)",
              "lineno": 41,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "best[cid][3].add(str(src))",
              "lineno": 43,
              "name": "best.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(src)",
              "lineno": 43,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "best.items()",
              "lineno": 45,
              "name": "best.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(pl)",
              "lineno": 46,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'+'.join(sorted(sources))",
              "lineno": 47,
              "name": "+.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(sources)",
              "lineno": 47,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "merged.append((score, col, pl))",
              "lineno": 48,
              "name": "merged.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "merged.sort(key=lambda x: x[0], reverse=True)",
              "lineno": 49,
              "name": "merged.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Merge duplicate chunks across collections preferring the best score.",
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "_dedupe_by_chunk_id",
          "qualname": "_dedupe_by_chunk_id",
          "return_annotation": "List[Tuple[float, str, Dict[str, Any]]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "list(node.args.get('projects', []))",
              "lineno": 57,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "node.args.get('projects', [])",
              "lineno": 57,
              "name": "node.args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(node.args.get('projects', []))",
              "lineno": 59,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "node.args.get('projects', [])",
              "lineno": 59,
              "name": "node.args.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 52,
          "name": "_extract_plan_metadata",
          "qualname": "_extract_plan_metadata",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "dict(node.args.get('filters', {}))",
              "lineno": 66,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "node.args.get('filters', {})",
              "lineno": 66,
              "name": "node.args.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 63,
          "name": "_meta_filters_from_plan",
          "qualname": "_meta_filters_from_plan",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(tenant_id or '').strip()",
              "lineno": 81,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(tenant_id or '')",
              "lineno": 81,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail='Missing tenant context')",
              "lineno": 83,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 85,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "tenant_session.get(m.Tenant, tenant_key)",
              "lineno": 88,
              "name": "tenant_session.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "tenant_session.close()",
              "lineno": 91,
              "name": "tenant_session.close",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Tenant not found')",
              "lineno": 94,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "logger.bind(router_mode=router_mode, tenant_id=tenant_id).debug('Router mode selected')",
              "lineno": 97,
              "name": "logger.bind.debug",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(router_mode=router_mode, tenant_id=tenant_id)",
              "lineno": 97,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=501, detail={'code': 'ROUTER_NOT_IMPLEMENTED', 'message': 'Learned router pending'})",
              "lineno": 99,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "user_claims.get('accessible_projects', [])",
              "lineno": 108,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_assert_targets_allowed(targets, accessible)",
              "lineno": 109,
              "name": "_assert_targets_allowed",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "RetrieveReq(query=query, targets=list(targets or []), k=k, strategy=strategy)",
              "lineno": 111,
              "name": "RetrieveReq",
              "resolved_module": "app.domain.schemas.RetrieveReq"
            },
            {
              "category": "internal",
              "display": "list(targets or [])",
              "lineno": 111,
              "name": "list",
              "resolved_module": null
            },
            {
              "category": "policy",
              "display": "compile_policy(user_claims, req)",
              "lineno": 112,
              "name": "compile_policy",
              "resolved_module": "app.policy.compiler.compile_policy"
            },
            {
              "category": "internal",
              "display": "_extract_plan_metadata(plan)",
              "lineno": 113,
              "name": "_extract_plan_metadata",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_meta_filters_from_plan(plan)",
              "lineno": 114,
              "name": "_meta_filters_from_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.bind(request_id=user_claims.get('request_id', ''), tenant_id=tenant_id, user_role=user_claims.get('role'), plan_hash=plan.plan_hash, allow_projects=plan_meta['allow_projects'], deny_projects=plan_meta['deny_projects']).info('PolicyPlan compiled')",
              "lineno": 116,
              "name": "logger.bind.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(request_id=user_claims.get('request_id', ''), tenant_id=tenant_id, user_role=user_claims.get('role'), plan_hash=plan.plan_hash, allow_projects=plan_meta['allow_projects'], deny_projects=plan_meta['deny_projects'])",
              "lineno": 116,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "user_claims.get('request_id', '')",
              "lineno": 117,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('role')",
              "lineno": 119,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "hybrid_search(tenant_id, targets, query, k=max(k * 3, 24), strategy=strategy, meta_filters=filters)",
              "lineno": 131,
              "name": "hybrid_search",
              "resolved_module": "app.adapters.hybrid_retriever.search"
            },
            {
              "category": "internal",
              "display": "max(k * 3, 24)",
              "lineno": 135,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.bind(req='').warning('Hybrid retriever unavailable; switching to fallback', error=str(exc))",
              "lineno": 140,
              "name": "logger.bind.warning",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='')",
              "lineno": 140,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 141,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.bind(req='').exception('Hybrid retriever crashed; switching to fallback')",
              "lineno": 146,
              "name": "logger.bind.exception",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(req='')",
              "lineno": 146,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 151,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "fallback_search(session, tenant_id=tenant_id, project_keys=targets, query=query, limit=max(k * 2, 24))",
              "lineno": 154,
              "name": "fallback_search",
              "resolved_module": "app.application.local_kb.search_chunks"
            },
            {
              "category": "internal",
              "display": "max(k * 2, 24)",
              "lineno": 159,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 165,
              "name": "session.close",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_dedupe_by_chunk_id(raw, limit=k)",
              "lineno": 166,
              "name": "_dedupe_by_chunk_id",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('merged_sources')",
              "lineno": 170,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('project_key')",
              "lineno": 170,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('project_id', col)",
              "lineno": 170,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hits.append(RetrieveHit(text=pl.get('text', '[No text found in payload]'), score=float(score), source=str(src), chunk_id=pl.get('chunk_id', '')))",
              "lineno": 171,
              "name": "hits.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "RetrieveHit(text=pl.get('text', '[No text found in payload]'), score=float(score), source=str(src), chunk_id=pl.get('chunk_id', ''))",
              "lineno": 171,
              "name": "RetrieveHit",
              "resolved_module": "app.domain.schemas.RetrieveHit"
            },
            {
              "category": "internal",
              "display": "pl.get('text', '[No text found in payload]')",
              "lineno": 172,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(score)",
              "lineno": 173,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(src)",
              "lineno": 174,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pl.get('chunk_id', '')",
              "lineno": 175,
              "name": "pl.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "build_evidence_snippets(hits)",
              "lineno": 178,
              "name": "build_evidence_snippets",
              "resolved_module": "worker.handlers.evidence_builder.build_evidence_snippets"
            },
            {
              "category": "internal",
              "display": "hash_text('|'.join((hit.chunk_id for hit in hits)), namespace='evidence')",
              "lineno": 180,
              "name": "hash_text",
              "resolved_module": "app.utils.hashing.hash_text"
            },
            {
              "category": "internal",
              "display": "'|'.join((hit.chunk_id for hit in hits))",
              "lineno": 180,
              "name": "|.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.bind(request_id=user_claims.get('request_id', ''), plan_hash=plan.plan_hash, candidates_pre=len(raw), candidates_post=len(fused), pruned_count=max(len(raw) - len(fused), 0), final_k=len(hits), evidence_hash=evidence_signature).info('PolicyPlan execution summary')",
              "lineno": 182,
              "name": "logger.bind.info",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "logger.bind(request_id=user_claims.get('request_id', ''), plan_hash=plan.plan_hash, candidates_pre=len(raw), candidates_post=len(fused), pruned_count=max(len(raw) - len(fused), 0), final_k=len(hits), evidence_hash=evidence_signature)",
              "lineno": 182,
              "name": "logger.bind",
              "resolved_module": "loguru.logger"
            },
            {
              "category": "internal",
              "display": "user_claims.get('request_id', '')",
              "lineno": 183,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(raw)",
              "lineno": 185,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(fused)",
              "lineno": 186,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(len(raw) - len(fused), 0)",
              "lineno": 187,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(raw)",
              "lineno": 187,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(fused)",
              "lineno": 187,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(hits)",
              "lineno": 188,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id=tenant_id, session=db)",
              "lineno": 197,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id=tenant_id, session_factory=SessionLocal)",
              "lineno": 199,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "str(p)",
              "lineno": 201,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(t)",
              "lineno": 202,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "allowed_targets.add('global')",
              "lineno": 205,
              "name": "allowed_targets.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('known_projects')",
              "lineno": 207,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=known_projects, top_hits=hits, allowed_targets=allowed_targets, context={'query': query, 'plan_hash': plan.plan_hash})",
              "lineno": 209,
              "name": "mapper.infer",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Execute the hybrid retriever and return fused payloads.",
          "endpoint": null,
          "is_async": false,
          "lineno": 70,
          "name": "rag_search",
          "qualname": "rag_search",
          "return_annotation": "Dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "payload.get('fallback_message')",
              "lineno": 233,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('rosetta')",
              "lineno": 235,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('rosetta_narrative_md')",
              "lineno": 237,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "RetrieveResp(**resp_kwargs)",
              "lineno": 239,
              "name": "RetrieveResp",
              "resolved_module": "app.domain.schemas.RetrieveResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Coerce internal payload structure into the API response schema.",
          "endpoint": null,
          "is_async": false,
          "lineno": 229,
          "name": "api_response",
          "qualname": "api_response",
          "return_annotation": "RetrieveResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "logger",
          "source": "loguru.logger",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "hybrid_search",
          "source": "app.adapters.hybrid_retriever.search",
          "type": "from"
        },
        {
          "alias": "ABMapper",
          "source": "app.application.contrastive_mapper.ABMapper",
          "type": "from"
        },
        {
          "alias": "fallback_search",
          "source": "app.application.local_kb.search_chunks",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "SessionLocal",
          "source": "app.deps.SessionLocal",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        },
        {
          "alias": "RetrieveHit",
          "source": "app.domain.schemas.RetrieveHit",
          "type": "from"
        },
        {
          "alias": "RetrieveReq",
          "source": "app.domain.schemas.RetrieveReq",
          "type": "from"
        },
        {
          "alias": "RetrieveResp",
          "source": "app.domain.schemas.RetrieveResp",
          "type": "from"
        },
        {
          "alias": "compile_policy",
          "source": "app.policy.compiler.compile_policy",
          "type": "from"
        },
        {
          "alias": "PolicyPlan",
          "source": "app.policy.plan.PolicyPlan",
          "type": "from"
        },
        {
          "alias": "hash_text",
          "source": "app.utils.hashing.hash_text",
          "type": "from"
        },
        {
          "alias": "build_evidence_snippets",
          "source": "worker.handlers.evidence_builder.build_evidence_snippets",
          "type": "from"
        }
      ],
      "module": "app.ports.retriever",
      "path": "Src/backend/app/ports/retriever.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 23,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 25,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "user_claims.get('role')",
              "lineno": 26,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_claims.get('developer_id')",
              "lineno": 28,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail='Developers may only view their own profile')",
              "lineno": 30,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.get(m.Developer, developer_id)",
              "lineno": 31,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Developer not found')",
              "lineno": 33,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "select(m.Skill.path_cache, m.DeveloperSkill.score, m.DeveloperSkill.last_seen_at).join(m.DeveloperSkill, m.Skill.id == m.DeveloperSkill.skill_id).where(m.DeveloperSkill.developer_id == developer_id).order_by(m.DeveloperSkill.score.desc()).limit(50)",
              "lineno": 36,
              "name": "select.join.where.order_by.limit",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.path_cache, m.DeveloperSkill.score, m.DeveloperSkill.last_seen_at).join(m.DeveloperSkill, m.Skill.id == m.DeveloperSkill.skill_id).where(m.DeveloperSkill.developer_id == developer_id).order_by(m.DeveloperSkill.score.desc())",
              "lineno": 36,
              "name": "select.join.where.order_by",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.path_cache, m.DeveloperSkill.score, m.DeveloperSkill.last_seen_at).join(m.DeveloperSkill, m.Skill.id == m.DeveloperSkill.skill_id).where(m.DeveloperSkill.developer_id == developer_id)",
              "lineno": 36,
              "name": "select.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.path_cache, m.DeveloperSkill.score, m.DeveloperSkill.last_seen_at).join(m.DeveloperSkill, m.Skill.id == m.DeveloperSkill.skill_id)",
              "lineno": 36,
              "name": "select.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.path_cache, m.DeveloperSkill.score, m.DeveloperSkill.last_seen_at)",
              "lineno": 36,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "m.DeveloperSkill.score.desc()",
              "lineno": 39,
              "name": "m.DeveloperSkill.score.desc",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.execute(stmt).all()",
              "lineno": 42,
              "name": "db.execute.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(stmt)",
              "lineno": 42,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SkillEntry(path=row[0], score=float(row[1]), last_seen=row[2] if row[2] else None)",
              "lineno": 44,
              "name": "SkillEntry",
              "resolved_module": "app.domain.schemas.SkillEntry"
            },
            {
              "category": "internal",
              "display": "float(row[1])",
              "lineno": 44,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SkillProfileResp(developer_id=developer_id, skills=skills)",
              "lineno": 47,
              "name": "SkillProfileResp",
              "resolved_module": "app.domain.schemas.SkillProfileResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the developer skill profile within tenant boundaries.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "developer_profile",
          "qualname": "developer_profile",
          "return_annotation": "SkillProfileResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "SkillEntry",
          "source": "app.domain.schemas.SkillEntry",
          "type": "from"
        },
        {
          "alias": "SkillProfileResp",
          "source": "app.domain.schemas.SkillProfileResp",
          "type": "from"
        }
      ],
      "module": "app.ports.skills",
      "path": "Src/backend/app/ports/skills.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "user_claims.get('role')",
              "lineno": 23,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail='Only admins, product owners, or business analysts may request staffing recommendations')",
              "lineno": 25,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "user_claims.get('tenant_id')",
              "lineno": 27,
              "name": "user_claims.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=400, detail='Missing tenant context')",
              "lineno": 29,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.get(m.Project, project_id)",
              "lineno": 30,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='Project not found')",
              "lineno": 32,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "service",
              "display": "rank_candidates(db, tenant_id, project)",
              "lineno": 34,
              "name": "rank_candidates",
              "resolved_module": "app.application.staffing_service.rank_candidates"
            },
            {
              "category": "internal",
              "display": "StaffCandidate(**candidate)",
              "lineno": 35,
              "name": "StaffCandidate",
              "resolved_module": "app.domain.schemas.StaffCandidate"
            },
            {
              "category": "internal",
              "display": "StaffResp(project_id=project_id, candidates=candidates)",
              "lineno": 36,
              "name": "StaffResp",
              "resolved_module": "app.domain.schemas.StaffResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return staffing recommendations ensuring tenant access and schema conversion.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "recommend_staff",
          "qualname": "recommend_staff",
          "return_annotation": "StaffResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "rank_candidates",
          "source": "app.application.staffing_service.rank_candidates",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "StaffCandidate",
          "source": "app.domain.schemas.StaffCandidate",
          "type": "from"
        },
        {
          "alias": "StaffResp",
          "source": "app.domain.schemas.StaffResp",
          "type": "from"
        }
      ],
      "module": "app.ports.staffing",
      "path": "Src/backend/app/ports/staffing.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "ValueError('empty path')",
              "lineno": 35,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'>'.join(path)",
              "lineno": 36,
              "name": ">.join",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(select(m.Skill.id).where(m.Skill.path_cache == path_cache)).scalar()",
              "lineno": 37,
              "name": "db.execute.scalar",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(select(m.Skill.id).where(m.Skill.path_cache == path_cache))",
              "lineno": 37,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.Skill.id).where(m.Skill.path_cache == path_cache)",
              "lineno": 37,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.id)",
              "lineno": 37,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "len(path)",
              "lineno": 40,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES (:n, NULL, :p, :d)\\n            ON CONFLICT (path_cache) DO UPDATE\\n              SET name = EXCLUDED.name,\\n                  depth = EXCLUDED.depth\\n            '), {'n': leaf_name, 'p': path_cache, 'd': depth})",
              "lineno": 43,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES (:n, NULL, :p, :d)\\n            ON CONFLICT (path_cache) DO UPDATE\\n              SET name = EXCLUDED.name,\\n                  depth = EXCLUDED.depth\\n            ')",
              "lineno": 44,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "database",
              "display": "db.execute(select(m.Skill.id).where(m.Skill.path_cache == path_cache)).scalar()",
              "lineno": 55,
              "name": "db.execute.scalar",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(select(m.Skill.id).where(m.Skill.path_cache == path_cache))",
              "lineno": 55,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.Skill.id).where(m.Skill.path_cache == path_cache)",
              "lineno": 55,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Skill.id)",
              "lineno": 55,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ensure a hierarchical path exists in 'skill' table. Returns leaf skill_id.\n\nIn this prototype, we store only a denormalized 'path_cache' string and depth.\nParent linking is omitted for speed but can be added later by creating the full tree.",
          "endpoint": null,
          "is_async": false,
          "lineno": 27,
          "name": "ensure_skill_path",
          "qualname": "ensure_skill_path",
          "return_annotation": "int"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.execute(text('\\n            SELECT s.path_cache, ds.score\\n            FROM developer_skill ds\\n            JOIN skill s ON s.id = ds.skill_id\\n            WHERE ds.developer_id = :d\\n            '), {'d': developer_id}).all()",
              "lineno": 62,
              "name": "db.execute.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(text('\\n            SELECT s.path_cache, ds.score\\n            FROM developer_skill ds\\n            JOIN skill s ON s.id = ds.skill_id\\n            WHERE ds.developer_id = :d\\n            '), {'d': developer_id})",
              "lineno": 62,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('\\n            SELECT s.path_cache, ds.score\\n            FROM developer_skill ds\\n            JOIN skill s ON s.id = ds.skill_id\\n            WHERE ds.developer_id = :d\\n            ')",
              "lineno": 63,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "defaultdict(float)",
              "lineno": 73,
              "name": "defaultdict",
              "resolved_module": "collections.defaultdict"
            },
            {
              "category": "internal",
              "display": "max(agg[path], float(score))",
              "lineno": 75,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(score)",
              "lineno": 75,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(agg)",
              "lineno": 76,
              "name": "dict",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Collapses developer_skill rows into a dict keyed by path_cache with max score.",
          "endpoint": null,
          "is_async": false,
          "lineno": 58,
          "name": "rollup_developer_scores",
          "qualname": "rollup_developer_scores",
          "return_annotation": "Dict[str, float]"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.execute(text('\\n            SELECT s.path_cache, ps.importance\\n            FROM project_skill ps\\n            JOIN skill s ON s.id = ps.skill_id\\n            WHERE ps.project_id = :p\\n            '), {'p': project_id}).all()",
              "lineno": 82,
              "name": "db.execute.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.execute(text('\\n            SELECT s.path_cache, ps.importance\\n            FROM project_skill ps\\n            JOIN skill s ON s.id = ps.skill_id\\n            WHERE ps.project_id = :p\\n            '), {'p': project_id})",
              "lineno": 82,
              "name": "db.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('\\n            SELECT s.path_cache, ps.importance\\n            FROM project_skill ps\\n            JOIN skill s ON s.id = ps.skill_id\\n            WHERE ps.project_id = :p\\n            ')",
              "lineno": 83,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "float(importance)",
              "lineno": 93,
              "name": "float",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Returns a dict of required skills (path_cache -> importance weight).",
          "endpoint": null,
          "is_async": false,
          "lineno": 78,
          "name": "project_requirements",
          "qualname": "project_requirements",
          "return_annotation": "Dict[str, float]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "req_vec.items()",
              "lineno": 101,
              "name": "req_vec.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dev_vec.get(path, 0.0)",
              "lineno": 102,
              "name": "dev_vec.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(0.0, float(req_weight) - float(cur))",
              "lineno": 103,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(req_weight)",
              "lineno": 103,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(cur)",
              "lineno": 103,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gaps.append((path, gap))",
              "lineno": 105,
              "name": "gaps.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "gaps.sort(key=lambda x: x[1], reverse=True)",
              "lineno": 106,
              "name": "gaps.sort",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "For each required skill, compute gap = max(0, required - current).\nReturns a list sorted by largest gap first.",
          "endpoint": null,
          "is_async": false,
          "lineno": 95,
          "name": "compute_skill_gaps",
          "qualname": "compute_skill_gaps",
          "return_annotation": "List[Tuple[str, float]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "rollup_developer_scores(db, developer_id)",
              "lineno": 113,
              "name": "rollup_developer_scores",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "project_requirements(db, project_id)",
              "lineno": 114,
              "name": "project_requirements",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "compute_skill_gaps(dev_vec, req_vec)",
              "lineno": 115,
              "name": "compute_skill_gaps",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Convenience wrapper: compute gaps for a developer against a project's required skills.",
          "endpoint": null,
          "is_async": false,
          "lineno": 109,
          "name": "project_skill_gap",
          "qualname": "project_skill_gap",
          "return_annotation": "List[Tuple[str, float]]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "defaultdict",
          "source": "collections.defaultdict",
          "type": "from"
        }
      ],
      "module": "app.ports.talent_graph",
      "path": "Src/backend/app/ports/talent_graph.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "confluence_page_tool",
          "source": "app.agentic.tools.confluence_page_tool",
          "type": "from"
        },
        {
          "alias": "jira_epic_tool",
          "source": "app.agentic.tools.jira_epic_tool",
          "type": "from"
        },
        {
          "alias": "rag_search_tool",
          "source": "app.agentic.tools.rag_search_tool",
          "type": "from"
        },
        {
          "alias": "register_all_tools",
          "source": "app.agentic.tools.register_all_tools",
          "type": "from"
        }
      ],
      "module": "app.ports.tools",
      "path": "Src/backend/app/ports/tools.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "UserResp(id=user.id, username=user.username, role=user.role, tenant_id=user.tenant_id)",
              "lineno": 17,
              "name": "UserResp",
              "resolved_module": "app.domain.schemas.UserResp"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "_to_user_resp",
          "qualname": "_to_user_resp",
          "return_annotation": "UserResp"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.tenant_id == tenant_id).order_by(m.User.username.asc()).all()",
              "lineno": 24,
              "name": "db.query.filter.order_by.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.tenant_id == tenant_id).order_by(m.User.username.asc())",
              "lineno": 24,
              "name": "db.query.filter.order_by",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.tenant_id == tenant_id)",
              "lineno": 24,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User)",
              "lineno": 24,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User.username.asc()",
              "lineno": 24,
              "name": "m.User.username.asc",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "UserListResp(users=[_to_user_resp(row) for row in rows])",
              "lineno": 26,
              "name": "UserListResp",
              "resolved_module": "app.domain.schemas.UserListResp"
            },
            {
              "category": "internal",
              "display": "_to_user_resp(row)",
              "lineno": 26,
              "name": "_to_user_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return all users for the given tenant ordered by username.",
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "list_users",
          "qualname": "list_users",
          "return_annotation": "UserListResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=422, detail='Unsupported role supplied')",
              "lineno": 33,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.get(m.User, user_id)",
              "lineno": 35,
              "name": "db.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=404, detail='User not found')",
              "lineno": 37,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 40,
              "name": "db.commit",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.refresh(user)",
              "lineno": 41,
              "name": "db.refresh",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_to_user_resp(user)",
              "lineno": 42,
              "name": "_to_user_resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Update the role for a user within the same tenant.",
          "endpoint": null,
          "is_async": false,
          "lineno": 29,
          "name": "update_user_role",
          "qualname": "update_user_role",
          "return_annotation": "UserResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "UserListResp",
          "source": "app.domain.schemas.UserListResp",
          "type": "from"
        },
        {
          "alias": "UserResp",
          "source": "app.domain.schemas.UserResp",
          "type": "from"
        }
      ],
      "module": "app.ports.users",
      "path": "Src/backend/app/ports/users.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 19,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin'))",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin')",
              "lineno": 20,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "list_users(db, tenant_id=tenant_id)",
              "lineno": 25,
              "name": "list_users",
              "resolved_module": "app.ports.users.list_users"
            },
            {
              "category": "internal",
              "display": "router.get('/users', response_model=UserListResp)",
              "lineno": 17,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return all users for the caller's tenant.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "/users",
            "response_model": "UserListResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "list_tenant_users",
          "qualname": "list_tenant_users",
          "return_annotation": "UserListResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 32,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin'))",
              "lineno": 33,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin')",
              "lineno": 33,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "update_user_role(db, tenant_id=tenant_id, user_id=user_id, role=body.role)",
              "lineno": 38,
              "name": "update_user_role",
              "resolved_module": "app.ports.users.update_user_role"
            },
            {
              "category": "internal",
              "display": "router.patch('/users/{user_id}/role', response_model=UserResp)",
              "lineno": 28,
              "name": "router.patch",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.patch"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Update the role for the selected user in the tenant.",
          "endpoint": {
            "methods": [
              "PATCH"
            ],
            "path": "/users/{user_id}/role",
            "response_model": "UserResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 29,
          "name": "patch_user_role",
          "qualname": "patch_user_role",
          "return_annotation": "UserResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "UserListResp",
          "source": "app.domain.schemas.UserListResp",
          "type": "from"
        },
        {
          "alias": "UserResp",
          "source": "app.domain.schemas.UserResp",
          "type": "from"
        },
        {
          "alias": "UserRolePatchReq",
          "source": "app.domain.schemas.UserRolePatchReq",
          "type": "from"
        },
        {
          "alias": "list_users",
          "source": "app.ports.users.list_users",
          "type": "from"
        },
        {
          "alias": "update_user_role",
          "source": "app.ports.users.update_user_role",
          "type": "from"
        }
      ],
      "module": "app.routes.admin_user_routes",
      "path": "Src/backend/app/routes/admin_user_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/admin",
          "tags": [
            "admin"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(require_role(('Admin', 'PO', 'BA', 'Dev')))",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role(('Admin', 'PO', 'BA', 'Dev'))",
              "lineno": 20,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "create_plan(task_prompt=req.prompt, allowed_tools=req.allowed_tools)",
              "lineno": 25,
              "name": "create_plan",
              "resolved_module": "app.ports.planner.create_plan"
            },
            {
              "category": "internal",
              "display": "plan.get('steps', [])",
              "lineno": 28,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('tool')",
              "lineno": 29,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "overrides.get(tool_name)",
              "lineno": 32,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(override_args, dict)",
              "lineno": 33,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.setdefault('args', {})",
              "lineno": 35,
              "name": "step.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "override_args.items()",
              "lineno": 36,
              "name": "override_args.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "execute_plan(plan, user_claims=user)",
              "lineno": 39,
              "name": "execute_plan",
              "resolved_module": "app.ports.planner.execute_plan"
            },
            {
              "category": "internal",
              "display": "isinstance(detail, dict)",
              "lineno": 42,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "detail.get('code')",
              "lineno": 42,
              "name": "detail.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "JSONResponse(status_code=exc.status_code, content=detail)",
              "lineno": 43,
              "name": "JSONResponse",
              "resolved_module": "fastapi.responses.JSONResponse"
            },
            {
              "category": "internal",
              "display": "result.get('output', {}).get('notes')",
              "lineno": 46,
              "name": "result.get.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "result.get('output', {})",
              "lineno": 46,
              "name": "result.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "result.get('artifacts', {})",
              "lineno": 50,
              "name": "result.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "result.get('output', {})",
              "lineno": 51,
              "name": "result.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "AgentQueryResp(**resp_kwargs)",
              "lineno": 55,
              "name": "AgentQueryResp",
              "resolved_module": "app.domain.schemas.AgentQueryResp"
            },
            {
              "category": "internal",
              "display": "router.post('/query', response_model=AgentQueryResp)",
              "lineno": 17,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(require_role(('Admin', 'PO', 'BA', 'Dev')))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Generate and execute an agentic plan for the provided prompt.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/query",
            "response_model": "AgentQueryResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "agent_query",
          "qualname": "agent_query",
          "return_annotation": "AgentQueryResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "JSONResponse",
          "source": "fastapi.responses.JSONResponse",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "AgentQueryReq",
          "source": "app.domain.schemas.AgentQueryReq",
          "type": "from"
        },
        {
          "alias": "AgentQueryResp",
          "source": "app.domain.schemas.AgentQueryResp",
          "type": "from"
        },
        {
          "alias": "create_plan",
          "source": "app.ports.planner.create_plan",
          "type": "from"
        },
        {
          "alias": "execute_plan",
          "source": "app.ports.planner.execute_plan",
          "type": "from"
        }
      ],
      "module": "app.routes.agent_routes",
      "path": "Src/backend/app/routes/agent_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/agent",
          "tags": [
            "agent"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 29,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO'))",
              "lineno": 30,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO')",
              "lineno": 30,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "create_assignment(db, tenant_id=tenant_id, developer_id=body.developer_id, project_id=body.project_id, role=body.role, start_date=body.start_date)",
              "lineno": 35,
              "name": "create_assignment",
              "resolved_module": "app.ports.assignments.create_assignment"
            },
            {
              "category": "internal",
              "display": "router.post('/assignments', response_model=AssignmentResp)",
              "lineno": 26,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Create a new assignment for a developer.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/assignments",
            "response_model": "AssignmentResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 27,
          "name": "post_assignment",
          "qualname": "post_assignment",
          "return_annotation": "AssignmentResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 49,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO'))",
              "lineno": 50,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO')",
              "lineno": 50,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "update_assignment(db, tenant_id=tenant_id, assignment_id=assignment_id, role=body.role, status=body.status, end_date=body.end_date)",
              "lineno": 55,
              "name": "update_assignment",
              "resolved_module": "app.ports.assignments.update_assignment"
            },
            {
              "category": "internal",
              "display": "router.patch('/assignments/{assignment_id}', response_model=AssignmentResp)",
              "lineno": 45,
              "name": "router.patch",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.patch"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Update details of an existing assignment.",
          "endpoint": {
            "methods": [
              "PATCH"
            ],
            "path": "/assignments/{assignment_id}",
            "response_model": "AssignmentResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 46,
          "name": "patch_assignment",
          "qualname": "patch_assignment",
          "return_annotation": "AssignmentResp"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 68,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA'))",
              "lineno": 69,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA')",
              "lineno": 69,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "list_assignments_for_project(db, tenant_id=tenant_id, project_id=project_id)",
              "lineno": 74,
              "name": "list_assignments_for_project",
              "resolved_module": "app.ports.assignments.list_assignments_for_project"
            },
            {
              "category": "internal",
              "display": "router.get('/projects/{project_id}/assignments', response_model=AssignmentListResp)",
              "lineno": 65,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return assignments for the specified project.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "/projects/{project_id}/assignments",
            "response_model": "AssignmentListResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 66,
          "name": "get_project_assignments",
          "qualname": "get_project_assignments",
          "return_annotation": "AssignmentListResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "AssignmentCreateReq",
          "source": "app.domain.schemas.AssignmentCreateReq",
          "type": "from"
        },
        {
          "alias": "AssignmentListResp",
          "source": "app.domain.schemas.AssignmentListResp",
          "type": "from"
        },
        {
          "alias": "AssignmentResp",
          "source": "app.domain.schemas.AssignmentResp",
          "type": "from"
        },
        {
          "alias": "AssignmentUpdateReq",
          "source": "app.domain.schemas.AssignmentUpdateReq",
          "type": "from"
        },
        {
          "alias": "create_assignment",
          "source": "app.ports.assignments.create_assignment",
          "type": "from"
        },
        {
          "alias": "list_assignments_for_project",
          "source": "app.ports.assignments.list_assignments_for_project",
          "type": "from"
        },
        {
          "alias": "update_assignment",
          "source": "app.ports.assignments.update_assignment",
          "type": "from"
        }
      ],
      "module": "app.routes.assignment_routes",
      "path": "Src/backend/app/routes/assignment_routes.py",
      "routers": [
        {
          "lineno": 23,
          "name": "router",
          "prefix": null,
          "tags": [
            "assignments"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 21,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA'))",
              "lineno": 22,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA')",
              "lineno": 22,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "list_audit_entries(db, user_claims=_user, actor=actor, limit=limit)",
              "lineno": 26,
              "name": "list_audit_entries",
              "resolved_module": "app.ports.audit.list_audit_entries"
            },
            {
              "category": "internal",
              "display": "router.get('', response_model=AuditResp)",
              "lineno": 17,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
              "parameter": "_user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return recent audit log entries filtered by actor when provided.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "",
            "response_model": "AuditResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "audit",
          "qualname": "audit",
          "return_annotation": "AuditResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "AuditResp",
          "source": "app.domain.schemas.AuditResp",
          "type": "from"
        },
        {
          "alias": "list_audit_entries",
          "source": "app.ports.audit.list_audit_entries",
          "type": "from"
        }
      ],
      "module": "app.routes.audit_routes",
      "path": "Src/backend/app/routes/audit_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/audit",
          "tags": [
            "audit"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 22,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.username == username).one_or_none()",
              "lineno": 25,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.username == username)",
              "lineno": 25,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User)",
              "lineno": 25,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=401, detail='Invalid credentials')",
              "lineno": 27,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.user_id == user.id, m.Developer.tenant_id == tenant_id).one_or_none()",
              "lineno": 33,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.user_id == user.id, m.Developer.tenant_id == tenant_id)",
              "lineno": 33,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer)",
              "lineno": 33,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key).filter(m.Project.tenant_id == tenant_id).all()",
              "lineno": 40,
              "name": "db.query.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key).filter(m.Project.tenant_id == tenant_id)",
              "lineno": 40,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key)",
              "lineno": 40,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "accessible.update(keys)",
              "lineno": 41,
              "name": "accessible.update",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id).filter(m.Assignment.developer_id == developer.id, m.Project.tenant_id == tenant_id, or_(m.Assignment.status.is_(None), m.Assignment.status == 'active')).all()",
              "lineno": 46,
              "name": "db.query.join.filter.all",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id).filter(m.Assignment.developer_id == developer.id, m.Project.tenant_id == tenant_id, or_(m.Assignment.status.is_(None), m.Assignment.status == 'active'))",
              "lineno": 46,
              "name": "db.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key).join(m.Assignment, m.Assignment.project_id == m.Project.id)",
              "lineno": 46,
              "name": "db.query.join",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project.key)",
              "lineno": 46,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "or_(m.Assignment.status.is_(None), m.Assignment.status == 'active')",
              "lineno": 51,
              "name": "or_",
              "resolved_module": "sqlalchemy.or_"
            },
            {
              "category": "internal",
              "display": "m.Assignment.status.is_(None)",
              "lineno": 51,
              "name": "m.Assignment.status.is_",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "accessible.update(keys)",
              "lineno": 56,
              "name": "accessible.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(accessible)",
              "lineno": 58,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(time.time())",
              "lineno": 59,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "time.time()",
              "lineno": 59,
              "name": "time.time",
              "resolved_module": "time"
            },
            {
              "category": "internal",
              "display": "jwt.encode(payload, settings.jwt_secret, algorithm='HS256')",
              "lineno": 73,
              "name": "jwt.encode",
              "resolved_module": "jwt"
            },
            {
              "category": "internal",
              "display": "TokenResp(access_token=token)",
              "lineno": 74,
              "name": "TokenResp",
              "resolved_module": "app.domain.schemas.TokenResp"
            },
            {
              "category": "internal",
              "display": "router.post('/token', response_model=TokenResp)",
              "lineno": 21,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            }
          ],
          "docstring": "Return a JWT sourced from the database user record.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/token",
            "response_model": "TokenResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 22,
          "name": "token",
          "qualname": "token",
          "return_annotation": "TokenResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "or_",
          "source": "sqlalchemy.or_",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "TokenResp",
          "source": "app.domain.schemas.TokenResp",
          "type": "from"
        }
      ],
      "module": "app.routes.auth_routes",
      "path": "Src/backend/app/routes/auth_routes.py",
      "routers": [
        {
          "lineno": 18,
          "name": "router",
          "prefix": "/auth",
          "tags": [
            "auth"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "HTTPException(status_code=500, detail='GitHub webhook secret is not configured')",
              "lineno": 22,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "hash_bytes(body, algo='sha256', key=settings.github_webhook_secret)",
              "lineno": 24,
              "name": "hash_bytes",
              "resolved_module": "app.utils.hashing.hash_bytes"
            },
            {
              "category": "internal",
              "display": "hmac.compare_digest(expected, signature)",
              "lineno": 26,
              "name": "hmac.compare_digest",
              "resolved_module": "hmac"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Validate the ``X-Hub-Signature-256`` header using HMAC-SHA256.",
          "endpoint": null,
          "is_async": false,
          "lineno": 18,
          "name": "_verify_signature",
          "qualname": "_verify_signature",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "request.body()",
              "lineno": 33,
              "name": "request.body",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "request.headers.get('X-Hub-Signature-256')",
              "lineno": 34,
              "name": "request.headers.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_verify_signature(signature, body)",
              "lineno": 36,
              "name": "_verify_signature",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=401, detail='Invalid signature')",
              "lineno": 37,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "request_key(dict(request.headers), body, prefix='webhook')",
              "lineno": 39,
              "name": "request_key",
              "resolved_module": "app.utils.idempotency.request_key"
            },
            {
              "category": "internal",
              "display": "dict(request.headers)",
              "lineno": 39,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "acquire_once(idem_key, ttl_seconds=900)",
              "lineno": 40,
              "name": "acquire_once",
              "resolved_module": "app.utils.idempotency.acquire_once"
            },
            {
              "category": "internal",
              "display": "request.headers.get('X-GitHub-Event', 'unknown')",
              "lineno": 43,
              "name": "request.headers.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "request.json()",
              "lineno": 44,
              "name": "request.json",
              "resolved_module": null
            },
            {
              "category": "queue",
              "display": "enqueue_github_event({'event': event, 'payload': payload})",
              "lineno": 45,
              "name": "enqueue_github_event",
              "resolved_module": "worker.job_queue.enqueue_github_event"
            },
            {
              "category": "internal",
              "display": "router.post('/github')",
              "lineno": 29,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [],
          "docstring": "Receive a GitHub webhook and enqueue it for background processing.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/github",
            "response_model": null,
            "router": "router",
            "status_code": null
          },
          "is_async": true,
          "lineno": 30,
          "name": "github",
          "qualname": "github",
          "return_annotation": "dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "hmac",
          "source": "hmac",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "fastapi.Request",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "hash_bytes",
          "source": "app.utils.hashing.hash_bytes",
          "type": "from"
        },
        {
          "alias": "acquire_once",
          "source": "app.utils.idempotency.acquire_once",
          "type": "from"
        },
        {
          "alias": "request_key",
          "source": "app.utils.idempotency.request_key",
          "type": "from"
        },
        {
          "alias": "enqueue_github_event",
          "source": "worker.job_queue.enqueue_github_event",
          "type": "from"
        }
      ],
      "module": "app.routes.github_routes",
      "path": "Src/backend/app/routes/github_routes.py",
      "routers": [
        {
          "lineno": 15,
          "name": "router",
          "prefix": "/events",
          "tags": [
            "events"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "request.body()",
              "lineno": 18,
              "name": "request.body",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(request.headers)",
              "lineno": 19,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "request_key(headers, body, prefix='webhook')",
              "lineno": 20,
              "name": "request_key",
              "resolved_module": "app.utils.idempotency.request_key"
            },
            {
              "category": "internal",
              "display": "acquire_once(idem_key, ttl_seconds=900)",
              "lineno": 21,
              "name": "acquire_once",
              "resolved_module": "app.utils.idempotency.acquire_once"
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=500, detail='Jira integration not configured')",
              "lineno": 25,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "request.json()",
              "lineno": 27,
              "name": "request.json",
              "resolved_module": null
            },
            {
              "category": "queue",
              "display": "enqueue_jira_event({'event': request.headers.get('X-Event-Key'), 'payload': payload})",
              "lineno": 28,
              "name": "enqueue_jira_event",
              "resolved_module": "worker.job_queue.enqueue_jira_event"
            },
            {
              "category": "internal",
              "display": "request.headers.get('X-Event-Key')",
              "lineno": 28,
              "name": "request.headers.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "router.post('/jira')",
              "lineno": 16,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/jira",
            "response_model": null,
            "router": "router",
            "status_code": null
          },
          "is_async": true,
          "lineno": 17,
          "name": "jira",
          "qualname": "jira",
          "return_annotation": "dict[str, Any]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "Request",
          "source": "fastapi.Request",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "acquire_once",
          "source": "app.utils.idempotency.acquire_once",
          "type": "from"
        },
        {
          "alias": "request_key",
          "source": "app.utils.idempotency.request_key",
          "type": "from"
        },
        {
          "alias": "enqueue_jira_event",
          "source": "worker.job_queue.enqueue_jira_event",
          "type": "from"
        }
      ],
      "module": "app.routes.jira_routes",
      "path": "Src/backend/app/routes/jira_routes.py",
      "routers": [
        {
          "lineno": 13,
          "name": "router",
          "prefix": "/events",
          "tags": [
            "events"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO'))",
              "lineno": 21,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO')",
              "lineno": 21,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "generate_plan(db, user_claims=user, developer_id=req.developer_id, project_id=req.project_id, autonomy=req.autonomy)",
              "lineno": 25,
              "name": "generate_plan",
              "resolved_module": "app.ports.onboarding.generate_plan"
            },
            {
              "category": "internal",
              "display": "router.post('/generate', response_model=OnboardingResp)",
              "lineno": 17,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Generate an onboarding plan for the requested developer.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "/generate",
            "response_model": "OnboardingResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "generate",
          "qualname": "generate",
          "return_annotation": "OnboardingResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "OnboardingReq",
          "source": "app.domain.schemas.OnboardingReq",
          "type": "from"
        },
        {
          "alias": "OnboardingResp",
          "source": "app.domain.schemas.OnboardingResp",
          "type": "from"
        },
        {
          "alias": "generate_plan",
          "source": "app.ports.onboarding.generate_plan",
          "type": "from"
        }
      ],
      "module": "app.routes.onboarding_routes",
      "path": "Src/backend/app/routes/onboarding_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/onboarding",
          "tags": [
            "onboarding"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 19,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
              "lineno": 20,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "list_projects(db, tenant_id=tenant_id)",
              "lineno": 25,
              "name": "list_projects",
              "resolved_module": "app.ports.projects.list_projects"
            },
            {
              "category": "internal",
              "display": "router.get('', response_model=List[ProjectResp])",
              "lineno": 17,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return all projects for the caller's tenant.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "",
            "response_model": "List[ProjectResp]",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "list_tenant_projects",
          "qualname": "list_tenant_projects",
          "return_annotation": "List[ProjectResp]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 31,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "lineno": 32,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
              "lineno": 32,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "get_project_by_key(db, tenant_id=tenant_id, key=key)",
              "lineno": 37,
              "name": "get_project_by_key",
              "resolved_module": "app.ports.projects.get_project_by_key"
            },
            {
              "category": "internal",
              "display": "router.get('/{key}', response_model=ProjectResp)",
              "lineno": 28,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return a single project referenced by key.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "/{key}",
            "response_model": "ProjectResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 29,
          "name": "get_project",
          "qualname": "get_project",
          "return_annotation": "ProjectResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "ProjectResp",
          "source": "app.domain.schemas.ProjectResp",
          "type": "from"
        },
        {
          "alias": "get_project_by_key",
          "source": "app.ports.projects.get_project_by_key",
          "type": "from"
        },
        {
          "alias": "list_projects",
          "source": "app.ports.projects.list_projects",
          "type": "from"
        }
      ],
      "module": "app.routes.project_read_routes",
      "path": "Src/backend/app/routes/project_read_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/projects",
          "tags": [
            "projects-read"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 22,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO'))",
              "lineno": 23,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO')",
              "lineno": 23,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "create_project_port(db, tenant_id=tenant_id, key=key, name=name, description=description)",
              "lineno": 28,
              "name": "create_project_port",
              "resolved_module": "app.ports.projects.create_project"
            },
            {
              "category": "internal",
              "display": "router.post('', response_model=ProjectResp)",
              "lineno": 17,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Create a new project for the tenant.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "",
            "response_model": "ProjectResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "create_project",
          "qualname": "create_project",
          "return_annotation": "ProjectResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "ProjectResp",
          "source": "app.domain.schemas.ProjectResp",
          "type": "from"
        },
        {
          "alias": "create_project_port",
          "source": "app.ports.projects.create_project",
          "type": "from"
        }
      ],
      "module": "app.routes.project_routes",
      "path": "Src/backend/app/routes/project_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/projects",
          "tags": [
            "projects"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "lineno": 10,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA', 'Dev')",
              "lineno": 10,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "user.get('tenant_id')",
              "lineno": 11,
              "name": "user.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user.get('accessible_projects', [])",
              "lineno": 12,
              "name": "user.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "HTTPException(status_code=403, detail=f'Access denied to project: {t}')",
              "lineno": 16,
              "name": "HTTPException",
              "resolved_module": "fastapi.HTTPException"
            },
            {
              "category": "internal",
              "display": "rag_search(tenant_id=tenant_id, user_claims=user, query=req.query, targets=targets, k=req.k, strategy=req.strategy)",
              "lineno": 18,
              "name": "rag_search",
              "resolved_module": "app.ports.retriever.rag_search"
            },
            {
              "category": "internal",
              "display": "api_response(payload)",
              "lineno": 26,
              "name": "api_response",
              "resolved_module": "app.ports.retriever.api_response"
            },
            {
              "category": "internal",
              "display": "router.post('', response_model=RetrieveResp)",
              "lineno": 9,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA', 'Dev'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": null,
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "",
            "response_model": "RetrieveResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 10,
          "name": "retrieve",
          "qualname": "retrieve",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "RetrieveReq",
          "source": "app.domain.schemas.RetrieveReq",
          "type": "from"
        },
        {
          "alias": "RetrieveResp",
          "source": "app.domain.schemas.RetrieveResp",
          "type": "from"
        },
        {
          "alias": "rag_search",
          "source": "app.ports.retriever.rag_search",
          "type": "from"
        },
        {
          "alias": "api_response",
          "source": "app.ports.retriever.api_response",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        }
      ],
      "module": "app.routes.retrieve_routes",
      "path": "Src/backend/app/routes/retrieve_routes.py",
      "routers": [
        {
          "lineno": 7,
          "name": "router",
          "prefix": "/retrieve",
          "tags": [
            "retrieve"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(get_current_user)",
              "lineno": 21,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "developer_profile(db, user_claims=_user, developer_id=developer_id)",
              "lineno": 25,
              "name": "developer_profile",
              "resolved_module": "app.ports.skills.developer_profile"
            },
            {
              "category": "internal",
              "display": "router.get('/profile', response_model=SkillProfileResp)",
              "lineno": 17,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(get_current_user)",
              "parameter": "_user",
              "provider": "get_current_user"
            }
          ],
          "docstring": "Return the skill profile for a developer.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "/profile",
            "response_model": "SkillProfileResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "profile",
          "qualname": "profile",
          "return_annotation": "SkillProfileResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_current_user",
          "source": "app.deps.get_current_user",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "SkillProfileResp",
          "source": "app.domain.schemas.SkillProfileResp",
          "type": "from"
        },
        {
          "alias": "developer_profile",
          "source": "app.ports.skills.developer_profile",
          "type": "from"
        }
      ],
      "module": "app.routes.skills_routes",
      "path": "Src/backend/app/routes/skills_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/skills",
          "tags": [
            "skills"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 20,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO', 'BA'))",
              "lineno": 21,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO', 'BA')",
              "lineno": 21,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "recommend_staff_port(db, user_claims=user, project_id=project_id)",
              "lineno": 25,
              "name": "recommend_staff_port",
              "resolved_module": "app.ports.staffing.recommend_staff"
            },
            {
              "category": "internal",
              "display": "router.get('/recommend', response_model=StaffResp)",
              "lineno": 17,
              "name": "router.get",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.get"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO', 'BA'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Return ranked developer candidates for the project.",
          "endpoint": {
            "methods": [
              "GET"
            ],
            "path": "/recommend",
            "response_model": "StaffResp",
            "router": "router",
            "status_code": null
          },
          "is_async": false,
          "lineno": 18,
          "name": "recommend",
          "qualname": "recommend",
          "return_annotation": "StaffResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "StaffResp",
          "source": "app.domain.schemas.StaffResp",
          "type": "from"
        },
        {
          "alias": "recommend_staff_port",
          "source": "app.ports.staffing.recommend_staff",
          "type": "from"
        }
      ],
      "module": "app.routes.staff_routes",
      "path": "Src/backend/app/routes/staff_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/staff",
          "tags": [
            "staff"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Form(...)",
              "lineno": 19,
              "name": "Form",
              "resolved_module": "fastapi.Form"
            },
            {
              "category": "internal",
              "display": "File(...)",
              "lineno": 20,
              "name": "File",
              "resolved_module": "fastapi.File"
            },
            {
              "category": "internal",
              "display": "Depends(get_db)",
              "lineno": 21,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "Depends(require_role('Admin', 'PO'))",
              "lineno": 22,
              "name": "Depends",
              "resolved_module": "fastapi.Depends"
            },
            {
              "category": "internal",
              "display": "require_role('Admin', 'PO')",
              "lineno": 22,
              "name": "require_role",
              "resolved_module": "app.deps.require_role"
            },
            {
              "category": "internal",
              "display": "file.read()",
              "lineno": 26,
              "name": "file.read",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ingest_upload(db, user_claims=user, project_key=project_key, file_bytes=data, filename=file.filename or '')",
              "lineno": 27,
              "name": "ingest_upload",
              "resolved_module": "app.ports.ingestion.ingest_upload"
            },
            {
              "category": "internal",
              "display": "router.post('', response_model=UploadResp)",
              "lineno": 17,
              "name": "router.post",
              "resolved_module": null
            }
          ],
          "decorators": [
            "router.post"
          ],
          "dependencies": [
            {
              "default_repr": "Depends(get_db)",
              "parameter": "db",
              "provider": "get_db"
            },
            {
              "default_repr": "Depends(require_role('Admin', 'PO'))",
              "parameter": "user",
              "provider": "require_role"
            }
          ],
          "docstring": "Ingest an uploaded file for the specified project.",
          "endpoint": {
            "methods": [
              "POST"
            ],
            "path": "",
            "response_model": "UploadResp",
            "router": "router",
            "status_code": null
          },
          "is_async": true,
          "lineno": 18,
          "name": "upload",
          "qualname": "upload",
          "return_annotation": "UploadResp"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "APIRouter",
          "source": "fastapi.APIRouter",
          "type": "from"
        },
        {
          "alias": "Depends",
          "source": "fastapi.Depends",
          "type": "from"
        },
        {
          "alias": "File",
          "source": "fastapi.File",
          "type": "from"
        },
        {
          "alias": "Form",
          "source": "fastapi.Form",
          "type": "from"
        },
        {
          "alias": "UploadFile",
          "source": "fastapi.UploadFile",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "get_db",
          "source": "app.deps.get_db",
          "type": "from"
        },
        {
          "alias": "require_role",
          "source": "app.deps.require_role",
          "type": "from"
        },
        {
          "alias": "UploadResp",
          "source": "app.domain.schemas.UploadResp",
          "type": "from"
        },
        {
          "alias": "ingest_upload",
          "source": "app.ports.ingestion.ingest_upload",
          "type": "from"
        }
      ],
      "module": "app.routes.upload_routes",
      "path": "Src/backend/app/routes/upload_routes.py",
      "routers": [
        {
          "lineno": 14,
          "name": "router",
          "prefix": "/upload",
          "tags": [
            "upload"
          ]
        }
      ]
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "PublishJiraRequest",
          "source": "publish.PublishJiraRequest",
          "type": "from"
        },
        {
          "alias": "PublishConfluenceRequest",
          "source": "publish.PublishConfluenceRequest",
          "type": "from"
        },
        {
          "alias": "IssueType",
          "source": "publish.IssueType",
          "type": "from"
        }
      ],
      "module": "app.schemas.__init__",
      "path": "Src/backend/app/schemas/__init__.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 12,
          "methods": [
            "_strip_optionals",
            "_strip_summary",
            "_validate"
          ],
          "name": "PublishJiraRequest"
        },
        {
          "docstring": null,
          "lineno": 56,
          "methods": [
            "_strip_optional_fields",
            "_strip_title",
            "_validate"
          ],
          "name": "PublishConfluenceRequest"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Literal",
          "source": "typing.Literal",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "BaseModel",
          "source": "pydantic.BaseModel",
          "type": "from"
        },
        {
          "alias": "Field",
          "source": "pydantic.Field",
          "type": "from"
        },
        {
          "alias": "field_validator",
          "source": "pydantic.field_validator",
          "type": "from"
        },
        {
          "alias": "model_validator",
          "source": "pydantic.model_validator",
          "type": "from"
        }
      ],
      "module": "app.schemas.publish",
      "path": "Src/backend/app/schemas/publish.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "app.scripts.__init__",
      "path": "Src/backend/app/scripts/__init__.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Raised when seeding fails due to bad references or invalid data.",
          "lineno": 38,
          "methods": [],
          "name": "SeederError"
        },
        {
          "docstring": null,
          "lineno": 43,
          "methods": [],
          "name": "SeederContext"
        },
        {
          "docstring": null,
          "lineno": 50,
          "methods": [
            "note"
          ],
          "name": "FileStats"
        },
        {
          "docstring": null,
          "lineno": 71,
          "methods": [],
          "name": "_CSVModel"
        },
        {
          "docstring": null,
          "lineno": 75,
          "methods": [],
          "name": "TenantRow"
        },
        {
          "docstring": null,
          "lineno": 80,
          "methods": [],
          "name": "ProjectRow"
        },
        {
          "docstring": null,
          "lineno": 86,
          "methods": [],
          "name": "UserRow"
        },
        {
          "docstring": null,
          "lineno": 92,
          "methods": [],
          "name": "DeveloperRow"
        },
        {
          "docstring": null,
          "lineno": 97,
          "methods": [],
          "name": "AssignmentRow"
        },
        {
          "docstring": null,
          "lineno": 104,
          "methods": [],
          "name": "SkillRow"
        },
        {
          "docstring": null,
          "lineno": 110,
          "methods": [],
          "name": "ProjectSkillRow"
        },
        {
          "docstring": null,
          "lineno": 116,
          "methods": [],
          "name": "DeveloperSkillRow"
        },
        {
          "docstring": "Helper encapsulating common lookup and persistence helpers.",
          "lineno": 127,
          "methods": [
            "__init__",
            "remember_user",
            "remember_project",
            "remember_developer",
            "remember_skill",
            "add",
            "flush",
            "get_user",
            "get_project",
            "get_developer",
            "get_skill"
          ],
          "name": "Seeder"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')",
              "lineno": 62,
              "name": "datetime.now.strftime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 62,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 61,
          "name": "_iso_timestamp",
          "qualname": "_iso_timestamp",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "re.sub('[^a-z0-9]+', '-', value.strip().lower())",
              "lineno": 66,
              "name": "re.sub",
              "resolved_module": "re"
            },
            {
              "category": "internal",
              "display": "value.strip().lower()",
              "lineno": 66,
              "name": "value.strip.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 66,
              "name": "value.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "slug.strip('-')",
              "lineno": 67,
              "name": "slug.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip().lower()",
              "lineno": 68,
              "name": "value.strip.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 68,
              "name": "value.strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 65,
          "name": "_slugify",
          "qualname": "_slugify",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "path.exists()",
              "lineno": 201,
              "name": "path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.strip()",
              "lineno": 206,
              "name": "line.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.lstrip().startswith('#')",
              "lineno": 208,
              "name": "line.lstrip.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.lstrip()",
              "lineno": 208,
              "name": "line.lstrip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "path.open('r', encoding='utf-8')",
              "lineno": 212,
              "name": "path.open",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "csv.DictReader(_line_iter(handle))",
              "lineno": 213,
              "name": "csv.DictReader",
              "resolved_module": "csv"
            },
            {
              "category": "internal",
              "display": "_line_iter(handle)",
              "lineno": 213,
              "name": "_line_iter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f'{path}: missing header row')",
              "lineno": 215,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "model.model_fields.items()",
              "lineno": 217,
              "name": "model.model_fields.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "field.is_required()",
              "lineno": 217,
              "name": "field.is_required",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "required_columns.difference(reader.fieldnames)",
              "lineno": 218,
              "name": "required_columns.difference",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f'{path}: missing required columns {sorted(missing)}')",
              "lineno": 220,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(missing)",
              "lineno": 220,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw.items()",
              "lineno": 225,
              "name": "raw.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 229,
              "name": "value.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "rows.append(model.model_validate(cleaned))",
              "lineno": 232,
              "name": "rows.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "model.model_validate(cleaned)",
              "lineno": 232,
              "name": "model.model_validate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f'{path}: line {reader.line_num} validation error: {exc}')",
              "lineno": 234,
              "name": "SeederError",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 200,
          "name": "_read_csv",
          "qualname": "_read_csv",
          "return_annotation": "List[_CSVModel]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 239,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Tenant).filter(m.Tenant.id == row.id).one_or_none()",
              "lineno": 241,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Tenant).filter(m.Tenant.id == row.id)",
              "lineno": 241,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Tenant)",
              "lineno": 241,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Tenant(id=row.id, name=row.name)",
              "lineno": 243,
              "name": "m.Tenant",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(tenant)",
              "lineno": 244,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.flush()",
              "lineno": 245,
              "name": "seeder.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 246,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated')",
              "lineno": 251,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('skipped')",
              "lineno": 253,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 238,
          "name": "_seed_tenants",
          "qualname": "_seed_tenants",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 258,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Project).filter(m.Project.key == row.key, m.Project.tenant_id == tenant_id).one_or_none()",
              "lineno": 262,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Project).filter(m.Project.key == row.key, m.Project.tenant_id == tenant_id)",
              "lineno": 262,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Project)",
              "lineno": 262,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Project(key=row.key, name=row.name, description=row.description, tenant_id=tenant_id)",
              "lineno": 267,
              "name": "m.Project",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(project)",
              "lineno": 268,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.flush()",
              "lineno": 269,
              "name": "seeder.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_project(project)",
              "lineno": 270,
              "name": "seeder.remember_project",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 271,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated' if changed else 'skipped')",
              "lineno": 283,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 257,
          "name": "_seed_projects",
          "qualname": "_seed_projects",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 291,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: role '{role}' is not permitted (allowed: {_ALLOWED_ROLES})\")",
              "lineno": 296,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.User).filter(m.User.username == row.username).one_or_none()",
              "lineno": 297,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.User).filter(m.User.username == row.username)",
              "lineno": 297,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.User)",
              "lineno": 297,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User(username=row.username, role=role, password_hash=row.password_hash, tenant_id=tenant_id)",
              "lineno": 299,
              "name": "m.User",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(user)",
              "lineno": 300,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.flush()",
              "lineno": 301,
              "name": "seeder.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_user(user)",
              "lineno": 302,
              "name": "seeder.remember_user",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 303,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_user(existing)",
              "lineno": 319,
              "name": "seeder.remember_user",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated' if changed else 'skipped')",
              "lineno": 320,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 290,
          "name": "_seed_users",
          "qualname": "_seed_users",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 325,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_user(row.username)",
              "lineno": 328,
              "name": "seeder.get_user",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: developer username '{row.username}' not found; seed users first\")",
              "lineno": 330,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Developer).filter(m.Developer.user_id == user.id).one_or_none()",
              "lineno": 331,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Developer).filter(m.Developer.user_id == user.id)",
              "lineno": 331,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Developer)",
              "lineno": 331,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Developer(user_id=user.id, display_name=row.display_name, tenant_id=tenant_id)",
              "lineno": 333,
              "name": "m.Developer",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(developer)",
              "lineno": 334,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.flush()",
              "lineno": 335,
              "name": "seeder.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_developer(row.username, developer)",
              "lineno": 336,
              "name": "seeder.remember_developer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 337,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_developer(row.username, existing)",
              "lineno": 348,
              "name": "seeder.remember_developer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated' if changed else 'skipped')",
              "lineno": 349,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 324,
          "name": "_seed_developers",
          "qualname": "_seed_developers",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 354,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_developer(row.username)",
              "lineno": 357,
              "name": "seeder.get_developer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: assignment username '{row.username}' not found\")",
              "lineno": 359,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_project(row.project_key)",
              "lineno": 360,
              "name": "seeder.get_project",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: project '{row.project_key}' not found for tenant '{tenant_id}'\")",
              "lineno": 362,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Assignment).filter(m.Assignment.developer_id == developer.id, m.Assignment.project_id == project.id).one_or_none()",
              "lineno": 364,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Assignment).filter(m.Assignment.developer_id == developer.id, m.Assignment.project_id == project.id)",
              "lineno": 364,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.Assignment)",
              "lineno": 364,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Assignment(developer_id=developer.id, project_id=project.id, role=row.role, status=desired_status)",
              "lineno": 370,
              "name": "m.Assignment",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(assignment)",
              "lineno": 376,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 377,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated' if changed else 'skipped')",
              "lineno": 389,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 353,
          "name": "_seed_assignments",
          "qualname": "_seed_assignments",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_slugify(name)",
              "lineno": 394,
              "name": "_slugify",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 393,
          "name": "_skill_path",
          "qualname": "_skill_path",
          "return_annotation": "Tuple[str, int]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 401,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_skill(row.name)",
              "lineno": 403,
              "name": "seeder.get_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_skill(row.parent)",
              "lineno": 407,
              "name": "seeder.get_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: parent skill '{row.parent}' not found for '{row.name}'\")",
              "lineno": 409,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_skill_path(row.name, parent_skill)",
              "lineno": 410,
              "name": "_skill_path",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Skill(name=row.name, parent_id=parent_skill.id if parent_skill else None, path_cache=path_cache, depth=depth)",
              "lineno": 411,
              "name": "m.Skill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(skill)",
              "lineno": 412,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.flush()",
              "lineno": 413,
              "name": "seeder.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.remember_skill(row.name, skill)",
              "lineno": 414,
              "name": "seeder.remember_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 415,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('skipped')",
              "lineno": 417,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 400,
          "name": "_seed_skills",
          "qualname": "_seed_skills",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 422,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_project(row.project_key)",
              "lineno": 425,
              "name": "seeder.get_project",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: project '{row.project_key}' not found for tenant '{tenant_id}'\")",
              "lineno": 427,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_skill(row.skill_name)",
              "lineno": 428,
              "name": "seeder.get_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: skill '{row.skill_name}' not found\")",
              "lineno": 430,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.ProjectSkill).filter(m.ProjectSkill.project_id == project.id, m.ProjectSkill.skill_id == skill.id).one_or_none()",
              "lineno": 432,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.ProjectSkill).filter(m.ProjectSkill.project_id == project.id, m.ProjectSkill.skill_id == skill.id)",
              "lineno": 432,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.ProjectSkill)",
              "lineno": 432,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.ProjectSkill(project_id=project.id, skill_id=skill.id, importance=row.importance)",
              "lineno": 437,
              "name": "m.ProjectSkill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(ps)",
              "lineno": 438,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 439,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated')",
              "lineno": 444,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('skipped')",
              "lineno": 446,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 421,
          "name": "_seed_project_skills",
          "qualname": "_seed_project_skills",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 451,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_developer(row.username)",
              "lineno": 453,
              "name": "seeder.get_developer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: developer '{row.username}' not found\")",
              "lineno": 455,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.get_skill(row.skill_name)",
              "lineno": 456,
              "name": "seeder.get_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"{file_name}: skill '{row.skill_name}' not found\")",
              "lineno": 458,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.DeveloperSkill).filter(m.DeveloperSkill.developer_id == developer.id, m.DeveloperSkill.skill_id == skill.id).one_or_none()",
              "lineno": 460,
              "name": "seeder.session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.DeveloperSkill).filter(m.DeveloperSkill.developer_id == developer.id, m.DeveloperSkill.skill_id == skill.id)",
              "lineno": 460,
              "name": "seeder.session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seeder.session.query(m.DeveloperSkill)",
              "lineno": 460,
              "name": "seeder.session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.DeveloperSkill(developer_id=developer.id, skill_id=skill.id, score=row.score, confidence=row.confidence)",
              "lineno": 465,
              "name": "m.DeveloperSkill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "seeder.add(ds)",
              "lineno": 471,
              "name": "seeder.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('inserted')",
              "lineno": 472,
              "name": "stats.note",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stats.note('updated' if changed else 'skipped')",
              "lineno": 484,
              "name": "stats.note",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 450,
          "name": "_seed_developer_skills",
          "qualname": "_seed_developer_skills",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "path.stem.lower()",
              "lineno": 512,
              "name": "path.stem.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"Unsupported seed file '{path.name}'\")",
              "lineno": 514,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_read_csv(path, model)",
              "lineno": 516,
              "name": "_read_csv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "FileStats()",
              "lineno": 518,
              "name": "FileStats",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'{_iso_timestamp()} | {path.name} | inserted={stats.inserted} skipped={stats.skipped} updated={stats.updated} (no rows)')",
              "lineno": 519,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_iso_timestamp()",
              "lineno": 519,
              "name": "_iso_timestamp",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 524,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "Seeder(session, context)",
              "lineno": 527,
              "name": "Seeder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "handler(seeder, rows, path.name)",
              "lineno": 529,
              "name": "handler",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.rollback()",
              "lineno": 532,
              "name": "session.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.commit()",
              "lineno": 534,
              "name": "session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.rollback()",
              "lineno": 536,
              "name": "session.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 540,
              "name": "session.close",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'{_iso_timestamp()} | {path.name} | inserted={stats.inserted} skipped={stats.skipped} updated={stats.updated}')",
              "lineno": 542,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_iso_timestamp()",
              "lineno": 542,
              "name": "_iso_timestamp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 511,
          "name": "_process_file",
          "qualname": "_process_file",
          "return_annotation": "FileStats"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 549,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "Seeder(session, context)",
              "lineno": 550,
              "name": "Seeder",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "path.exists()",
              "lineno": 554,
              "name": "path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_file(path, context, session=session, seeder=seeder)",
              "lineno": 556,
              "name": "_process_file",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.rollback()",
              "lineno": 557,
              "name": "session.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.rollback()",
              "lineno": 559,
              "name": "session.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "path.exists()",
              "lineno": 564,
              "name": "path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_file(path, context)",
              "lineno": 566,
              "name": "_process_file",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 546,
          "name": "_process_directory",
          "qualname": "_process_directory",
          "return_annotation": "Dict[str, FileStats]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 571,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Tenant).scalar()",
              "lineno": 574,
              "name": "session.query.select_from.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Tenant)",
              "lineno": 574,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 574,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 574,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Project).filter(m.Project.tenant_id == tenant_id).scalar()",
              "lineno": 575,
              "name": "session.query.select_from.filter.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Project).filter(m.Project.tenant_id == tenant_id)",
              "lineno": 575,
              "name": "session.query.select_from.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Project)",
              "lineno": 575,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 575,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 575,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.User).filter(m.User.tenant_id == tenant_id).scalar()",
              "lineno": 576,
              "name": "session.query.select_from.filter.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.User).filter(m.User.tenant_id == tenant_id)",
              "lineno": 576,
              "name": "session.query.select_from.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.User)",
              "lineno": 576,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 576,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 576,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Developer).filter(m.Developer.tenant_id == tenant_id).scalar()",
              "lineno": 577,
              "name": "session.query.select_from.filter.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Developer).filter(m.Developer.tenant_id == tenant_id)",
              "lineno": 577,
              "name": "session.query.select_from.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Developer)",
              "lineno": 577,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 577,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 577,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Assignment).join(m.Developer, m.Assignment.developer_id == m.Developer.id).filter(m.Developer.tenant_id == tenant_id).scalar()",
              "lineno": 578,
              "name": "session.query.select_from.join.filter.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Assignment).join(m.Developer, m.Assignment.developer_id == m.Developer.id).filter(m.Developer.tenant_id == tenant_id)",
              "lineno": 578,
              "name": "session.query.select_from.join.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Assignment).join(m.Developer, m.Assignment.developer_id == m.Developer.id)",
              "lineno": 578,
              "name": "session.query.select_from.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Assignment)",
              "lineno": 578,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 578,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 578,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Skill).scalar()",
              "lineno": 579,
              "name": "session.query.select_from.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.Skill)",
              "lineno": 579,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 579,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 579,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.ProjectSkill).scalar()",
              "lineno": 580,
              "name": "session.query.select_from.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.ProjectSkill)",
              "lineno": 580,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 580,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 580,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.DeveloperSkill).scalar()",
              "lineno": 581,
              "name": "session.query.select_from.scalar",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count()).select_from(m.DeveloperSkill)",
              "lineno": 581,
              "name": "session.query.select_from",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(func.count())",
              "lineno": 581,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 581,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "print('Table counts (tenant scoped where applicable):')",
              "lineno": 583,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "counts.items()",
              "lineno": 584,
              "name": "counts.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'  {name}: {value}')",
              "lineno": 585,
              "name": "print",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 570,
          "name": "_emit_table_counts",
          "qualname": "_emit_table_counts",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='Seed Postgres with CSV fixtures in an idempotent fashion')",
              "lineno": 589,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--dir', type=Path, help='Directory containing seed CSVs', default=None)",
              "lineno": 590,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--file', type=Path, help='Path to a single CSV file', default=None)",
              "lineno": 591,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--tenant', type=str, help='Override tenant id', default=None)",
              "lineno": 592,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--dry-run', action='store_true', help='Simulate actions without committing')",
              "lineno": 593,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--update', action='store_true', help='Update existing rows when data differs')",
              "lineno": 594,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--stats', action='store_true', help='Print table counts after seeding')",
              "lineno": 595,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(argv)",
              "lineno": 596,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.error('one of --dir or --file is required')",
              "lineno": 599,
              "name": "parser.error",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.error('choose either --dir or --file, not both')",
              "lineno": 601,
              "name": "parser.error",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 588,
          "name": "parse_args",
          "qualname": "parse_args",
          "return_annotation": "argparse.Namespace"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "parse_args(argv)",
              "lineno": 606,
              "name": "parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederContext(tenant_id=tenant_id, dry_run=args.dry_run, allow_update=args.update)",
              "lineno": 608,
              "name": "SeederContext",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "directory.exists()",
              "lineno": 613,
              "name": "directory.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"Seed directory '{directory}' does not exist\")",
              "lineno": 614,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_directory(directory, context)",
              "lineno": 615,
              "name": "_process_directory",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError('--file path is required')",
              "lineno": 619,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "file_path.exists()",
              "lineno": 620,
              "name": "file_path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SeederError(f\"Seed file '{file_path}' does not exist\")",
              "lineno": 621,
              "name": "SeederError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_file(file_path, context)",
              "lineno": 622,
              "name": "_process_file",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_emit_table_counts(context)",
              "lineno": 624,
              "name": "_emit_table_counts",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'ERROR: {exc}')",
              "lineno": 626,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SystemExit(1)",
              "lineno": 627,
              "name": "SystemExit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 605,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "csv",
          "source": "csv",
          "type": "import"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Iterator",
          "source": "typing.Iterator",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "Type",
          "source": "typing.Type",
          "type": "from"
        },
        {
          "alias": "BaseModel",
          "source": "pydantic.BaseModel",
          "type": "from"
        },
        {
          "alias": "ConfigDict",
          "source": "pydantic.ConfigDict",
          "type": "from"
        },
        {
          "alias": "ValidationError",
          "source": "pydantic.ValidationError",
          "type": "from"
        },
        {
          "alias": "func",
          "source": "sqlalchemy.func",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "SessionLocal",
          "source": "app.deps.SessionLocal",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "app.scripts.data_seeder",
      "path": "Src/backend/app/scripts/data_seeder.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "ValueError('GitHub webhook secret is empty')",
              "lineno": 19,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hmac.new(secret.encode('utf-8'), raw_bytes, hashlib.sha256).hexdigest()",
              "lineno": 20,
              "name": "hmac.new.hexdigest",
              "resolved_module": "hmac"
            },
            {
              "category": "internal",
              "display": "hmac.new(secret.encode('utf-8'), raw_bytes, hashlib.sha256)",
              "lineno": 20,
              "name": "hmac.new",
              "resolved_module": "hmac"
            },
            {
              "category": "internal",
              "display": "secret.encode('utf-8')",
              "lineno": 20,
              "name": "secret.encode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the ``X-Hub-Signature-256`` header for ``raw_bytes``.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "compute_signature",
          "qualname": "compute_signature",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='Compute GitHub webhook signatures')",
              "lineno": 25,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('path', type=Path, nargs='?', help='Path to JSON payload (defaults to stdin)')",
              "lineno": 26,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--pretty', action='store_true', help='Pretty-print the JSON prior to signing')",
              "lineno": 27,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(argv)",
              "lineno": 28,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sys.stdin.buffer.read()",
              "lineno": 31,
              "name": "sys.stdin.buffer.read",
              "resolved_module": "sys"
            },
            {
              "category": "internal",
              "display": "args.path.read_bytes()",
              "lineno": 33,
              "name": "args.path.read_bytes",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json.loads(data.decode('utf-8'))",
              "lineno": 37,
              "name": "json.loads",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "data.decode('utf-8')",
              "lineno": 37,
              "name": "data.decode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SystemExit('Payload is not valid JSON; cannot pretty-print')",
              "lineno": 39,
              "name": "SystemExit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json.dumps(parsed, separators=(',', ':'), sort_keys=True).encode('utf-8')",
              "lineno": 40,
              "name": "json.dumps.encode",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "json.dumps(parsed, separators=(',', ':'), sort_keys=True)",
              "lineno": 40,
              "name": "json.dumps",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "compute_signature(data, secret)",
              "lineno": 44,
              "name": "compute_signature",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SystemExit(str(exc))",
              "lineno": 46,
              "name": "SystemExit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(exc)",
              "lineno": 46,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(signature)",
              "lineno": 48,
              "name": "print",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "main",
          "qualname": "main",
          "return_annotation": "int"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "hashlib",
          "source": "hashlib",
          "type": "import"
        },
        {
          "alias": "hmac",
          "source": "hmac",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "sys",
          "source": "sys",
          "type": "import"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "app.scripts.github_sig",
      "path": "Src/backend/app/scripts/github_sig.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')",
              "lineno": 41,
              "name": "datetime.now.strftime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 41,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 40,
          "name": "_iso_timestamp",
          "qualname": "_iso_timestamp",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "pytest.main(['-k', 'policy_properties', '-q'])",
              "lineno": 50,
              "name": "pytest.main",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Execute property-based tests guarding isolation invariants.",
          "endpoint": null,
          "is_async": false,
          "lineno": 44,
          "name": "run_property_suite",
          "qualname": "run_property_suite",
          "return_annotation": "dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "getattr(model, 'tenant_id', None)",
              "lineno": 62,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ValueError(f'Model {model.__name__} does not expose a tenant_id column')",
              "lineno": 64,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(column, func.count()).select_from(model).group_by(column)",
              "lineno": 66,
              "name": "select.select_from.group_by",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(column, func.count()).select_from(model)",
              "lineno": 66,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(column, func.count())",
              "lineno": 66,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 66,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).all()",
              "lineno": 67,
              "name": "session.execute.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 67,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(tenant_id)",
              "lineno": 76,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 61,
          "name": "_table_counts",
          "qualname": "_table_counts",
          "return_annotation": "tuple[dict[str, int], int]"
        },
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 80,
          "name": "_check_result",
          "qualname": "_check_result",
          "return_annotation": "dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Developer).join(m.User, m.User.id == m.Developer.user_id).where(m.Developer.tenant_id != m.User.tenant_id)).scalar_one()",
              "lineno": 92,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Developer).join(m.User, m.User.id == m.Developer.user_id).where(m.Developer.tenant_id != m.User.tenant_id))",
              "lineno": 92,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Developer).join(m.User, m.User.id == m.Developer.user_id).where(m.Developer.tenant_id != m.User.tenant_id)",
              "lineno": 93,
              "name": "select.select_from.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Developer).join(m.User, m.User.id == m.Developer.user_id)",
              "lineno": 93,
              "name": "select.select_from.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Developer)",
              "lineno": 93,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count())",
              "lineno": 93,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 93,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result('Developer tenant matches user tenant', mismatched_devs == 0, None if mismatched_devs == 0 else f'{mismatched_devs} developer(s) span multiple tenants'))",
              "lineno": 98,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result('Developer tenant matches user tenant', mismatched_devs == 0, None if mismatched_devs == 0 else f'{mismatched_devs} developer(s) span multiple tenants')",
              "lineno": 99,
              "name": "_check_result",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).join(m.Project, m.Project.id == m.Assignment.project_id).where(m.Developer.tenant_id != m.Project.tenant_id)).scalar_one()",
              "lineno": 107,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).join(m.Project, m.Project.id == m.Assignment.project_id).where(m.Developer.tenant_id != m.Project.tenant_id))",
              "lineno": 107,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).join(m.Project, m.Project.id == m.Assignment.project_id).where(m.Developer.tenant_id != m.Project.tenant_id)",
              "lineno": 108,
              "name": "select.select_from.join.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id).join(m.Project, m.Project.id == m.Assignment.project_id)",
              "lineno": 108,
              "name": "select.select_from.join.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Assignment).join(m.Developer, m.Developer.id == m.Assignment.developer_id)",
              "lineno": 108,
              "name": "select.select_from.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Assignment)",
              "lineno": 108,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count())",
              "lineno": 108,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 108,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result('Assignment references align tenants', assignment_mismatches == 0, None if assignment_mismatches == 0 else f'{assignment_mismatches} assignment(s) link developers and projects from different tenants'))",
              "lineno": 114,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result('Assignment references align tenants', assignment_mismatches == 0, None if assignment_mismatches == 0 else f'{assignment_mismatches} assignment(s) link developers and projects from different tenants')",
              "lineno": 115,
              "name": "_check_result",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.DeveloperSkill).join(m.Developer, m.Developer.id == m.DeveloperSkill.developer_id).join(m.Project, m.Project.id == m.DeveloperSkill.project_id).where(m.Project.tenant_id != m.Developer.tenant_id)).scalar_one()",
              "lineno": 125,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.DeveloperSkill).join(m.Developer, m.Developer.id == m.DeveloperSkill.developer_id).join(m.Project, m.Project.id == m.DeveloperSkill.project_id).where(m.Project.tenant_id != m.Developer.tenant_id))",
              "lineno": 125,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.DeveloperSkill).join(m.Developer, m.Developer.id == m.DeveloperSkill.developer_id).join(m.Project, m.Project.id == m.DeveloperSkill.project_id).where(m.Project.tenant_id != m.Developer.tenant_id)",
              "lineno": 126,
              "name": "select.select_from.join.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.DeveloperSkill).join(m.Developer, m.Developer.id == m.DeveloperSkill.developer_id).join(m.Project, m.Project.id == m.DeveloperSkill.project_id)",
              "lineno": 126,
              "name": "select.select_from.join.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.DeveloperSkill).join(m.Developer, m.Developer.id == m.DeveloperSkill.developer_id)",
              "lineno": 126,
              "name": "select.select_from.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.DeveloperSkill)",
              "lineno": 126,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count())",
              "lineno": 126,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 126,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result('Developer skill project context is tenant aligned', skill_mismatches == 0, None if skill_mismatches == 0 else f'{skill_mismatches} developer skill rows reference cross-tenant projects'))",
              "lineno": 132,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result('Developer skill project context is tenant aligned', skill_mismatches == 0, None if skill_mismatches == 0 else f'{skill_mismatches} developer skill rows reference cross-tenant projects')",
              "lineno": 133,
              "name": "_check_result",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Event).join(m.Project, m.Project.id == m.Event.project_id).where(m.Event.tenant_id != m.Project.tenant_id)).scalar_one()",
              "lineno": 143,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Event).join(m.Project, m.Project.id == m.Event.project_id).where(m.Event.tenant_id != m.Project.tenant_id))",
              "lineno": 143,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event).join(m.Project, m.Project.id == m.Event.project_id).where(m.Event.tenant_id != m.Project.tenant_id)",
              "lineno": 144,
              "name": "select.select_from.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event).join(m.Project, m.Project.id == m.Event.project_id)",
              "lineno": 144,
              "name": "select.select_from.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event)",
              "lineno": 144,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count())",
              "lineno": 144,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 144,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result('Event project tenant alignment', event_project_mismatches == 0, None if event_project_mismatches == 0 else f'{event_project_mismatches} event(s) reference projects in other tenants'))",
              "lineno": 149,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result('Event project tenant alignment', event_project_mismatches == 0, None if event_project_mismatches == 0 else f'{event_project_mismatches} event(s) reference projects in other tenants')",
              "lineno": 150,
              "name": "_check_result",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Event).join(m.Developer, m.Developer.id == m.Event.developer_id).where(m.Event.tenant_id != m.Developer.tenant_id)).scalar_one()",
              "lineno": 159,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(func.count()).select_from(m.Event).join(m.Developer, m.Developer.id == m.Event.developer_id).where(m.Event.tenant_id != m.Developer.tenant_id))",
              "lineno": 159,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event).join(m.Developer, m.Developer.id == m.Event.developer_id).where(m.Event.tenant_id != m.Developer.tenant_id)",
              "lineno": 160,
              "name": "select.select_from.join.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event).join(m.Developer, m.Developer.id == m.Event.developer_id)",
              "lineno": 160,
              "name": "select.select_from.join",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count()).select_from(m.Event)",
              "lineno": 160,
              "name": "select.select_from",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(func.count())",
              "lineno": 160,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.count()",
              "lineno": 160,
              "name": "func.count",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result('Event developer tenant alignment', event_developer_mismatches == 0, None if event_developer_mismatches == 0 else f'{event_developer_mismatches} event(s) reference developers in other tenants'))",
              "lineno": 165,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result('Event developer tenant alignment', event_developer_mismatches == 0, None if event_developer_mismatches == 0 else f'{event_developer_mismatches} event(s) reference developers in other tenants')",
              "lineno": 166,
              "name": "_check_result",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 88,
          "name": "_run_alignment_checks",
          "qualname": "_run_alignment_checks",
          "return_annotation": "list[dict[str, Any]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 181,
              "name": "SessionLocal",
              "resolved_module": "app.deps.SessionLocal"
            },
            {
              "category": "internal",
              "display": "session.execute(select(m.Tenant).order_by(m.Tenant.id)).scalars()",
              "lineno": 185,
              "name": "session.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(m.Tenant).order_by(m.Tenant.id))",
              "lineno": 185,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.Tenant).order_by(m.Tenant.id)",
              "lineno": 185,
              "name": "select.order_by",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.Tenant)",
              "lineno": 185,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "_table_counts(session, model)",
              "lineno": 192,
              "name": "_table_counts",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "checks.append(_check_result(f'{model.__tablename__} rows include tenant_id', null_count == 0, None if null_count == 0 else f'{null_count} row(s) missing tenant attribution'))",
              "lineno": 194,
              "name": "checks.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_check_result(f'{model.__tablename__} rows include tenant_id', null_count == 0, None if null_count == 0 else f'{null_count} row(s) missing tenant attribution')",
              "lineno": 195,
              "name": "_check_result",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "checks.extend(_run_alignment_checks(session))",
              "lineno": 202,
              "name": "checks.extend",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_run_alignment_checks(session)",
              "lineno": 202,
              "name": "_run_alignment_checks",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(checks)",
              "lineno": 204,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum((1 for c in checks if c['status'] != 'pass'))",
              "lineno": 205,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_iso_timestamp()",
              "lineno": 208,
              "name": "_iso_timestamp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Inspect the database and return an isolation report payload.",
          "endpoint": null,
          "is_async": false,
          "lineno": 178,
          "name": "generate_report",
          "qualname": "generate_report",
          "return_annotation": "dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "lines.append('# Isolation Proof Report')",
              "lineno": 225,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 226,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Generated at: {report['generated_at']}')",
              "lineno": 227,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Output directory: `{report['isolation_report_dir']}`')",
              "lineno": 228,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Total checks: {report['summary']['total_checks']}')",
              "lineno": 229,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Failed checks: {report['summary']['failed_checks']}')",
              "lineno": 230,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 231,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "report.get('property_tests')",
              "lineno": 233,
              "name": "report.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('## Property test suite')",
              "lineno": 234,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Status: {property_tests.get('status', 'unknown')}')",
              "lineno": 235,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "property_tests.get('status', 'unknown')",
              "lineno": 235,
              "name": "property_tests.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- Exit code: {property_tests.get('exit_code', 'n/a')}')",
              "lineno": 236,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "property_tests.get('exit_code', 'n/a')",
              "lineno": 236,
              "name": "property_tests.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 237,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('## Tenants')",
              "lineno": 240,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('| Tenant ID | Name |')",
              "lineno": 241,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('| --- | --- |')",
              "lineno": 242,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'| {tenant['id']} | {tenant['name']} |')",
              "lineno": 244,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 245,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('## Checks')",
              "lineno": 247,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "check.get('details')",
              "lineno": 250,
              "name": "check.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'- {status} **{check['name']}**{detail}')",
              "lineno": 251,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 252,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('## Table row counts')",
              "lineno": 254,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(report['table_counts'].items())",
              "lineno": 255,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "report['table_counts'].items()",
              "lineno": 255,
              "name": "report.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'### {table_name}')",
              "lineno": 256,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('| Tenant | Rows |')",
              "lineno": 257,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('| --- | ---: |')",
              "lineno": 258,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(counts.items())",
              "lineno": 260,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "counts.items()",
              "lineno": 260,
              "name": "counts.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "tenant.replace('__null__', '(missing)')",
              "lineno": 261,
              "name": "tenant.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'| {label} | {count} |')",
              "lineno": 262,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('| (none) | 0 |')",
              "lineno": 264,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('')",
              "lineno": 265,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(lines).rstrip()",
              "lineno": 267,
              "name": "\n.join.rstrip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(lines)",
              "lineno": 267,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 223,
          "name": "_render_markdown",
          "qualname": "_render_markdown",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "html.escape(str(value))",
              "lineno": 272,
              "name": "html.escape",
              "resolved_module": "html"
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 272,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(report['generated_at'])",
              "lineno": 283,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(report['isolation_report_dir'])",
              "lineno": 284,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(report['summary']['total_checks'])",
              "lineno": 285,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(report['summary']['failed_checks'])",
              "lineno": 285,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "report.get('property_tests')",
              "lineno": 288,
              "name": "report.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    <section>')",
              "lineno": 289,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <h2>Property test suite</h2>')",
              "lineno": 290,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'      <p>Status: <strong>{esc(property_tests.get('status', 'unknown'))}</strong> (exit code {esc(property_tests.get('exit_code', 'n/a'))})</p>')",
              "lineno": 291,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(property_tests.get('status', 'unknown'))",
              "lineno": 292,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "property_tests.get('status', 'unknown')",
              "lineno": 292,
              "name": "property_tests.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(property_tests.get('exit_code', 'n/a'))",
              "lineno": 292,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "property_tests.get('exit_code', 'n/a')",
              "lineno": 292,
              "name": "property_tests.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    </section>')",
              "lineno": 294,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    <section>')",
              "lineno": 297,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <h2>Tenants</h2>')",
              "lineno": 298,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <table>')",
              "lineno": 299,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('        <tr><th>Tenant ID</th><th>Name</th></tr>')",
              "lineno": 300,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'        <tr><td>{esc(tenant['id'])}</td><td>{esc(tenant['name'])}</td></tr>')",
              "lineno": 302,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(tenant['id'])",
              "lineno": 303,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(tenant['name'])",
              "lineno": 303,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      </table>')",
              "lineno": 305,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    </section>')",
              "lineno": 306,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    <section>')",
              "lineno": 308,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <h2>Checks</h2>')",
              "lineno": 309,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <ul>')",
              "lineno": 310,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "check.get('details')",
              "lineno": 313,
              "name": "check.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(check['details'])",
              "lineno": 313,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f\"        <li class='{css}'><strong>{esc(check['name'])}</strong>{detail}</li>\")",
              "lineno": 314,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(check['name'])",
              "lineno": 315,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      </ul>')",
              "lineno": 317,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    </section>')",
              "lineno": 318,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    <section>')",
              "lineno": 320,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <h2>Table row counts</h2>')",
              "lineno": 321,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(report['table_counts'].items())",
              "lineno": 322,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "report['table_counts'].items()",
              "lineno": 322,
              "name": "report.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'      <h3>{esc(table_name)}</h3>')",
              "lineno": 323,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(table_name)",
              "lineno": 323,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      <table>')",
              "lineno": 324,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('        <tr><th>Tenant</th><th>Rows</th></tr>')",
              "lineno": 325,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(counts.items())",
              "lineno": 327,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "counts.items()",
              "lineno": 327,
              "name": "counts.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "tenant.replace('__null__', '(missing)')",
              "lineno": 328,
              "name": "tenant.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append(f'        <tr><td>{esc(label)}</td><td>{esc(count)}</td></tr>')",
              "lineno": 329,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(label)",
              "lineno": 329,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc(count)",
              "lineno": 329,
              "name": "esc",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('        <tr><td>(none)</td><td>0</td></tr>')",
              "lineno": 331,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('      </table>')",
              "lineno": 332,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('    </section>')",
              "lineno": 333,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('  </body>')",
              "lineno": 335,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lines.append('</html>')",
              "lineno": 336,
              "name": "lines.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(lines)",
              "lineno": 337,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 270,
          "name": "_render_html",
          "qualname": "_render_html",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Path(output_dir or settings.isolation_report_dir)",
              "lineno": 341,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S')",
              "lineno": 342,
              "name": "datetime.now.strftime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 342,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "out_dir.mkdir(parents=True, exist_ok=True)",
              "lineno": 344,
              "name": "out_dir.mkdir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json_path.write_text(json.dumps(report, indent=2, sort_keys=True), encoding='utf-8')",
              "lineno": 347,
              "name": "json_path.write_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "json.dumps(report, indent=2, sort_keys=True)",
              "lineno": 347,
              "name": "json.dumps",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "md_path.write_text(_render_markdown(report), encoding='utf-8')",
              "lineno": 350,
              "name": "md_path.write_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_render_markdown(report)",
              "lineno": 350,
              "name": "_render_markdown",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "html_path.write_text(_render_html(report), encoding='utf-8')",
              "lineno": 353,
              "name": "html_path.write_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_render_html(report)",
              "lineno": 353,
              "name": "_render_html",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 340,
          "name": "write_report",
          "qualname": "write_report",
          "return_annotation": "list[Path]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='Generate tenant isolation proof artifacts')",
              "lineno": 359,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--output-dir', '-o', type=Path, default=Path(settings.isolation_report_dir), help='Directory to write the isolation proof artifacts')",
              "lineno": 360,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "Path(settings.isolation_report_dir)",
              "lineno": 364,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--skip-tests', action='store_true', help='Skip running property-based isolation tests (useful for CI smoke or unit tests)')",
              "lineno": 367,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(list(argv) if argv is not None else None)",
              "lineno": 372,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(argv)",
              "lineno": 372,
              "name": "list",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 358,
          "name": "_parse_args",
          "qualname": "_parse_args",
          "return_annotation": "argparse.Namespace"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_parse_args(argv)",
              "lineno": 376,
              "name": "_parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "bool(os.environ.get('ISOLATION_PROOF_SKIP_TESTS'))",
              "lineno": 377,
              "name": "bool",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "os.environ.get('ISOLATION_PROOF_SKIP_TESTS')",
              "lineno": 377,
              "name": "os.environ.get",
              "resolved_module": "os"
            },
            {
              "category": "internal",
              "display": "run_property_suite(skip=skip_tests)",
              "lineno": 378,
              "name": "run_property_suite",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "generate_report(property_result if property_result['status'] != 'skipped' else None)",
              "lineno": 379,
              "name": "generate_report",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "write_report(report, args.output_dir)",
              "lineno": 380,
              "name": "write_report",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'Wrote {path}')",
              "lineno": 382,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print('ERROR: property-based tests failed', flush=True)",
              "lineno": 384,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print('WARNING: one or more isolation checks failed', flush=True)",
              "lineno": 387,
              "name": "print",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 375,
          "name": "main",
          "qualname": "main",
          "return_annotation": "int"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "html",
          "source": "html",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "func",
          "source": "sqlalchemy.func",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "SessionLocal",
          "source": "app.deps.SessionLocal",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "app.scripts.isolation_proof",
      "path": "Src/backend/app/scripts/isolation_proof.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Raised when a smoke step fails deterministically.",
          "lineno": 112,
          "methods": [
            "__init__"
          ],
          "name": "StepFailure"
        },
        {
          "docstring": "Raised when a failure is due to missing or invalid credentials.",
          "lineno": 121,
          "methods": [
            "__init__"
          ],
          "name": "CredentialsBlocker"
        },
        {
          "docstring": null,
          "lineno": 130,
          "methods": [],
          "name": "StepStatus"
        },
        {
          "docstring": null,
          "lineno": 137,
          "methods": [],
          "name": "ManagedProcess"
        },
        {
          "docstring": "Utility for masking secrets before writing logs or artifacts.",
          "lineno": 144,
          "methods": [
            "__init__",
            "register",
            "redact_text",
            "redact_json"
          ],
          "name": "Redactor"
        },
        {
          "docstring": "Smoke orchestrator covering live-only endpoints.",
          "lineno": 191,
          "methods": [
            "__init__",
            "run",
            "_prepare_artifacts",
            "_ensure_remote_env",
            "_preflight_checks",
            "_check_postgres",
            "_check_qdrant",
            "_check_redis",
            "_launch_processes",
            "_start_process",
            "_stream_process_output",
            "_wait_for_readiness",
            "_exercise_flow",
            "_obtain_token",
            "_ensure_project",
            "_fetch_project",
            "_upload_document",
            "_perform_retrieve",
            "_staff_recommend",
            "_run_onboarding",
            "_agent_query",
            "_skills_profile",
            "_audit_logs",
            "_github_webhook",
            "_ensure_sample_markdown",
            "_write_response",
            "_await_worker_confirmation",
            "_finalize",
            "_write_summary",
            "_write_latest"
          ],
          "name": "APISmokeHarness"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(err, PermissionError)",
              "lineno": 96,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "os.chmod(path, stat.S_IWRITE)",
              "lineno": 98,
              "name": "os.chmod",
              "resolved_module": "os"
            },
            {
              "category": "internal",
              "display": "func(path)",
              "lineno": 99,
              "name": "func",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Best-effort helper to clear read-only attributes then retry removal.",
          "endpoint": null,
          "is_async": false,
          "lineno": 92,
          "name": "_remove_readonly",
          "qualname": "_remove_readonly",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "path.exists()",
              "lineno": 107,
              "name": "path.exists",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "shutil.rmtree(path, onerror=_remove_readonly)",
              "lineno": 109,
              "name": "shutil.rmtree",
              "resolved_module": "shutil"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 106,
          "name": "_safe_rmtree",
          "qualname": "_safe_rmtree",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "provided.resolve()",
              "lineno": 775,
              "name": "provided.resolve",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S')",
              "lineno": 776,
              "name": "datetime.now.strftime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 776,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "(REPO_ROOT / 'artifacts' / 'smoke' / timestamp).resolve()",
              "lineno": 777,
              "name": "resolve",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 773,
          "name": "resolve_artifact_dir",
          "qualname": "resolve_artifact_dir",
          "return_annotation": "Path"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='Run live API smoke test')",
              "lineno": 781,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--artifacts', type=Path, help='Optional artifact directory override')",
              "lineno": 782,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--base-url', default=API_HOST, help='Base URL for the API (default http://127.0.0.1:9000)')",
              "lineno": 783,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(list(argv) if argv is not None else None)",
              "lineno": 788,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(argv)",
              "lineno": 788,
              "name": "list",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 780,
          "name": "parse_args",
          "qualname": "parse_args",
          "return_annotation": "argparse.Namespace"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "parse_args(argv)",
              "lineno": 792,
              "name": "parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "resolve_artifact_dir(args.artifacts)",
              "lineno": 793,
              "name": "resolve_artifact_dir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "APISmokeHarness(artifact_dir=artifact_dir, base_url=args.base_url)",
              "lineno": 794,
              "name": "APISmokeHarness",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifact_dir.mkdir(parents=True, exist_ok=True)",
              "lineno": 796,
              "name": "artifact_dir.mkdir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'Failed to prepare artifact directory: {exc}', file=sys.stderr)",
              "lineno": 798,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "harness.run()",
              "lineno": 800,
              "name": "harness.run",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 791,
          "name": "main",
          "qualname": "main",
          "return_annotation": "int"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "contextlib",
          "source": "contextlib",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "shutil",
          "source": "shutil",
          "type": "import"
        },
        {
          "alias": "stat",
          "source": "stat",
          "type": "import"
        },
        {
          "alias": "signal",
          "source": "signal",
          "type": "import"
        },
        {
          "alias": "subprocess",
          "source": "subprocess",
          "type": "import"
        },
        {
          "alias": "sys",
          "source": "sys",
          "type": "import"
        },
        {
          "alias": "threading",
          "source": "threading",
          "type": "import"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "uuid",
          "source": "uuid",
          "type": "import"
        },
        {
          "alias": "OrderedDict",
          "source": "collections.OrderedDict",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "field",
          "source": "dataclasses.field",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Mapping",
          "source": "typing.Mapping",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "psycopg2",
          "source": "psycopg2",
          "type": "import"
        },
        {
          "alias": "redis",
          "source": "redis",
          "type": "import"
        },
        {
          "alias": "load_dotenv",
          "source": "dotenv.load_dotenv",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "compute_signature",
          "source": "app.scripts.github_sig.compute_signature",
          "type": "from"
        }
      ],
      "module": "app.scripts.run_api_smoke",
      "path": "Src/backend/app/scripts/run_api_smoke.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Raised when a deterministic step in the harness fails.",
          "lineno": 110,
          "methods": [],
          "name": "StepFailure"
        },
        {
          "docstring": "Raised when API readiness probing times out.",
          "lineno": 114,
          "methods": [],
          "name": "ReadinessTimeout"
        },
        {
          "docstring": null,
          "lineno": 119,
          "methods": [],
          "name": "StepStatus"
        },
        {
          "docstring": null,
          "lineno": 127,
          "methods": [],
          "name": "ManagedProcess"
        },
        {
          "docstring": "Utility for masking secrets before persisting artifacts.",
          "lineno": 134,
          "methods": [
            "__init__",
            "register",
            "redact_text",
            "redact_json"
          ],
          "name": "Redactor"
        },
        {
          "docstring": "Non-negotiable orchestration for the North Star acceptance flow.",
          "lineno": 205,
          "methods": [
            "__init__",
            "run",
            "_register_initial_tokens",
            "_prepare_artifact_tree",
            "_build_postgres_engine",
            "_run_preflight",
            "_write_preflight",
            "_launch_services",
            "_start_process",
            "_stream_process_output",
            "_wait_for_readiness",
            "_exercise_flow",
            "_request_with_retry",
            "_record_response",
            "_authenticate",
            "_ensure_project",
            "_upload_sample",
            "_retrieve_checks",
            "_agent_publish",
            "_trigger_webhook",
            "_await_worker_webhook",
            "_run_isolation_proof",
            "_run_pytest",
            "_collect_pytest_totals",
            "_snapshot_perf",
            "_write_perf_reports",
            "_write_summary",
            "_icon",
            "_write_status",
            "_write_bundle",
            "_add_to_zip",
            "_write_triage",
            "_finalise"
          ],
          "name": "E2EHarness"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "len(sorted_samples)",
              "lineno": 98,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(sorted_samples[0])",
              "lineno": 99,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(sorted_samples)",
              "lineno": 100,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "math.floor(idx)",
              "lineno": 101,
              "name": "math.floor",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "math.ceil(idx)",
              "lineno": 102,
              "name": "math.ceil",
              "resolved_module": "math"
            },
            {
              "category": "internal",
              "display": "float(sorted_samples[int(idx)])",
              "lineno": 104,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(idx)",
              "lineno": 104,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(lower_value + (upper_value - lower_value) * (idx - lower))",
              "lineno": 107,
              "name": "float",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 95,
          "name": "_percentile",
          "qualname": "_percentile",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "urlparse(url)",
              "lineno": 189,
              "name": "urlparse",
              "resolved_module": "urllib.parse.urlparse"
            },
            {
              "category": "internal",
              "display": "f'{hostname}{port}'.strip()",
              "lineno": 193,
              "name": "strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "f'{scheme}://{hostname}{port}'.strip()",
              "lineno": 195,
              "name": "strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 186,
          "name": "sanitize_url_for_snapshot",
          "qualname": "sanitize_url_for_snapshot",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "hashlib.sha256(name.encode('utf-8')).hexdigest()",
              "lineno": 201,
              "name": "hashlib.sha256.hexdigest",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "hashlib.sha256(name.encode('utf-8'))",
              "lineno": 201,
              "name": "hashlib.sha256",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "name.encode('utf-8')",
              "lineno": 201,
              "name": "name.encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(os.environ)",
              "lineno": 201,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(hashes)",
              "lineno": 202,
              "name": "sorted",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a deterministic list of hashed environment variable names.",
          "endpoint": null,
          "is_async": false,
          "lineno": 198,
          "name": "build_env_fingerprint",
          "qualname": "build_env_fingerprint",
          "return_annotation": "list[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "argparse.ArgumentParser(description='Run the Non-Negotiable North Star E2E harness')",
              "lineno": 1062,
              "name": "argparse.ArgumentParser",
              "resolved_module": "argparse"
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--artifacts', type=Path, help='Path to the artifact directory (default: artifacts/e2e/<timestamp>)')",
              "lineno": 1063,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--base-url', default=BASE_URL_DEFAULT, help='Base URL for the API')",
              "lineno": 1068,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.add_argument('--port', type=int, default=UVICORN_PORT, help='Port to bind uvicorn')",
              "lineno": 1069,
              "name": "parser.add_argument",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "parser.parse_args(list(argv) if argv is not None else None)",
              "lineno": 1070,
              "name": "parser.parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list(argv)",
              "lineno": 1070,
              "name": "list",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 1061,
          "name": "parse_args",
          "qualname": "parse_args",
          "return_annotation": "argparse.Namespace"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "provided.resolve()",
              "lineno": 1075,
              "name": "provided.resolve",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S')",
              "lineno": 1076,
              "name": "datetime.now.strftime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 1076,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "(repo_root / 'artifacts' / 'e2e' / timestamp).resolve()",
              "lineno": 1077,
              "name": "resolve",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 1073,
          "name": "resolve_artifact_dir",
          "qualname": "resolve_artifact_dir",
          "return_annotation": "Path"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "parse_args(argv)",
              "lineno": 1081,
              "name": "parse_args",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "Path(__file__).resolve()",
              "lineno": 1082,
              "name": "Path.resolve",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "Path(__file__)",
              "lineno": 1082,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "resolve_artifact_dir(repo_root, args.artifacts)",
              "lineno": 1083,
              "name": "resolve_artifact_dir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "E2EHarness(artifact_dir=artifact_dir, base_url=args.base_url, port=args.port)",
              "lineno": 1084,
              "name": "E2EHarness",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "artifact_dir.mkdir(parents=True, exist_ok=True)",
              "lineno": 1086,
              "name": "artifact_dir.mkdir",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "print(f'Failed to prepare artifact directory: {exc}', file=sys.stderr)",
              "lineno": 1088,
              "name": "print",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "harness.run()",
              "lineno": 1090,
              "name": "harness.run",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 1080,
          "name": "main",
          "qualname": "main",
          "return_annotation": "int"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "argparse",
          "source": "argparse",
          "type": "import"
        },
        {
          "alias": "contextlib",
          "source": "contextlib",
          "type": "import"
        },
        {
          "alias": "hashlib",
          "source": "hashlib",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "math",
          "source": "math",
          "type": "import"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "random",
          "source": "random",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "shutil",
          "source": "shutil",
          "type": "import"
        },
        {
          "alias": "signal",
          "source": "signal",
          "type": "import"
        },
        {
          "alias": "subprocess",
          "source": "subprocess",
          "type": "import"
        },
        {
          "alias": "sys",
          "source": "sys",
          "type": "import"
        },
        {
          "alias": "tempfile",
          "source": "tempfile",
          "type": "import"
        },
        {
          "alias": "threading",
          "source": "threading",
          "type": "import"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "zipfile",
          "source": "zipfile",
          "type": "import"
        },
        {
          "alias": "defaultdict",
          "source": "collections.defaultdict",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "field",
          "source": "dataclasses.field",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Mapping",
          "source": "typing.Mapping",
          "type": "from"
        },
        {
          "alias": "Sequence",
          "source": "typing.Sequence",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "ET",
          "source": "xml.etree.ElementTree",
          "type": "import"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "Engine",
          "source": "sqlalchemy.engine.Engine",
          "type": "from"
        },
        {
          "alias": "URL",
          "source": "sqlalchemy.engine.URL",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.engine.create_engine",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "compute_signature",
          "source": "app.scripts.github_sig.compute_signature",
          "type": "from"
        },
        {
          "alias": "to_confluence_html",
          "source": "worker.handlers.evidence_builder.to_confluence_html",
          "type": "from"
        }
      ],
      "module": "app.scripts.run_e2e",
      "path": "Src/backend/app/scripts/run_e2e.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "compute_skill_delta",
          "source": "scoring_service.compute_skill_delta",
          "type": "from"
        },
        {
          "alias": "ScoreComputationResult",
          "source": "scoring_service.ScoreComputationResult",
          "type": "from"
        }
      ],
      "module": "app.services.__init__",
      "path": "Src/backend/app/services/__init__.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 12,
          "methods": [],
          "name": "ScoreComputationResult"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "service",
              "display": "compute_baseline_delta(BaselineContext(pr_created_at=pr_created_at, pr_merged_at=pr_merged_at, jira_done_at=jira_done_at, already_applied=already_applied))",
              "lineno": 31,
              "name": "compute_baseline_delta",
              "resolved_module": "worker.services.scoring.baseline.compute_baseline_delta"
            },
            {
              "category": "service",
              "display": "BaselineContext(pr_created_at=pr_created_at, pr_merged_at=pr_merged_at, jira_done_at=jira_done_at, already_applied=already_applied)",
              "lineno": 32,
              "name": "BaselineContext",
              "resolved_module": "worker.services.scoring.baseline.BaselineContext"
            },
            {
              "category": "internal",
              "display": "ScoreComputationResult(baseline_delta=None, final_delta=0.0)",
              "lineno": 40,
              "name": "ScoreComputationResult",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "apply_modifiers(ModifierContext(baseline=baseline, review_signals=tuple(review_signals), review_cycles=review_cycles, time_to_merge_seconds=time_to_merge_seconds, peer_credit_total=peer_credit_total, major_rework_requested=major_rework_requested, approvals_count=approvals_count))",
              "lineno": 42,
              "name": "apply_modifiers",
              "resolved_module": "worker.services.scoring.modifiers.apply_modifiers"
            },
            {
              "category": "service",
              "display": "ModifierContext(baseline=baseline, review_signals=tuple(review_signals), review_cycles=review_cycles, time_to_merge_seconds=time_to_merge_seconds, peer_credit_total=peer_credit_total, major_rework_requested=major_rework_requested, approvals_count=approvals_count)",
              "lineno": 43,
              "name": "ModifierContext",
              "resolved_module": "worker.services.scoring.modifiers.ModifierContext"
            },
            {
              "category": "internal",
              "display": "tuple(review_signals)",
              "lineno": 45,
              "name": "tuple",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ScoreComputationResult(baseline_delta=baseline, final_delta=modified)",
              "lineno": 53,
              "name": "ScoreComputationResult",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "compute_skill_delta",
          "qualname": "compute_skill_delta",
          "return_annotation": "ScoreComputationResult"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "BaselineContext",
          "source": "worker.services.scoring.baseline.BaselineContext",
          "type": "from"
        },
        {
          "alias": "compute_baseline_delta",
          "source": "worker.services.scoring.baseline.compute_baseline_delta",
          "type": "from"
        },
        {
          "alias": "ModifierContext",
          "source": "worker.services.scoring.modifiers.ModifierContext",
          "type": "from"
        },
        {
          "alias": "ReviewSignal",
          "source": "worker.services.scoring.modifiers.ReviewSignal",
          "type": "from"
        },
        {
          "alias": "apply_modifiers",
          "source": "worker.services.scoring.modifiers.apply_modifiers",
          "type": "from"
        }
      ],
      "module": "app.services.scoring_service",
      "path": "Src/backend/app/services/scoring_service.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "len(text)",
              "lineno": 15,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "min(i + max_len, n)",
              "lineno": 17,
              "name": "min",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Backward-compatible fallback: character-based window with overlap.\nKept for compatibility with any existing ingestion code.",
          "endpoint": null,
          "is_async": false,
          "lineno": 10,
          "name": "simple_chunks",
          "qualname": "simple_chunks",
          "return_annotation": "Iterable[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_HEADING_RE.finditer(text)",
              "lineno": 51,
              "name": "_HEADING_RE.finditer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.start()",
              "lineno": 52,
              "name": "m.start",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sections.append((last_title, last_pos, m.start()))",
              "lineno": 53,
              "name": "sections.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.start()",
              "lineno": 53,
              "name": "m.start",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.group(2).strip()",
              "lineno": 54,
              "name": "m.group.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.group(2)",
              "lineno": 54,
              "name": "m.group",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.start()",
              "lineno": 55,
              "name": "m.start",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sections.append((last_title, last_pos, len(text)))",
              "lineno": 56,
              "name": "sections.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(text)",
              "lineno": 56,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Returns a list of sections delimited by Markdown headings (#..######).\nEach tuple: (title, start, end) where [start:end] bounds the section text.",
          "endpoint": null,
          "is_async": false,
          "lineno": 43,
          "name": "_split_markdown_sections",
          "qualname": "_split_markdown_sections",
          "return_annotation": "List[Section]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_CODEBLOCK_RE.finditer(block)",
              "lineno": 67,
              "name": "_CODEBLOCK_RE.finditer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.start()",
              "lineno": 69,
              "name": "m.start",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "masked.extend(_SENTENCE_RE.split(plain))",
              "lineno": 70,
              "name": "masked.extend",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_SENTENCE_RE.split(plain)",
              "lineno": 70,
              "name": "_SENTENCE_RE.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "masked.append(block[m.start():m.end()])",
              "lineno": 72,
              "name": "masked.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.start()",
              "lineno": 72,
              "name": "m.start",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.end()",
              "lineno": 72,
              "name": "m.end",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.end()",
              "lineno": 73,
              "name": "m.end",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "masked.extend(_SENTENCE_RE.split(block[idx:]))",
              "lineno": 75,
              "name": "masked.extend",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_SENTENCE_RE.split(block[idx:])",
              "lineno": 75,
              "name": "_SENTENCE_RE.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "s.strip()",
              "lineno": 78,
              "name": "s.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "s.strip()",
              "lineno": 78,
              "name": "s.strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Simple, fast sentence splitter. Not perfect, but robust enough for docs.\nKeeps code blocks intact (don\u2019t split inside ```...```).",
          "endpoint": null,
          "is_async": false,
          "lineno": 59,
          "name": "_split_sentences",
          "qualname": "_split_sentences",
          "return_annotation": "List[Sentence]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "int(token_counter(s))",
              "lineno": 87,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "token_counter(s)",
              "lineno": 87,
              "name": "token_counter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "max(1, len(s.split()))",
              "lineno": 91,
              "name": "max",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(s.split())",
              "lineno": 91,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "s.split()",
              "lineno": 91,
              "name": "s.split",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Estimate token count. If a tokenizer is provided (e.g., bge-m3),\nwe use it; otherwise approximate via word count.",
          "endpoint": null,
          "is_async": false,
          "lineno": 80,
          "name": "_estimate_tokens",
          "qualname": "_estimate_tokens",
          "return_annotation": "int"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "text.strip()",
              "lineno": 111,
              "name": "text.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_split_markdown_sections(text)",
              "lineno": 114,
              "name": "_split_markdown_sections",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(text)",
              "lineno": 114,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "text[s:e].strip()",
              "lineno": 117,
              "name": "text.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_split_sentences(block)",
              "lineno": 120,
              "name": "_split_sentences",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(sentences)",
              "lineno": 128,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_estimate_tokens(sent, token_counter)",
              "lineno": 130,
              "name": "_estimate_tokens",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "' '.join(cur).strip()",
              "lineno": 134,
              "name": " .join.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "' '.join(cur)",
              "lineno": 134,
              "name": " .join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_estimate_tokens(prev, token_counter)",
              "lineno": 149,
              "name": "_estimate_tokens",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "cur.insert(0, prev)",
              "lineno": 150,
              "name": "cur.insert",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "cur.append(sent)",
              "lineno": 156,
              "name": "cur.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "' '.join(cur).strip()",
              "lineno": 162,
              "name": " .join.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "' '.join(cur)",
              "lineno": 162,
              "name": " .join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Markdown-aware, sentence-aware, token-aware chunker.\n- Splits by Markdown sections (H1..H6), then by sentences.\n- Packs sentences greedily up to `max_tokens`.\n- Adds window overlap of ~`overlap_tokens` by sentence reuse.\n- Optionally prefixes chunks with the section title as context.\n\nYields plain text chunks (strings).",
          "endpoint": null,
          "is_async": false,
          "lineno": 93,
          "name": "smart_chunks",
          "qualname": "smart_chunks",
          "return_annotation": "Iterable[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "kwargs.setdefault('respect_markdown', True)",
              "lineno": 175,
              "name": "kwargs.setdefault",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "smart_chunks(text, **kwargs)",
              "lineno": 176,
              "name": "smart_chunks",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Alias for smart_chunks(text, respect_markdown=True).",
          "endpoint": null,
          "is_async": false,
          "lineno": 171,
          "name": "md_aware_chunks",
          "qualname": "md_aware_chunks",
          "return_annotation": "Iterable[str]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        }
      ],
      "module": "app.utils.chunk",
      "path": "Src/backend/app/utils/chunk.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "json.dumps(value, sort_keys=True, separators=(',', ':'))",
              "lineno": 32,
              "name": "json.dumps",
              "resolved_module": "json"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Generate a JSON-based ordering key for arbitrary canonical values.",
          "endpoint": null,
          "is_async": false,
          "lineno": 29,
          "name": "_sort_key",
          "qualname": "_sort_key",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_canonicalise(item)",
              "lineno": 38,
              "name": "_canonicalise",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(items, key=_sort_key)",
              "lineno": 40,
              "name": "sorted",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a JSON-serialisable list with deterministic ordering.",
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "_stable_sequence",
          "qualname": "_stable_sequence",
          "return_annotation": "list[Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_canonicalise(value)",
              "lineno": 47,
              "name": "_canonicalise",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(mapping.items())",
              "lineno": 47,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mapping.items()",
              "lineno": 47,
              "name": "mapping.items",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a mapping with deterministic keys and stable nested values.",
          "endpoint": null,
          "is_async": false,
          "lineno": 44,
          "name": "_canonicalise_mapping",
          "qualname": "_canonicalise_mapping",
          "return_annotation": "dict[str, Any]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, datetime)",
              "lineno": 53,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.replace(tzinfo=timezone.utc)",
              "lineno": 54,
              "name": "value.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "aware.astimezone(timezone.utc).isoformat()",
              "lineno": 55,
              "name": "aware.astimezone.isoformat",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "aware.astimezone(timezone.utc)",
              "lineno": 55,
              "name": "aware.astimezone",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, date)",
              "lineno": 56,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.isoformat()",
              "lineno": 57,
              "name": "value.isoformat",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, Decimal)",
              "lineno": 58,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(value)",
              "lineno": 59,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, bytes)",
              "lineno": 60,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.hex()",
              "lineno": 61,
              "name": "value.hex",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, Mapping)",
              "lineno": 62,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_canonicalise_mapping(value)",
              "lineno": 63,
              "name": "_canonicalise_mapping",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, set)",
              "lineno": 64,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_stable_sequence(value, sort=True)",
              "lineno": 65,
              "name": "_stable_sequence",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, (list, tuple))",
              "lineno": 66,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_stable_sequence(value)",
              "lineno": 67,
              "name": "_stable_sequence",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "is_dataclass(value)",
              "lineno": 68,
              "name": "is_dataclass",
              "resolved_module": "dataclasses.is_dataclass"
            },
            {
              "category": "internal",
              "display": "_canonicalise_mapping(asdict(value))",
              "lineno": 69,
              "name": "_canonicalise_mapping",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "asdict(value)",
              "lineno": 69,
              "name": "asdict",
              "resolved_module": "dataclasses.asdict"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Convert arbitrary values into JSON-friendly deterministic forms.",
          "endpoint": null,
          "is_async": false,
          "lineno": 50,
          "name": "_canonicalise",
          "qualname": "_canonicalise",
          "return_annotation": "Any"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "json.dumps(_canonicalise(obj), sort_keys=True, separators=(',', ':'))",
              "lineno": 76,
              "name": "json.dumps",
              "resolved_module": "json"
            },
            {
              "category": "internal",
              "display": "_canonicalise(obj)",
              "lineno": 76,
              "name": "_canonicalise",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Serialise *obj* to a deterministic JSON string.",
          "endpoint": null,
          "is_async": false,
          "lineno": 73,
          "name": "canonical_dumps",
          "qualname": "canonical_dumps",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(key, bytes)",
              "lineno": 84,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "key.encode('utf-8')",
              "lineno": 86,
              "name": "key.encode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Normalise optional key inputs to raw bytes.",
          "endpoint": null,
          "is_async": false,
          "lineno": 79,
          "name": "_normalise_key",
          "qualname": "_normalise_key",
          "return_annotation": "bytes | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_normalise_key(key)",
              "lineno": 92,
              "name": "_normalise_key",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "blake3.blake3(key=key_bytes, data=data).hexdigest()",
              "lineno": 95,
              "name": "blake3.blake3.hexdigest",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "blake3.blake3(key=key_bytes, data=data)",
              "lineno": 95,
              "name": "blake3.blake3",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "blake3.blake3(data).hexdigest()",
              "lineno": 96,
              "name": "blake3.blake3.hexdigest",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "blake3.blake3(data)",
              "lineno": 96,
              "name": "blake3.blake3",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "logger.debug('blake3 unavailable; falling back to sha256 hashing')",
              "lineno": 99,
              "name": "logger.debug",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hmac.new(key_bytes, data, digestmod=hashlib.sha256).hexdigest()",
              "lineno": 103,
              "name": "hmac.new.hexdigest",
              "resolved_module": "hmac"
            },
            {
              "category": "internal",
              "display": "hmac.new(key_bytes, data, digestmod=hashlib.sha256)",
              "lineno": 103,
              "name": "hmac.new",
              "resolved_module": "hmac"
            },
            {
              "category": "internal",
              "display": "hashlib.sha256()",
              "lineno": 104,
              "name": "hashlib.sha256",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "digest.update(data)",
              "lineno": 105,
              "name": "digest.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "digest.hexdigest()",
              "lineno": 106,
              "name": "digest.hexdigest",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Hash raw bytes using the requested algorithm with optional keying.",
          "endpoint": null,
          "is_async": false,
          "lineno": 89,
          "name": "hash_bytes",
          "qualname": "hash_bytes",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "text.encode(encoding)",
              "lineno": 119,
              "name": "text.encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "f'{namespace}::'.encode(encoding)",
              "lineno": 121,
              "name": "encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hash_bytes(payload, algo=algo, key=key)",
              "lineno": 122,
              "name": "hash_bytes",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Hash textual input with stable encoding and optional namespace prefix.",
          "endpoint": null,
          "is_async": false,
          "lineno": 109,
          "name": "hash_text",
          "qualname": "hash_text",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "canonical_dumps(obj).encode('utf-8')",
              "lineno": 134,
              "name": "canonical_dumps.encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "canonical_dumps(obj)",
              "lineno": 134,
              "name": "canonical_dumps",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "f'{namespace}::'.encode('utf-8')",
              "lineno": 136,
              "name": "encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hash_bytes(serialised, algo=algo, key=key)",
              "lineno": 137,
              "name": "hash_bytes",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Hash an arbitrary JSON-like structure deterministically.",
          "endpoint": null,
          "is_async": false,
          "lineno": 125,
          "name": "hash_json",
          "qualname": "hash_json",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "hash_json(obj, algo=algo, key=key, namespace=namespace)",
              "lineno": 149,
              "name": "hash_json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Backward compatible helper for hashing structured call arguments.",
          "endpoint": null,
          "is_async": false,
          "lineno": 140,
          "name": "hash_args",
          "qualname": "hash_args",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "Path(path)",
              "lineno": 161,
              "name": "Path",
              "resolved_module": "pathlib.Path"
            },
            {
              "category": "internal",
              "display": "_normalise_key(key)",
              "lineno": 163,
              "name": "_normalise_key",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "blake3.blake3(key=key_bytes)",
              "lineno": 166,
              "name": "blake3.blake3",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "blake3.blake3()",
              "lineno": 166,
              "name": "blake3.blake3",
              "resolved_module": "blake3"
            },
            {
              "category": "internal",
              "display": "logger.debug('blake3 unavailable; falling back to sha256 hashing')",
              "lineno": 168,
              "name": "logger.debug",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_hash_file_hmac(file_path, key_bytes, chunk_size)",
              "lineno": 173,
              "name": "_hash_file_hmac",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hashlib.sha256()",
              "lineno": 174,
              "name": "hashlib.sha256",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "file_path.open('rb')",
              "lineno": 176,
              "name": "file_path.open",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "iter(lambda: handle.read(chunk_size), b'')",
              "lineno": 177,
              "name": "iter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "handle.read(chunk_size)",
              "lineno": 177,
              "name": "handle.read",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hasher.update(chunk)",
              "lineno": 178,
              "name": "hasher.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hasher.hexdigest()",
              "lineno": 179,
              "name": "hasher.hexdigest",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Stream a file from disk and compute its digest.",
          "endpoint": null,
          "is_async": false,
          "lineno": 152,
          "name": "hash_file",
          "qualname": "hash_file",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "hmac.new(key, digestmod=hashlib.sha256)",
              "lineno": 185,
              "name": "hmac.new",
              "resolved_module": "hmac"
            },
            {
              "category": "internal",
              "display": "file_path.open('rb')",
              "lineno": 186,
              "name": "file_path.open",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "iter(lambda: handle.read(chunk_size), b'')",
              "lineno": 187,
              "name": "iter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "handle.read(chunk_size)",
              "lineno": 187,
              "name": "handle.read",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mac.update(chunk)",
              "lineno": 188,
              "name": "mac.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mac.hexdigest()",
              "lineno": 189,
              "name": "mac.hexdigest",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Compute an HMAC-SHA256 digest for a file stream.",
          "endpoint": null,
          "is_async": false,
          "lineno": 182,
          "name": "_hash_file_hmac",
          "qualname": "_hash_file_hmac",
          "return_annotation": "str"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "hashlib",
          "source": "hashlib",
          "type": "import"
        },
        {
          "alias": "hmac",
          "source": "hmac",
          "type": "import"
        },
        {
          "alias": "json",
          "source": "json",
          "type": "import"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Iterable",
          "source": "collections.abc.Iterable",
          "type": "from"
        },
        {
          "alias": "Mapping",
          "source": "collections.abc.Mapping",
          "type": "from"
        },
        {
          "alias": "asdict",
          "source": "dataclasses.asdict",
          "type": "from"
        },
        {
          "alias": "is_dataclass",
          "source": "dataclasses.is_dataclass",
          "type": "from"
        },
        {
          "alias": "date",
          "source": "datetime.date",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Decimal",
          "source": "decimal.Decimal",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Final",
          "source": "typing.Final",
          "type": "from"
        },
        {
          "alias": "Literal",
          "source": "typing.Literal",
          "type": "from"
        }
      ],
      "module": "app.utils.hashing",
      "path": "Src/backend/app/utils/hashing.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "http",
              "display": "httpx.Client(timeout=timeout or 30)",
              "lineno": 16,
              "name": "httpx.Client",
              "resolved_module": "httpx"
            },
            {
              "category": "internal",
              "display": "client.close()",
              "lineno": 20,
              "name": "client.close",
              "resolved_module": null
            }
          ],
          "decorators": [
            "contextmanager"
          ],
          "dependencies": [],
          "docstring": "Yield a configured httpx.Client with reasonable defaults.\n\nThis centralizes HTTP settings so adapters can share common behavior.",
          "endpoint": null,
          "is_async": false,
          "lineno": 10,
          "name": "sync_client",
          "qualname": "sync_client",
          "return_annotation": "Iterator[httpx.Client]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "contextmanager",
          "source": "contextlib.contextmanager",
          "type": "from"
        },
        {
          "alias": "Iterator",
          "source": "typing.Iterator",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        }
      ],
      "module": "app.utils.http",
      "path": "Src/backend/app/utils/http.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Protocol describing the redis-py interface required for idempotency.",
          "lineno": 17,
          "methods": [
            "set"
          ],
          "name": "SupportsSetNx"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(int(time.time()))",
              "lineno": 37,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(time.time())",
              "lineno": 37,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "time.time()",
              "lineno": 37,
              "name": "time.time",
              "resolved_module": "time"
            },
            {
              "category": "internal",
              "display": "bool(_redis_client.set(namespaced, timestamp, nx=True, ex=ttl_seconds))",
              "lineno": 38,
              "name": "bool",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_redis_client.set(namespaced, timestamp, nx=True, ex=ttl_seconds)",
              "lineno": 38,
              "name": "_redis_client.set",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return ``True`` if *key* is acquired for the first time within ``ttl_seconds``.",
          "endpoint": null,
          "is_async": false,
          "lineno": 31,
          "name": "acquire_once",
          "qualname": "acquire_once",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "key_factory()",
              "lineno": 46,
              "name": "key_factory",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "acquire_once(key, ttl_seconds)",
              "lineno": 47,
              "name": "acquire_once",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fn(*args, **kwargs)",
              "lineno": 49,
              "name": "fn",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Decorator applying :func:`acquire_once` using a lazily computed key.",
          "endpoint": null,
          "is_async": false,
          "lineno": 41,
          "name": "idempotent_call",
          "qualname": "idempotent_call",
          "return_annotation": "Callable[[Callable[..., Any]], Callable[..., Any]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "key.lower()",
              "lineno": 59,
              "name": "key.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "headers.items()",
              "lineno": 59,
              "name": "headers.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "headers.get(candidate)",
              "lineno": 63,
              "name": "headers.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "lowered.get(candidate.lower())",
              "lineno": 66,
              "name": "lowered.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "candidate.lower()",
              "lineno": 66,
              "name": "candidate.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_first_present('X-Idempotency-Key', 'Idempotency-Key')",
              "lineno": 71,
              "name": "_first_present",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_first_present('X-Request-Id')",
              "lineno": 75,
              "name": "_first_present",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_first_present('X-GitHub-Delivery')",
              "lineno": 79,
              "name": "_first_present",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_first_present('X-Atlassian-Webhook-Identifier', 'X-Atlassian-Request-Id')",
              "lineno": 83,
              "name": "_first_present",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "headers.items()",
              "lineno": 89,
              "name": "headers.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "key.lower()",
              "lineno": 90,
              "name": "key.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hash_json({'headers': subset, 'body': (body_bytes.decode('utf-8', 'ignore') if body_bytes else '')[:4096]}, algo='sha256', namespace='idempotency')",
              "lineno": 92,
              "name": "hash_json",
              "resolved_module": "app.utils.hashing.hash_json"
            },
            {
              "category": "internal",
              "display": "body_bytes.decode('utf-8', 'ignore')",
              "lineno": 95,
              "name": "body_bytes.decode",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Generate a deterministic idempotency key from HTTP headers and body.",
          "endpoint": null,
          "is_async": false,
          "lineno": 56,
          "name": "request_key",
          "qualname": "request_key",
          "return_annotation": "str"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Protocol",
          "source": "typing.Protocol",
          "type": "from"
        },
        {
          "alias": "redis",
          "source": "redis",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "hash_json",
          "source": "app.utils.hashing.hash_json",
          "type": "from"
        }
      ],
      "module": "app.utils.idempotency",
      "path": "Src/backend/app/utils/idempotency.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "inspect(engine)",
              "lineno": 12,
              "name": "inspect",
              "resolved_module": "sqlalchemy.inspect"
            },
            {
              "category": "internal",
              "display": "inspector.get_table_names()",
              "lineno": 14,
              "name": "inspector.get_table_names",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "engine.begin()",
              "lineno": 15,
              "name": "engine.begin",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conn.execute(text('UPDATE developer_skill SET last_seen_at = CURRENT_TIMESTAMP WHERE last_seen_at IS NULL'))",
              "lineno": 16,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('UPDATE developer_skill SET last_seen_at = CURRENT_TIMESTAMP WHERE last_seen_at IS NULL')",
              "lineno": 17,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "engine.dialect.name.startswith('postgres')",
              "lineno": 21,
              "name": "engine.dialect.name.startswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conn.execute(text('ALTER TABLE developer_skill ALTER COLUMN last_seen_at SET DEFAULT CURRENT_TIMESTAMP'))",
              "lineno": 22,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('ALTER TABLE developer_skill ALTER COLUMN last_seen_at SET DEFAULT CURRENT_TIMESTAMP')",
              "lineno": 23,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "conn.execute(text('ALTER TABLE developer_skill ALTER COLUMN last_seen_at SET NOT NULL'))",
              "lineno": 27,
              "name": "conn.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('ALTER TABLE developer_skill ALTER COLUMN last_seen_at SET NOT NULL')",
              "lineno": 27,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "logger.info('skill_attribution_schema.ensure.complete')",
              "lineno": 29,
              "name": "logger.info",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "ensure_skill_attribution_schema",
          "qualname": "ensure_skill_attribution_schema",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "inspect",
          "source": "sqlalchemy.inspect",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "Engine",
          "source": "sqlalchemy.engine.Engine",
          "type": "from"
        }
      ],
      "module": "app.utils.migrations.skill_attribution",
      "path": "Src/backend/app/utils/migrations/skill_attribution.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.username == username).one_or_none()",
              "lineno": 16,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User).filter(m.User.username == username)",
              "lineno": 16,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.User)",
              "lineno": 16,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User(username=username, password_hash=password, role=role, tenant_id=tenant_id)",
              "lineno": 18,
              "name": "m.User",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(user)",
              "lineno": 19,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.flush()",
              "lineno": 20,
              "name": "db.flush",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "_get_or_create_user",
          "qualname": "_get_or_create_user",
          "return_annotation": "m.User"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == key, m.Project.tenant_id == tenant_id).one_or_none()",
              "lineno": 30,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project).filter(m.Project.key == key, m.Project.tenant_id == tenant_id)",
              "lineno": 30,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Project)",
              "lineno": 30,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Project(key=key, name=name, description=description, tenant_id=tenant_id)",
              "lineno": 32,
              "name": "m.Project",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(project)",
              "lineno": 33,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.flush()",
              "lineno": 34,
              "name": "db.flush",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 29,
          "name": "_get_or_create_project",
          "qualname": "_get_or_create_project",
          "return_annotation": "m.Project"
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "db.query(m.Skill).filter(m.Skill.path_cache == path).one_or_none()",
              "lineno": 51,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Skill).filter(m.Skill.path_cache == path)",
              "lineno": 51,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Skill)",
              "lineno": 51,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Skill(name=display_name, parent_id=parent.id if parent else None, path_cache=path, depth=depth if depth is not None else parent.depth + 1 if parent else 0)",
              "lineno": 53,
              "name": "m.Skill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(skill)",
              "lineno": 59,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.flush()",
              "lineno": 60,
              "name": "db.flush",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 43,
          "name": "_get_or_create_skill",
          "qualname": "_get_or_create_skill",
          "return_annotation": "m.Skill"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "deps.SessionLocal()",
              "lineno": 69,
              "name": "deps.SessionLocal",
              "resolved_module": "app.deps"
            },
            {
              "category": "database",
              "display": "db.query(m.Tenant).filter(m.Tenant.id == tenant_id).one_or_none()",
              "lineno": 70,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Tenant).filter(m.Tenant.id == tenant_id)",
              "lineno": 70,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Tenant)",
              "lineno": 70,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.add(m.Tenant(id=tenant_id, name='North Star Demo Tenant'))",
              "lineno": 71,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Tenant(id=tenant_id, name='North Star Demo Tenant')",
              "lineno": 71,
              "name": "m.Tenant",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.flush()",
              "lineno": 72,
              "name": "db.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_user(db, tenant_id=tenant_id, username=username, role=role, password='x')",
              "lineno": 82,
              "name": "_get_or_create_user",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.user_id == users['dev_alex'].id).one_or_none()",
              "lineno": 86,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer).filter(m.Developer.user_id == users['dev_alex'].id)",
              "lineno": 86,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Developer)",
              "lineno": 86,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Developer(user_id=users['dev_alex'].id, display_name='Alex Developer', tenant_id=tenant_id)",
              "lineno": 88,
              "name": "m.Developer",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.add(developer)",
              "lineno": 93,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.flush()",
              "lineno": 94,
              "name": "db.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_project(db, tenant_id=tenant_id, key=key, name=name, description=description)",
              "lineno": 102,
              "name": "_get_or_create_project",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).filter(m.Assignment.developer_id == developer.id, m.Assignment.project_id == projects['PX'].id).one_or_none()",
              "lineno": 107,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment).filter(m.Assignment.developer_id == developer.id, m.Assignment.project_id == projects['PX'].id)",
              "lineno": 107,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.Assignment)",
              "lineno": 107,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.add(m.Assignment(developer_id=developer.id, project_id=projects['PX'].id, role='Engineer', start_date=date(2024, 6, 1), status='active'))",
              "lineno": 115,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Assignment(developer_id=developer.id, project_id=projects['PX'].id, role='Engineer', start_date=date(2024, 6, 1), status='active')",
              "lineno": 116,
              "name": "m.Assignment",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "date(2024, 6, 1)",
              "lineno": 120,
              "name": "date",
              "resolved_module": "datetime.date"
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering', display_name='Engineering', depth=0)",
              "lineno": 126,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering.backend', display_name='Backend', parent=eng)",
              "lineno": 127,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering.data', display_name='Data', parent=eng)",
              "lineno": 128,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering.backend.kafka', display_name='Apache Kafka', parent=backend)",
              "lineno": 129,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering.backend.python', display_name='Python', parent=backend)",
              "lineno": 135,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_or_create_skill(db, path='engineering.data.spark', display_name='Apache Spark', parent=data)",
              "lineno": 141,
              "name": "_get_or_create_skill",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "{'PX': {kafka.id: 0.9, python_skill.id: 0.8}, 'PB': {python_skill.id: 0.7, spark.id: 0.6}}.items()",
              "lineno": 148,
              "name": "items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "skill_weights.items()",
              "lineno": 159,
              "name": "skill_weights.items",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill).filter(m.ProjectSkill.project_id == project.id, m.ProjectSkill.skill_id == skill_id).one_or_none()",
              "lineno": 161,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill).filter(m.ProjectSkill.project_id == project.id, m.ProjectSkill.skill_id == skill_id)",
              "lineno": 161,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.ProjectSkill)",
              "lineno": 161,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.add(m.ProjectSkill(project_id=project.id, skill_id=skill_id, importance=importance))",
              "lineno": 166,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.ProjectSkill(project_id=project.id, skill_id=skill_id, importance=importance)",
              "lineno": 167,
              "name": "m.ProjectSkill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "{kafka: 0.82, python_skill: 0.88, spark: 0.55}.items()",
              "lineno": 174,
              "name": "items",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill).filter(m.DeveloperSkill.developer_id == developer.id, m.DeveloperSkill.skill_id == skill.id).one_or_none()",
              "lineno": 180,
              "name": "db.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill).filter(m.DeveloperSkill.developer_id == developer.id, m.DeveloperSkill.skill_id == skill.id)",
              "lineno": 180,
              "name": "db.query.filter",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.query(m.DeveloperSkill)",
              "lineno": 180,
              "name": "db.query",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "db.add(m.DeveloperSkill(developer_id=developer.id, skill_id=skill.id, score=score, confidence=0.75))",
              "lineno": 188,
              "name": "db.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.DeveloperSkill(developer_id=developer.id, skill_id=skill.id, score=score, confidence=0.75)",
              "lineno": 189,
              "name": "m.DeveloperSkill",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "db.commit()",
              "lineno": 197,
              "name": "db.commit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create deterministic seed data if the database is empty.",
          "endpoint": null,
          "is_async": false,
          "lineno": 64,
          "name": "ensure_seed_data",
          "qualname": "ensure_seed_data",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "date",
          "source": "datetime.date",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Tuple",
          "source": "typing.Tuple",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "app.utils.seed_data",
      "path": "Src/backend/app/utils/seed_data.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 12,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return a timezone-aware UTC timestamp.",
          "endpoint": null,
          "is_async": false,
          "lineno": 9,
          "name": "now_utc",
          "qualname": "now_utc",
          "return_annotation": "datetime"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "now_utc().strftime(ISO_FMT)",
              "lineno": 18,
              "name": "now_utc.strftime",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "now_utc()",
              "lineno": 18,
              "name": "now_utc",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return the current UTC time formatted as ISO-8601.",
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "now_iso",
          "qualname": "now_iso",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "value.endswith('Z')",
              "lineno": 24,
              "name": "value.endswith",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.strptime(value, ISO_FMT).replace(tzinfo=timezone.utc)",
              "lineno": 26,
              "name": "datetime.strptime.replace",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.strptime(value, ISO_FMT)",
              "lineno": 26,
              "name": "datetime.strptime",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.fromisoformat(value.replace('Z', '+00:00'))",
              "lineno": 28,
              "name": "datetime.fromisoformat",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "value.replace('Z', '+00:00')",
              "lineno": 28,
              "name": "value.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.fromisoformat(value)",
              "lineno": 29,
              "name": "datetime.fromisoformat",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "parsed.replace(tzinfo=timezone.utc)",
              "lineno": 30,
              "name": "parsed.replace",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Parse an ISO-8601 string into a timezone-aware datetime.",
          "endpoint": null,
          "is_async": false,
          "lineno": 21,
          "name": "parse_iso",
          "qualname": "parse_iso",
          "return_annotation": "datetime"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_DURATION_RE.match(value or '')",
              "lineno": 38,
              "name": "_DURATION_RE.match",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ValueError(f'Invalid duration: {value}')",
              "lineno": 40,
              "name": "ValueError",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "int(match.group(1))",
              "lineno": 41,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "match.group(1)",
              "lineno": 41,
              "name": "match.group",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "match.group(2).lower()",
              "lineno": 41,
              "name": "match.group.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "match.group(2)",
              "lineno": 41,
              "name": "match.group",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Parse strings like ``30s`` or ``2h`` into seconds.",
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "parse_duration",
          "qualname": "parse_duration",
          "return_annotation": "int"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "timedelta(seconds=secs)",
              "lineno": 48,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Return ``dt`` shifted by ``secs`` seconds.",
          "endpoint": null,
          "is_async": false,
          "lineno": 45,
          "name": "add_seconds",
          "qualname": "add_seconds",
          "return_annotation": "datetime"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        }
      ],
      "module": "app.utils.time",
      "path": "Src/backend/app/utils/time.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "originals.items()",
              "lineno": 63,
              "name": "originals.items",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "setattr(settings, key, value)",
              "lineno": 64,
              "name": "setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture(autouse=True)",
              "lineno": 30,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 31,
          "name": "_tune_settings",
          "qualname": "_tune_settings",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "database",
              "display": "create_engine('sqlite:///:memory:', future=True)",
              "lineno": 69,
              "name": "create_engine",
              "resolved_module": "sqlalchemy.create_engine"
            },
            {
              "category": "internal",
              "display": "m.Base.metadata.create_all(engine)",
              "lineno": 70,
              "name": "m.Base.metadata.create_all",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "database",
              "display": "sessionmaker(bind=engine, autoflush=False, autocommit=False, expire_on_commit=False, future=True)",
              "lineno": 71,
              "name": "sessionmaker",
              "resolved_module": "sqlalchemy.orm.sessionmaker"
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(db, 'engine', engine, raising=False)",
              "lineno": 79,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(db, 'SessionLocal', SessionTest, raising=False)",
              "lineno": 80,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(skill_extractor, 'engine', engine, raising=False)",
              "lineno": 81,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(skill_extractor, 'generate_skill_assertions', fake_generate_skill_assertions)",
              "lineno": 86,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture()",
              "lineno": 67,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 68,
          "name": "session_factory",
          "qualname": "session_factory",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 91,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Tenant(id='tenant-1', name='Tenant One')",
              "lineno": 93,
              "name": "m.Tenant",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(tenant)",
              "lineno": 94,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Project(key='PX', name='Project X', description='Test Project', tenant_id=tenant.id)",
              "lineno": 97,
              "name": "m.Project",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(project)",
              "lineno": 103,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User(username='devuser', password_hash='hash', role='Dev', tenant_id=tenant.id)",
              "lineno": 104,
              "name": "m.User",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(user)",
              "lineno": 105,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 106,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Developer(user_id=user.id, display_name='Dev User', tenant_id=tenant.id)",
              "lineno": 107,
              "name": "m.Developer",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(developer)",
              "lineno": 108,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 109,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.DeveloperIdentity(developer_id=developer.id, tenant_id=tenant.id, provider='github', provider_login=login.lower() if login else None, email=email, email_lower=email.lower() if email else None, is_primary=True, metadata_json={})",
              "lineno": 110,
              "name": "m.DeveloperIdentity",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "login.lower()",
              "lineno": 114,
              "name": "login.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "email.lower()",
              "lineno": 116,
              "name": "email.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.add(identity)",
              "lineno": 120,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.RepositoryMapping(provider='github', repo_full_name='acme/widgets', tenant_id=tenant.id, project_id=project_id, metadata_json={}, active=True)",
              "lineno": 122,
              "name": "m.RepositoryMapping",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(mapping)",
              "lineno": 130,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.commit()",
              "lineno": 131,
              "name": "session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 140,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 90,
          "name": "_seed_core_entities",
          "qualname": "_seed_core_entities",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 144,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User(username='reviewer', password_hash='hash', role='Dev', tenant_id=tenant_id)",
              "lineno": 146,
              "name": "m.User",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(user)",
              "lineno": 147,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 148,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Developer(user_id=user.id, display_name='Reviewer', tenant_id=tenant_id)",
              "lineno": 149,
              "name": "m.Developer",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(developer)",
              "lineno": 150,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 151,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.DeveloperIdentity(developer_id=developer.id, tenant_id=tenant_id, provider='github', provider_login=login.lower(), email=email, email_lower=email.lower() if email else None, is_primary=True, metadata_json={})",
              "lineno": 152,
              "name": "m.DeveloperIdentity",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "login.lower()",
              "lineno": 156,
              "name": "login.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "email.lower()",
              "lineno": 158,
              "name": "email.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.add(identity)",
              "lineno": 162,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.commit()",
              "lineno": 163,
              "name": "session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 166,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 143,
          "name": "_create_reviewer",
          "qualname": "_create_reviewer",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "GitHubEventProcessor(payload).process()",
              "lineno": 171,
              "name": "GitHubEventProcessor.process",
              "resolved_module": "worker.services.github_processor.GitHubEventProcessor"
            },
            {
              "category": "integration",
              "display": "GitHubEventProcessor(payload)",
              "lineno": 171,
              "name": "GitHubEventProcessor",
              "resolved_module": "worker.services.github_processor.GitHubEventProcessor"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 169,
          "name": "_process_github",
          "qualname": "_process_github",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "JiraEventProcessor(body).process()",
              "lineno": 175,
              "name": "JiraEventProcessor.process",
              "resolved_module": "worker.services.jira_processor.JiraEventProcessor"
            },
            {
              "category": "integration",
              "display": "JiraEventProcessor(body)",
              "lineno": 175,
              "name": "JiraEventProcessor",
              "resolved_module": "worker.services.jira_processor.JiraEventProcessor"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 174,
          "name": "_process_jira",
          "qualname": "_process_jira",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "created_at.isoformat()",
              "lineno": 185,
              "name": "created_at.isoformat",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "merged_at.isoformat()",
              "lineno": 186,
              "name": "merged_at.isoformat",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "user_payload.get('login', 'sender')",
              "lineno": 191,
              "name": "user_payload.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 178,
          "name": "_base_pr_payload",
          "qualname": "_base_pr_payload",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "done_at.isoformat()",
              "lineno": 203,
              "name": "done_at.isoformat",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 195,
          "name": "_jira_payload",
          "qualname": "_jira_payload",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc).isoformat()",
              "lineno": 222,
              "name": "datetime.now.isoformat",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 222,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 209,
          "name": "_pull_request_review_payload",
          "qualname": "_pull_request_review_payload",
          "return_annotation": null
        },
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 229,
          "name": "_pull_request_comment_payload",
          "qualname": "_pull_request_comment_payload",
          "return_annotation": null
        },
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 246,
          "name": "_push_payload",
          "qualname": "_push_payload",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 269,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 271,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(123, merged=True, merged_at=now, created_at=now - timedelta(hours=2), user_payload={'email': 'dev@example.com'})",
              "lineno": 272,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=2)",
              "lineno": 276,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-email')",
              "lineno": 279,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 280,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 280,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 282,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 284,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 284,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 + settings.time_to_merge_bonus)",
              "lineno": 286,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 289,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 267,
          "name": "test_identity_match_by_email",
          "qualname": "test_identity_match_by_email",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, login='octocat')",
              "lineno": 294,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 296,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(234, merged=True, merged_at=now, created_at=now - timedelta(hours=1), user_payload={'login': 'OctoCat'})",
              "lineno": 297,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=1)",
              "lineno": 301,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-login')",
              "lineno": 304,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 305,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 305,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 307,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 309,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 309,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 312,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 292,
          "name": "test_identity_match_by_login",
          "qualname": "test_identity_match_by_login",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 317,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 318,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(345, merged=True, merged_at=now, created_at=now - timedelta(hours=1), user_payload={'login': 'unknown'})",
              "lineno": 319,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=1)",
              "lineno": 323,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-miss')",
              "lineno": 326,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 328,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).count()",
              "lineno": 330,
              "name": "session.query.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 330,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.AttributionTriage).one()",
              "lineno": 331,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.AttributionTriage)",
              "lineno": 331,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 334,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 315,
          "name": "test_no_match_creates_triage",
          "qualname": "test_no_match_creates_triage",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com', project_required=True)",
              "lineno": 339,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 340,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(456, merged=True, merged_at=now, created_at=now - timedelta(hours=3), user_payload={'email': 'dev@example.com'})",
              "lineno": 341,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=3)",
              "lineno": 345,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-project')",
              "lineno": 348,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 349,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 349,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 351,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 353,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 353,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 356,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 337,
          "name": "test_repo_mapping_context_applies_project",
          "qualname": "test_repo_mapping_context_applies_project",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 361,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 363,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_push_payload(email='dev@example.com', login='devuser')",
              "lineno": 364,
              "name": "_push_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('push', push_payload['payload'], 'push-delivery')",
              "lineno": 365,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 366,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 366,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(567, merged=True, merged_at=now, created_at=now - timedelta(hours=2), user_payload={'email': 'dev@example.com'})",
              "lineno": 368,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=2)",
              "lineno": 372,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-order')",
              "lineno": 375,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-order')",
              "lineno": 376,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 378,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).all()",
              "lineno": 380,
              "name": "session.query.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 380,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(skills)",
              "lineno": 381,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 + settings.time_to_merge_bonus)",
              "lineno": 382,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.query(m.IntegrationEventLog).filter_by(provider='github', delivery_key='pr-order').all()",
              "lineno": 383,
              "name": "session.query.filter_by.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.IntegrationEventLog).filter_by(provider='github', delivery_key='pr-order')",
              "lineno": 383,
              "name": "session.query.filter_by",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.IntegrationEventLog)",
              "lineno": 383,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(events)",
              "lineno": 384,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 386,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 359,
          "name": "test_baseline_applies_once_out_of_order",
          "qualname": "test_baseline_applies_once_out_of_order",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 391,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 393,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(678, merged=False, merged_at=now, created_at=now - timedelta(hours=5), user_payload={'email': 'dev@example.com'})",
              "lineno": 394,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=5)",
              "lineno": 398,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', initial_pr, 'pr-first-open')",
              "lineno": 401,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_pull_request_review_payload(678, state='approved', user={'login': 'approver'})",
              "lineno": 403,
              "name": "_pull_request_review_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request_review', review_payload, 'review-first')",
              "lineno": 404,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 406,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 406,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(678, merged=True, merged_at=now, created_at=now - timedelta(hours=4), user_payload={'email': 'dev@example.com'})",
              "lineno": 408,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=4)",
              "lineno": 412,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-first-review')",
              "lineno": 415,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 417,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 419,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 419,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 + 1.0 + 0.3 + settings.time_to_merge_bonus)",
              "lineno": 420,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 422,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 389,
          "name": "test_first_review_bonus_applied",
          "qualname": "test_first_review_bonus_applied",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 427,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 429,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(789, merged=False, merged_at=now, created_at=now - timedelta(hours=6), user_payload={'email': 'dev@example.com'})",
              "lineno": 431,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=6)",
              "lineno": 435,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', initial_pr, 'pr-multi-open')",
              "lineno": 438,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_pull_request_review_payload(789, state='changes_requested', user=review_user)",
              "lineno": 439,
              "name": "_pull_request_review_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_pull_request_review_payload(789, state='changes_requested', user=review_user)",
              "lineno": 440,
              "name": "_pull_request_review_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 442,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 442,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request_review', review_changes, 'review-cycle-1')",
              "lineno": 443,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request_review', review_changes_again, 'review-cycle-2')",
              "lineno": 444,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(789, merged=True, merged_at=now, created_at=now - timedelta(hours=5), user_payload={'email': 'dev@example.com'})",
              "lineno": 445,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=5)",
              "lineno": 449,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-multi')",
              "lineno": 452,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 454,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 456,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 456,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 - 0.5 - 0.6 + settings.time_to_merge_bonus)",
              "lineno": 457,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 459,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 425,
          "name": "test_multi_round_penalty_applied",
          "qualname": "test_multi_round_penalty_applied",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 464,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 466,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "timedelta(hours=48)",
              "lineno": 467,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(890, merged=True, merged_at=merged_at, created_at=created_at, user_payload={'email': 'dev@example.com'})",
              "lineno": 468,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-time')",
              "lineno": 475,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=merged_at))",
              "lineno": 476,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=merged_at)",
              "lineno": 476,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 478,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 480,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 480,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 - 0.2)",
              "lineno": 481,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 483,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 462,
          "name": "test_time_to_merge_penalty",
          "qualname": "test_time_to_merge_penalty",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 488,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_create_reviewer(SessionTest, entities['tenant'].id, login='reviewer')",
              "lineno": 489,
              "name": "_create_reviewer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 491,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(901, merged=False, merged_at=now, created_at=now - timedelta(hours=4), user_payload={'email': 'dev@example.com'})",
              "lineno": 493,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=4)",
              "lineno": 497,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', initial_pr, 'pr-peer-open')",
              "lineno": 500,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_pull_request_review_payload(901, state='approved', user=review_user)",
              "lineno": 502,
              "name": "_pull_request_review_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request_review', review_payload, 'review-peer')",
              "lineno": 503,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(_jira_payload('PX-123', done_at=now))",
              "lineno": 505,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 505,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(901, merged=True, merged_at=now, created_at=now - timedelta(hours=3), user_payload={'email': 'dev@example.com'})",
              "lineno": 507,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=3)",
              "lineno": 511,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'pr-peer')",
              "lineno": 514,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 516,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 518,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 518,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 + 1.0 + 0.3 + settings.review_peer_credit + settings.time_to_merge_bonus)",
              "lineno": 519,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.query(m.PeerReviewCredit).all()",
              "lineno": 520,
              "name": "session.query.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.PeerReviewCredit)",
              "lineno": 520,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(credits)",
              "lineno": 521,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 524,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 486,
          "name": "test_peer_review_credit_applied",
          "qualname": "test_peer_review_credit_applied",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_core_entities(SessionTest, email='dev@example.com')",
              "lineno": 529,
              "name": "_seed_core_entities",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 531,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "_base_pr_payload(999, merged=True, merged_at=now, created_at=now - timedelta(hours=2), user_payload={'email': 'dev@example.com'})",
              "lineno": 532,
              "name": "_base_pr_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "timedelta(hours=2)",
              "lineno": 536,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "_jira_payload('PX-123', done_at=now)",
              "lineno": 539,
              "name": "_jira_payload",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'delivery-dup')",
              "lineno": 541,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(jira_body)",
              "lineno": 542,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_github('pull_request', pr_body, 'delivery-dup')",
              "lineno": 543,
              "name": "_process_github",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_process_jira(jira_body)",
              "lineno": 544,
              "name": "_process_jira",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SessionTest()",
              "lineno": 546,
              "name": "SessionTest",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill).one()",
              "lineno": 548,
              "name": "session.query.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.DeveloperSkill)",
              "lineno": 548,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.approx(1.0 + settings.time_to_merge_bonus)",
              "lineno": 549,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 551,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 527,
          "name": "test_idempotent_replays",
          "qualname": "test_idempotent_replays",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "skill_extractor",
          "source": "worker.handlers.skill_extractor",
          "type": "from"
        },
        {
          "alias": "db",
          "source": "worker.services.database",
          "type": "import"
        },
        {
          "alias": "GitHubEventProcessor",
          "source": "worker.services.github_processor.GitHubEventProcessor",
          "type": "from"
        },
        {
          "alias": "JiraEventProcessor",
          "source": "worker.services.jira_processor.JiraEventProcessor",
          "type": "from"
        }
      ],
      "module": "skill_tests.test_skill_attribution",
      "path": "Src/backend/skill_tests/test_skill_attribution.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "fake_generate_skill_assertions",
          "qualname": "fake_generate_skill_assertions",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "skill_extractor",
          "source": "worker.handlers.skill_extractor",
          "type": "from"
        },
        {
          "alias": "db",
          "source": "worker.services.database",
          "type": "import"
        },
        {
          "alias": "GitHubEventProcessor",
          "source": "worker.services.github_processor.GitHubEventProcessor",
          "type": "from"
        },
        {
          "alias": "JiraEventProcessor",
          "source": "worker.services.jira_processor.JiraEventProcessor",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        }
      ],
      "module": "temp_inspect",
      "path": "Src/backend/temp_inspect.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 34,
          "name": "fake_generate_skill_assertions",
          "qualname": "fake_generate_skill_assertions",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "skill_extractor",
          "source": "worker.handlers.skill_extractor",
          "type": "from"
        },
        {
          "alias": "db",
          "source": "worker.services.database",
          "type": "import"
        },
        {
          "alias": "GitHubEventProcessor",
          "source": "worker.services.github_processor.GitHubEventProcessor",
          "type": "from"
        },
        {
          "alias": "JiraEventProcessor",
          "source": "worker.services.jira_processor.JiraEventProcessor",
          "type": "from"
        }
      ],
      "module": "temp_out_of_order",
      "path": "Src/backend/temp_out_of_order.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "create_engine('sqlite+pysqlite:///:memory:', connect_args={'check_same_thread': False}, poolclass=StaticPool)",
              "lineno": 31,
              "name": "create_engine",
              "resolved_module": "sqlalchemy.create_engine"
            },
            {
              "category": "database",
              "display": "sessionmaker(bind=engine, autoflush=False, autocommit=False)",
              "lineno": 36,
              "name": "sessionmaker",
              "resolved_module": "sqlalchemy.orm.sessionmaker"
            },
            {
              "category": "internal",
              "display": "create_app()",
              "lineno": 41,
              "name": "create_app",
              "resolved_module": "app.main.create_app"
            },
            {
              "category": "internal",
              "display": "TestClient(app)",
              "lineno": 43,
              "name": "TestClient",
              "resolved_module": "fastapi.testclient.TestClient"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "client",
          "qualname": "client",
          "return_annotation": "Generator[TestClient, None, None]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "deps.SessionLocal()",
              "lineno": 49,
              "name": "deps.SessionLocal",
              "resolved_module": "app.deps"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 48,
          "name": "db_session",
          "qualname": "db_session",
          "return_annotation": "Generator[Session, None, None]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Generator",
          "source": "collections.abc.Generator",
          "type": "from"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "TestClient",
          "source": "fastapi.testclient.TestClient",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        },
        {
          "alias": "StaticPool",
          "source": "sqlalchemy.pool.StaticPool",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "import"
        },
        {
          "alias": "create_app",
          "source": "app.main.create_app",
          "type": "from"
        }
      ],
      "module": "tests.conftest",
      "path": "Src/backend/tests/conftest.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.post(f'/auth/token?username={username}&password=x')",
              "lineno": 12,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 14,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "_get_token",
          "qualname": "_get_token",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "jwt.decode(token, **decode_kwargs)",
              "lineno": 27,
              "name": "jwt.decode",
              "resolved_module": "jwt"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 19,
          "name": "_decode_claims",
          "qualname": "_decode_claims",
          "return_annotation": "dict"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_get_token(client, 'admin_root')",
              "lineno": 31,
              "name": "_get_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.get('/admin/users', headers=admin_headers)",
              "lineno": 34,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "listing.json()",
              "lineno": 36,
              "name": "listing.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "next((user for user in users if user['username'] == 'dev_alex'))",
              "lineno": 37,
              "name": "next",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.patch(f'/admin/users/{dev['id']}/role', headers=admin_headers, json={'role': 'PO'})",
              "lineno": 39,
              "name": "client.patch",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 45,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.get('/admin/users', headers=admin_headers)",
              "lineno": 47,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "next((user for user in refreshed.json()['users'] if user['username'] == 'dev_alex'))",
              "lineno": 49,
              "name": "next",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "refreshed.json()",
              "lineno": 49,
              "name": "refreshed.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "test_admin_can_list_and_update_roles",
          "qualname": "test_admin_can_list_and_update_roles",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_get_token(client, 'po_admin')",
              "lineno": 54,
              "name": "_get_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "deps.SessionLocal()",
              "lineno": 57,
              "name": "deps.SessionLocal",
              "resolved_module": "app.deps"
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id).filter(m.User.username == 'dev_alex').one()",
              "lineno": 59,
              "name": "session.query.join.filter.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id).filter(m.User.username == 'dev_alex')",
              "lineno": 59,
              "name": "session.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id)",
              "lineno": 59,
              "name": "session.query.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer)",
              "lineno": 59,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PX').one()",
              "lineno": 64,
              "name": "session.query.filter.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PX')",
              "lineno": 64,
              "name": "session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project)",
              "lineno": 64,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PB').one()",
              "lineno": 65,
              "name": "session.query.filter.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PB')",
              "lineno": 65,
              "name": "session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project)",
              "lineno": 65,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/assignments', headers=po_headers, json={'developer_id': developer.id, 'project_id': pb_project.id, 'role': 'Engineer'})",
              "lineno": 67,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "create_response.json()",
              "lineno": 77,
              "name": "create_response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.get(f'/projects/{pb_project.id}/assignments', headers=po_headers)",
              "lineno": 81,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "list_response.json()",
              "lineno": 83,
              "name": "list_response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "any((item['project_id'] == pb_project.id for item in assignments))",
              "lineno": 84,
              "name": "any",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_token(client, 'dev_alex')",
              "lineno": 86,
              "name": "_get_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_decode_claims(dev_token)",
              "lineno": 87,
              "name": "_decode_claims",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "{'PX', 'PB'}.issubset(set(dev_claims['accessible_projects']))",
              "lineno": 88,
              "name": "issubset",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(dev_claims['accessible_projects'])",
              "lineno": 88,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_get_token(client, 'ba_anita')",
              "lineno": 90,
              "name": "_get_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/assignments', headers=ba_headers, json={'developer_id': developer.id, 'project_id': px_project.id, 'role': 'Engineer'})",
              "lineno": 93,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.get(f'/projects/{pb_project.id}/assignments', headers=ba_headers)",
              "lineno": 104,
              "name": "client.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ba_list.json()",
              "lineno": 106,
              "name": "ba_list.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 53,
          "name": "test_assignment_flow_updates_access_and_rbac",
          "qualname": "test_assignment_flow_updates_access_and_rbac",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "TestClient",
          "source": "fastapi.testclient.TestClient",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "import"
        }
      ],
      "module": "tests.test_admin_rbac",
      "path": "Src/backend/tests/test_admin_rbac.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.post(f'/auth/token?username={username}&password=x')",
              "lineno": 12,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 14,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "_get_token",
          "qualname": "_get_token",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_get_token(client, username)",
              "lineno": 18,
              "name": "_get_token",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "_headers",
          "qualname": "_headers",
          "return_annotation": "Dict[str, str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.routes.agent_routes.create_plan', lambda *args, **kwargs: plan)",
              "lineno": 23,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 21,
          "name": "_set_plan",
          "qualname": "_set_plan",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_base_url', 'https://example.atlassian.net')",
              "lineno": 28,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_email', 'agent@example.com')",
              "lineno": 29,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_api_token', 'token-123')",
              "lineno": 30,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture(autouse=True)",
              "lineno": 26,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 27,
          "name": "_atl_creds",
          "qualname": "_atl_creds",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_plan(monkeypatch, [{'tool': 'jira_epic', 'args': {'project_key': 'PX', 'summary': 'PX onboarding', 'description': 'Generated by test', 'labels': ['onboarding', 'northstar']}}])",
              "lineno": 34,
              "name": "_set_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.jira_adapter.resolve_project', lambda key: {'id': '1001', 'key': key})",
              "lineno": 49,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured.update(kwargs)",
              "lineno": 54,
              "name": "captured.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "kwargs.get('labels')",
              "lineno": 55,
              "name": "kwargs.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.jira_adapter.create_epic', _fake_create_epic)",
              "lineno": 57,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/agent/query', headers=_headers(client, 'po_admin'), json={'prompt': 'Publish artifacts', 'allowed_tools': ['jira_epic']})",
              "lineno": 59,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_headers(client, 'po_admin')",
              "lineno": 61,
              "name": "_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 66,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 33,
          "name": "test_publish_jira_po_success",
          "qualname": "test_publish_jira_po_success",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_plan(monkeypatch, [{'tool': 'confluence_page', 'args': {'space_key': 'ENG', 'title': 'North Star Weekly', 'body_html': '<p>Weekly digest</p>'}}])",
              "lineno": 73,
              "name": "_set_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.confluence_adapter.resolve_space', lambda key: {'id': '2002', 'key': key})",
              "lineno": 87,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "created.update(kwargs)",
              "lineno": 92,
              "name": "created.update",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.confluence_adapter.create_page', _fake_create_page)",
              "lineno": 95,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'confluence_draft_mode', True)",
              "lineno": 96,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/agent/query', headers=_headers(client, 'ba_nancy'), json={'prompt': 'Publish artifacts', 'allowed_tools': ['confluence_page']})",
              "lineno": 98,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_headers(client, 'ba_nancy')",
              "lineno": 100,
              "name": "_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 105,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 72,
          "name": "test_publish_confluence_ba_success",
          "qualname": "test_publish_confluence_ba_success",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_plan(monkeypatch, [{'tool': 'jira_epic', 'args': {'project_key': '', 'summary': '', 'description': ''}}])",
              "lineno": 113,
              "name": "_set_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/agent/query', headers=_headers(client, 'ba_nancy'), json={'prompt': 'Publish artifacts', 'allowed_tools': ['jira_epic']})",
              "lineno": 127,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_headers(client, 'ba_nancy')",
              "lineno": 129,
              "name": "_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 134,
              "name": "response.json",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(body['details']['missing'])",
              "lineno": 136,
              "name": "set",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 112,
          "name": "test_publish_args_invalid",
          "qualname": "test_publish_args_invalid",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_plan(monkeypatch, [{'tool': 'jira_epic', 'args': {'project_key': 'PX', 'summary': 'PX onboarding', 'description': 'Generated by test'}}])",
              "lineno": 140,
              "name": "_set_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/agent/query', headers=_headers(client, 'dev_alex'), json={'prompt': 'Publish artifacts', 'allowed_tools': ['jira_epic']})",
              "lineno": 154,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_headers(client, 'dev_alex')",
              "lineno": 156,
              "name": "_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 161,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 139,
          "name": "test_publish_rbac_denied_dev",
          "qualname": "test_publish_rbac_denied_dev",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_plan(monkeypatch, steps)",
              "lineno": 183,
              "name": "_set_plan",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.jira_adapter.resolve_project', lambda key: {'id': '1001', 'key': key})",
              "lineno": 185,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.confluence_adapter.resolve_space', lambda key: {'id': '2002', 'key': key})",
              "lineno": 186,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.jira_adapter.create_epic', lambda **kwargs: {'key': 'PX-99'})",
              "lineno": 187,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.adapters.confluence_adapter.create_page', lambda **kwargs: {'page_id': 'C-10', 'status': 'current', 'space_key': kwargs['space_key']})",
              "lineno": 188,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/agent/query', headers=_headers(client, 'ba_nancy'), json={'prompt': 'Publish artifacts', 'allowed_tools': ['jira_epic', 'confluence_page']})",
              "lineno": 193,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_headers(client, 'ba_nancy')",
              "lineno": 195,
              "name": "_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 200,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 164,
          "name": "test_publish_integration_both_tools",
          "qualname": "test_publish_integration_both_tools",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "TestClient",
          "source": "fastapi.testclient.TestClient",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "tests.test_agent_publish",
      "path": "Src/backend/tests/test_agent_publish.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 10,
          "methods": [
            "__init__",
            "__enter__",
            "__exit__",
            "get",
            "post"
          ],
          "name": "_DummyClient"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "_Resp()",
              "lineno": 44,
              "name": "_Resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 33,
          "name": "_success_response",
          "qualname": "_success_response",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "http",
              "display": "httpx.Request('POST', 'https://example.test')",
              "lineno": 48,
              "name": "httpx.Request",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.Response(status_code=status_code, text=body, request=request)",
              "lineno": 49,
              "name": "httpx.Response",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.HTTPStatusError('error', request=request, response=response)",
              "lineno": 53,
              "name": "httpx.HTTPStatusError",
              "resolved_module": "httpx"
            },
            {
              "category": "internal",
              "display": "_Resp()",
              "lineno": 55,
              "name": "_Resp",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 47,
          "name": "_error_response",
          "qualname": "_error_response",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_success_response({'key': 'PX-100'}, status_code=201)",
              "lineno": 64,
              "name": "_success_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummyClient(post_response=_post_response)",
              "lineno": 66,
              "name": "_DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', lambda timeout=60: dummy)",
              "lineno": 67,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: True)",
              "lineno": 68,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key='PX', project_id='10001', issue_type='Task', summary='Hybrid retriever runbook', description_text='generated')",
              "lineno": 70,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "integration",
              "display": "jira_adapter.create_issue(request=request, description_adf=None, labels=None)",
              "lineno": 78,
              "name": "jira_adapter.create_issue",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "internal",
              "display": "captured['url'].endswith('/rest/api/3/issue')",
              "lineno": 81,
              "name": "captured.endswith",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 58,
          "name": "test_jira_task_ok",
          "qualname": "test_jira_task_ok",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_success_response({'key': 'PX-999'}, status_code=201)",
              "lineno": 94,
              "name": "_success_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummyClient(post_response=_post_response)",
              "lineno": 96,
              "name": "_DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', lambda timeout=60: dummy)",
              "lineno": 97,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: True)",
              "lineno": 98,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key='PX', project_id='10001', issue_type='Epic', summary='North Star smoke epic', description_text='generated', epic_name='North Star smoke epic')",
              "lineno": 100,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "integration",
              "display": "jira_adapter.create_issue(request=request, description_adf={'type': 'doc', 'version': 1, 'content': [{'type': 'paragraph', 'content': [{'type': 'text', 'text': 'generated'}]}]}, labels=['northstar'], epic_name_field_id='customfield_10011')",
              "lineno": 109,
              "name": "jira_adapter.create_issue",
              "resolved_module": "app.adapters.jira_adapter"
            },
            {
              "category": "internal",
              "display": "captured['url'].endswith('/rest/api/3/issue')",
              "lineno": 121,
              "name": "captured.endswith",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 88,
          "name": "test_jira_epic_ok",
          "qualname": "test_jira_epic_ok",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_error_response(400, 'Epic Name missing')",
              "lineno": 132,
              "name": "_error_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummyClient(post_response=_post_response)",
              "lineno": 134,
              "name": "_DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', lambda timeout=60: dummy)",
              "lineno": 135,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: True)",
              "lineno": 136,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key='PX', project_id='10001', issue_type='Epic', summary='Missing epic name')",
              "lineno": 138,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "internal",
              "display": "pytest.raises(HTTPException)",
              "lineno": 145,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "jira_adapter.create_issue(request=request, epic_name_field_id='customfield_10011')",
              "lineno": 146,
              "name": "jira_adapter.create_issue",
              "resolved_module": "app.adapters.jira_adapter"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 130,
          "name": "test_jira_create_issue_raises_tool_args_for_400",
          "qualname": "test_jira_create_issue_raises_tool_args_for_400",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_success_response({'results': [{'id': '42', 'key': 'SPACE', 'name': 'Space'}]})",
              "lineno": 157,
              "name": "_success_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_success_response({'id': '111', '_links': {'webui': '/wiki/webui'}}, status_code=201)",
              "lineno": 161,
              "name": "_success_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummyClient(get_response=_get_response, post_response=_post_response)",
              "lineno": 163,
              "name": "_DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(confluence_adapter, 'sync_client', lambda timeout=60: dummy)",
              "lineno": 164,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.create_page(space_id='42', space_key='SPACE', title='North Star onboarding', body_html='<p>hello</p>', draft=False)",
              "lineno": 166,
              "name": "confluence_adapter.create_page",
              "resolved_module": "app.adapters.confluence_adapter"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 152,
          "name": "test_confluence_page_ok_v1",
          "qualname": "test_confluence_page_ok_v1",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_success_response({'id': '222', '_links': {'webui': '/wiki/x'}}, status_code=200)",
              "lineno": 185,
              "name": "_success_response",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummyClient(post_response=_post_response)",
              "lineno": 187,
              "name": "_DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(confluence_adapter, 'sync_client', lambda timeout=60: dummy)",
              "lineno": 188,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "confluence_adapter.create_page(space_id='99', space_key='SPACE', title='North Star onboarding', body_html='<p>hello</p>', draft=True)",
              "lineno": 190,
              "name": "confluence_adapter.create_page",
              "resolved_module": "app.adapters.confluence_adapter"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 180,
          "name": "test_confluence_page_ok_v2",
          "qualname": "test_confluence_page_ok_v2",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "pytest.raises(HTTPException)",
              "lineno": 204,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "confluence_adapter.resolve_space()",
              "lineno": 205,
              "name": "confluence_adapter.resolve_space",
              "resolved_module": "app.adapters.confluence_adapter"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 203,
          "name": "test_confluence_space_missing_inputs_raise_tool_args",
          "qualname": "test_confluence_space_missing_inputs_raise_tool_args",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "confluence_adapter",
          "source": "app.adapters.confluence_adapter",
          "type": "from"
        },
        {
          "alias": "jira_adapter",
          "source": "app.adapters.jira_adapter",
          "type": "from"
        },
        {
          "alias": "PublishJiraRequest",
          "source": "app.schemas.publish.PublishJiraRequest",
          "type": "from"
        }
      ],
      "module": "tests.test_atlassian_adapters",
      "path": "Src/backend/tests/test_atlassian_adapters.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 10,
          "methods": [
            "__init__"
          ],
          "name": "_Hit"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "session.execute(select(TenantMapperWeights).where(TenantMapperWeights.tenant_id == tenant_id)).scalars().first()",
              "lineno": 19,
              "name": "session.execute.scalars.first",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(TenantMapperWeights).where(TenantMapperWeights.tenant_id == tenant_id)).scalars()",
              "lineno": 19,
              "name": "session.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(select(TenantMapperWeights).where(TenantMapperWeights.tenant_id == tenant_id))",
              "lineno": 19,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(TenantMapperWeights).where(TenantMapperWeights.tenant_id == tenant_id)",
              "lineno": 20,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(TenantMapperWeights)",
              "lineno": 20,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "session.add(TenantMapperWeights(tenant_id=tenant_id, weights=payload))",
              "lineno": 26,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "TenantMapperWeights(tenant_id=tenant_id, weights=payload)",
              "lineno": 26,
              "name": "TenantMapperWeights",
              "resolved_module": "app.domain.models.TenantMapperWeights"
            },
            {
              "category": "internal",
              "display": "session.commit()",
              "lineno": 27,
              "name": "session.commit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 18,
          "name": "_upsert_weights",
          "qualname": "_upsert_weights",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_upsert_weights(db_session, tenant_id, {'helm': 1.0})",
              "lineno": 32,
              "name": "_upsert_weights",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id, session=db_session)",
              "lineno": 34,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "_Hit('Helm upgrade best practices', 'proj-allowed', 0.9, 'c1')",
              "lineno": 36,
              "name": "_Hit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('Helm upgrade best practices', 'proj-denied', 0.8, 'c2')",
              "lineno": 37,
              "name": "_Hit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-allowed'], top_hits=hits, allowed_targets={'proj-allowed'})",
              "lineno": 40,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "all((doc['project'] != 'proj-denied' for doc in result.curated_docs))",
              "lineno": 47,
              "name": "all",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "test_tenant_isolation_no_leak",
          "qualname": "test_tenant_isolation_no_leak",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_upsert_weights(db_session, tenant_id, {'helm': 1.5})",
              "lineno": 52,
              "name": "_upsert_weights",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id, session=db_session)",
              "lineno": 54,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-a'], top_hits=[_Hit('Helm upgrade', 'proj-a', 0.2, 'c-low')], allowed_targets={'proj-a'})",
              "lineno": 56,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('Helm upgrade', 'proj-a', 0.2, 'c-low')",
              "lineno": 58,
              "name": "_Hit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(delete(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id))",
              "lineno": 62,
              "name": "db_session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "delete(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)",
              "lineno": 62,
              "name": "delete.where",
              "resolved_module": "sqlalchemy.delete"
            },
            {
              "category": "database",
              "display": "delete(ABMapEdge)",
              "lineno": 62,
              "name": "delete",
              "resolved_module": "sqlalchemy.delete"
            },
            {
              "category": "internal",
              "display": "db_session.commit()",
              "lineno": 63,
              "name": "db_session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-a'], top_hits=[_Hit('Helm upgrade', 'proj-a', 0.9, 'c-high')], allowed_targets={'proj-a'})",
              "lineno": 65,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('Helm upgrade', 'proj-a', 0.9, 'c-high')",
              "lineno": 67,
              "name": "_Hit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 50,
          "name": "test_weights_and_scores",
          "qualname": "test_weights_and_scores",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_upsert_weights(db_session, tenant_id, {'kubernetes': 1.0})",
              "lineno": 77,
              "name": "_upsert_weights",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id, session=db_session)",
              "lineno": 79,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-known'], top_hits=[_Hit('Kubernetes cluster hardening', 'proj-known', 0.7, 'c1')], allowed_targets={'proj-known'})",
              "lineno": 80,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('Kubernetes cluster hardening', 'proj-known', 0.7, 'c1')",
              "lineno": 82,
              "name": "_Hit",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 75,
          "name": "test_narrative_non_empty",
          "qualname": "test_narrative_non_empty",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_upsert_weights(db_session, tenant_id, {'helm': 1.0})",
              "lineno": 94,
              "name": "_upsert_weights",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ABMapper(tenant_id, session=db_session)",
              "lineno": 96,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-a'], top_hits=[_Hit('Helm upgrade', 'proj-a', 0.8, 'c1')], allowed_targets={'proj-a'})",
              "lineno": 98,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('Helm upgrade', 'proj-a', 0.8, 'c1')",
              "lineno": 100,
              "name": "_Hit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)).scalars().all()",
              "lineno": 103,
              "name": "db_session.execute.scalars.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)).scalars()",
              "lineno": 103,
              "name": "db_session.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id))",
              "lineno": 103,
              "name": "db_session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)",
              "lineno": 104,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(ABMapEdge)",
              "lineno": 104,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "len(edges)",
              "lineno": 106,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(delete(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id))",
              "lineno": 108,
              "name": "db_session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "delete(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)",
              "lineno": 108,
              "name": "delete.where",
              "resolved_module": "sqlalchemy.delete"
            },
            {
              "category": "database",
              "display": "delete(ABMapEdge)",
              "lineno": 108,
              "name": "delete",
              "resolved_module": "sqlalchemy.delete"
            },
            {
              "category": "internal",
              "display": "db_session.commit()",
              "lineno": 109,
              "name": "db_session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=['proj-a'], top_hits=[_Hit('No skill match here', 'proj-a', 0.8, 'c2')], allowed_targets={'proj-a'})",
              "lineno": 111,
              "name": "mapper.infer",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_Hit('No skill match here', 'proj-a', 0.8, 'c2')",
              "lineno": 113,
              "name": "_Hit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)).scalars().all()",
              "lineno": 116,
              "name": "db_session.execute.scalars.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)).scalars()",
              "lineno": 116,
              "name": "db_session.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "db_session.execute(select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id))",
              "lineno": 116,
              "name": "db_session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(ABMapEdge).where(ABMapEdge.tenant_id == tenant_id)",
              "lineno": 117,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(ABMapEdge)",
              "lineno": 117,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "len(edges)",
              "lineno": 119,
              "name": "len",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 92,
          "name": "test_persist_edge_conditionally",
          "qualname": "test_persist_edge_conditionally",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "ABMapper('tenant-missing')",
              "lineno": 123,
              "name": "ABMapper",
              "resolved_module": "app.application.contrastive_mapper.ABMapper"
            },
            {
              "category": "internal",
              "display": "pytest.raises(RuntimeError)",
              "lineno": 124,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "mapper.infer(known_projects=[], top_hits=[])",
              "lineno": 125,
              "name": "mapper.infer",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 122,
          "name": "test_no_session_factory_raises",
          "qualname": "test_no_session_factory_raises",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "delete",
          "source": "sqlalchemy.delete",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "ABMapper",
          "source": "app.application.contrastive_mapper.ABMapper",
          "type": "from"
        },
        {
          "alias": "ABMapEdge",
          "source": "app.domain.models.ABMapEdge",
          "type": "from"
        },
        {
          "alias": "TenantMapperWeights",
          "source": "app.domain.models.TenantMapperWeights",
          "type": "from"
        }
      ],
      "module": "tests.test_contrastive_mapper",
      "path": "Src/backend/tests/test_contrastive_mapper.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setenv('JWT_SECRET', 'unit-test-secret')",
              "lineno": 15,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('JWT_AUD', 'northstar')",
              "lineno": 16,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('POSTGRES_HOST', 'db.example.com')",
              "lineno": 17,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('POSTGRES_PORT', '5432')",
              "lineno": 18,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('POSTGRES_DB', 'northstar')",
              "lineno": 19,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('POSTGRES_USER', 'postgres')",
              "lineno": 20,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('POSTGRES_PASSWORD', 'Sup3r$!:Pass')",
              "lineno": 21,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('QDRANT_URL', 'https://example.qdrant.io')",
              "lineno": 22,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setenv('QUEUE_MODE', 'redis')",
              "lineno": 23,
              "name": "monkeypatch.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.delenv('DATABASE_URL', raising=False)",
              "lineno": 24,
              "name": "monkeypatch.delenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture(autouse=True)",
              "lineno": 11,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": "Ensure required settings are present for module reloads.",
          "endpoint": null,
          "is_async": false,
          "lineno": 12,
          "name": "_reset_settings_env",
          "qualname": "_reset_settings_env",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "object()",
              "lineno": 33,
              "name": "object",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sys.modules.pop('app.deps', None)",
              "lineno": 35,
              "name": "sys.modules.pop",
              "resolved_module": "sys"
            },
            {
              "category": "internal",
              "display": "sys.modules.pop('app.config', None)",
              "lineno": 36,
              "name": "sys.modules.pop",
              "resolved_module": "sys"
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('sqlalchemy.create_engine', fake_create_engine)",
              "lineno": 37,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "caplog.at_level('INFO', logger='app.deps')",
              "lineno": 39,
              "name": "caplog.at_level",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "importlib.import_module('app.deps')",
              "lineno": 40,
              "name": "importlib.import_module",
              "resolved_module": "importlib"
            },
            {
              "category": "internal",
              "display": "isinstance(captured['url'], URL)",
              "lineno": 42,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "next((rec for rec in caplog.records if rec.message == 'Initializing database engine'))",
              "lineno": 47,
              "name": "next",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(record, 'db_url')",
              "lineno": 48,
              "name": "getattr",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 27,
          "name": "test_engine_uses_url_and_masks_password",
          "qualname": "test_engine_uses_url_and_masks_password",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "importlib",
          "source": "importlib",
          "type": "import"
        },
        {
          "alias": "sys",
          "source": "sys",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "URL",
          "source": "sqlalchemy.engine.URL",
          "type": "from"
        }
      ],
      "module": "tests.test_db_engine",
      "path": "Src/backend/tests/test_db_engine.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "isolation_proof.generate_report()",
              "lineno": 9,
              "name": "isolation_proof.generate_report",
              "resolved_module": "app.scripts.isolation_proof"
            },
            {
              "category": "internal",
              "display": "isolation_proof.write_report(report, tmp_path)",
              "lineno": 15,
              "name": "isolation_proof.write_report",
              "resolved_module": "app.scripts.isolation_proof"
            },
            {
              "category": "internal",
              "display": "len(written)",
              "lineno": 16,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "paths['isolation_report.json'].read_text(encoding='utf-8')",
              "lineno": 26,
              "name": "paths.read_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "paths['isolation_report.md'].read_text(encoding='utf-8')",
              "lineno": 27,
              "name": "paths.read_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "paths['isolation_report.html'].read_text(encoding='utf-8')",
              "lineno": 28,
              "name": "paths.read_text",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 8,
          "name": "test_isolation_report_generation",
          "qualname": "test_isolation_report_generation",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isolation_proof.run_property_suite(skip=True)",
              "lineno": 33,
              "name": "isolation_proof.run_property_suite",
              "resolved_module": "app.scripts.isolation_proof"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 32,
          "name": "test_run_property_suite_skip",
          "qualname": "test_run_property_suite_skip",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Path",
          "source": "pathlib.Path",
          "type": "from"
        },
        {
          "alias": "isolation_proof",
          "source": "app.scripts.isolation_proof",
          "type": "from"
        }
      ],
      "module": "tests.test_isolation_proof",
      "path": "Src/backend/tests/test_isolation_proof.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.post('/auth/token?username=po_admin&password=x')",
              "lineno": 17,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 19,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "_po_headers",
          "qualname": "_po_headers",
          "return_annotation": "dict[str, str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "deps.SessionLocal()",
              "lineno": 23,
              "name": "deps.SessionLocal",
              "resolved_module": "app.deps"
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PX').one()",
              "lineno": 24,
              "name": "session.query.filter.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project).filter(m.Project.key == 'PX')",
              "lineno": 24,
              "name": "session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Project)",
              "lineno": 24,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id).filter(m.User.username == 'dev_alex').one()",
              "lineno": 26,
              "name": "session.query.join.filter.one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id).filter(m.User.username == 'dev_alex')",
              "lineno": 26,
              "name": "session.query.join.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).join(m.User, m.User.id == m.Developer.user_id)",
              "lineno": 26,
              "name": "session.query.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer)",
              "lineno": 26,
              "name": "session.query",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "_seed_ids",
          "qualname": "_seed_ids",
          "return_annotation": "tuple[int, int]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_base_url', 'https://example.atlassian.net')",
              "lineno": 36,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_email', 'po@example.com')",
              "lineno": 37,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_api_token', 'token-123')",
              "lineno": 38,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_epic_name_field_id', None)",
              "lineno": 39,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture(autouse=True)",
              "lineno": 34,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "_atl_settings",
          "qualname": "_atl_settings",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.ports.planner.create_plan', _plan)",
              "lineno": 61,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 43,
          "name": "_planner_stub",
          "qualname": "_planner_stub",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_ids()",
              "lineno": 69,
              "name": "_seed_ids",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('steps', [])",
              "lineno": 73,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(plan_steps, start=1)",
              "lineno": 75,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(step.get('args', {}))",
              "lineno": 76,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('args', {})",
              "lineno": 76,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id)",
              "lineno": 77,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "jira_epic_tool(user_claims=user_claims, **args)",
              "lineno": 78,
              "name": "jira_epic_tool",
              "resolved_module": "app.agentic.tools.jira_epic_tool"
            },
            {
              "category": "internal",
              "display": "step.get('tool')",
              "lineno": 79,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts.append({'url': url, 'json': json or {}, 'headers': headers or {}})",
              "lineno": 89,
              "name": "captured_posts.append",
              "resolved_module": null
            },
            {
              "category": "http",
              "display": "httpx.Request('POST', url)",
              "lineno": 90,
              "name": "httpx.Request",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.Response(201, request=request, json={'key': 'PX-99'})",
              "lineno": 91,
              "name": "httpx.Response",
              "resolved_module": "httpx"
            },
            {
              "category": "internal",
              "display": "_Client()",
              "lineno": 96,
              "name": "_Client",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.ports.planner.execute_plan', _execute_plan)",
              "lineno": 98,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'resolve_project', lambda project_key=None, project_id=None: {'id': '1001', 'key': 'PX'})",
              "lineno": 99,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'get_epic_name_field_id', lambda: 'customfield_10011')",
              "lineno": 100,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: True)",
              "lineno": 101,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', _fake_sync_client)",
              "lineno": 102,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/onboarding/generate', headers=_po_headers(client), json={'project_id': project_id, 'developer_id': developer_id})",
              "lineno": 104,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_po_headers(client)",
              "lineno": 106,
              "name": "_po_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts[0]['json'].get('fields', {})",
              "lineno": 112,
              "name": "captured_posts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fields.get('customfield_10011')",
              "lineno": 113,
              "name": "fields.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 64,
          "name": "test_onboarding_epic_create_with_epic_name_allowed",
          "qualname": "test_onboarding_epic_create_with_epic_name_allowed",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_ids()",
              "lineno": 121,
              "name": "_seed_ids",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(plan.get('steps', []), start=1)",
              "lineno": 126,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('steps', [])",
              "lineno": 126,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(step.get('args', {}))",
              "lineno": 127,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('args', {})",
              "lineno": 127,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id)",
              "lineno": 128,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "jira_epic_tool(user_claims=user_claims, **args)",
              "lineno": 129,
              "name": "jira_epic_tool",
              "resolved_module": "app.agentic.tools.jira_epic_tool"
            },
            {
              "category": "internal",
              "display": "step.get('tool')",
              "lineno": 130,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts.append({'url': url, 'json': json or {}, 'headers': headers or {}})",
              "lineno": 140,
              "name": "captured_posts.append",
              "resolved_module": null
            },
            {
              "category": "http",
              "display": "httpx.Request('POST', url)",
              "lineno": 141,
              "name": "httpx.Request",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.Response(201, request=request, json={'key': 'PX-100'})",
              "lineno": 142,
              "name": "httpx.Response",
              "resolved_module": "httpx"
            },
            {
              "category": "internal",
              "display": "_Client()",
              "lineno": 147,
              "name": "_Client",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.ports.planner.execute_plan', _execute_plan)",
              "lineno": 149,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'resolve_project', lambda project_key=None, project_id=None: {'id': '1001', 'key': 'PX'})",
              "lineno": 150,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'get_epic_name_field_id', lambda: 'customfield_10011')",
              "lineno": 151,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: False)",
              "lineno": 152,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', _fake_sync_client)",
              "lineno": 153,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/onboarding/generate', headers=_po_headers(client), json={'project_id': project_id, 'developer_id': developer_id})",
              "lineno": 155,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_po_headers(client)",
              "lineno": 157,
              "name": "_po_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts[0]['json'].get('fields', {})",
              "lineno": 163,
              "name": "captured_posts.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 116,
          "name": "test_onboarding_epic_create_without_epic_name_allowed",
          "qualname": "test_onboarding_epic_create_without_epic_name_allowed",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_seed_ids()",
              "lineno": 172,
              "name": "_seed_ids",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "enumerate(plan.get('steps', []), start=1)",
              "lineno": 177,
              "name": "enumerate",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "plan.get('steps', [])",
              "lineno": 177,
              "name": "plan.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(step.get('args', {}))",
              "lineno": 178,
              "name": "dict",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "step.get('args', {})",
              "lineno": 178,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(project_id)",
              "lineno": 179,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "jira_epic_tool(user_claims=user_claims, **args)",
              "lineno": 180,
              "name": "jira_epic_tool",
              "resolved_module": "app.agentic.tools.jira_epic_tool"
            },
            {
              "category": "internal",
              "display": "step.get('tool')",
              "lineno": 181,
              "name": "step.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts.append({'url': url, 'json': json or {}, 'headers': headers or {}, 'call': self.calls})",
              "lineno": 193,
              "name": "captured_posts.append",
              "resolved_module": null
            },
            {
              "category": "http",
              "display": "httpx.Request('POST', url)",
              "lineno": 194,
              "name": "httpx.Request",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.Response(400, request=request, json=body)",
              "lineno": 200,
              "name": "httpx.Response",
              "resolved_module": "httpx"
            },
            {
              "category": "http",
              "display": "httpx.Response(201, request=request, json={'key': 'PX-101'})",
              "lineno": 201,
              "name": "httpx.Response",
              "resolved_module": "httpx"
            },
            {
              "category": "internal",
              "display": "_Client()",
              "lineno": 208,
              "name": "_Client",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr('app.ports.planner.execute_plan', _execute_plan)",
              "lineno": 210,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'resolve_project', lambda project_key=None, project_id=None: {'id': '1001', 'key': 'PX'})",
              "lineno": 211,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'get_epic_name_field_id', lambda: 'customfield_10011')",
              "lineno": 212,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, '_epic_name_allowed_on_create', lambda *_, **__: True)",
              "lineno": 213,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(jira_adapter, 'sync_client', _fake_sync_client)",
              "lineno": 214,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/onboarding/generate', headers=_po_headers(client), json={'project_id': project_id, 'developer_id': developer_id})",
              "lineno": 216,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_po_headers(client)",
              "lineno": 218,
              "name": "_po_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(captured_posts)",
              "lineno": 223,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts[0]['json'].get('fields', {})",
              "lineno": 224,
              "name": "captured_posts.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "captured_posts[1]['json'].get('fields', {})",
              "lineno": 225,
              "name": "captured_posts.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 167,
          "name": "test_onboarding_epic_create_400_then_retry_without_field",
          "qualname": "test_onboarding_epic_create_400_then_retry_without_field",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.post('/onboarding/generate', headers=_po_headers(client), json={'project_id': 1})",
              "lineno": 231,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_po_headers(client)",
              "lineno": 233,
              "name": "_po_headers",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 237,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 230,
          "name": "test_onboarding_schema_requires_project_and_developer",
          "qualname": "test_onboarding_schema_requires_project_and_developer",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "httpx",
          "source": "httpx",
          "type": "import"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "contextmanager",
          "source": "contextlib.contextmanager",
          "type": "from"
        },
        {
          "alias": "TestClient",
          "source": "fastapi.testclient.TestClient",
          "type": "from"
        },
        {
          "alias": "deps",
          "source": "app.deps",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "jira_epic_tool",
          "source": "app.agentic.tools.jira_epic_tool",
          "type": "from"
        },
        {
          "alias": "jira_adapter",
          "source": "app.adapters.jira_adapter",
          "type": "from"
        }
      ],
      "module": "tests.test_onboarding_epic",
      "path": "Src/backend/tests/test_onboarding_epic.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "getattr(settings, 'atlassian_space', None)",
              "lineno": 13,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'atlassian_space', 'ENG', raising=False)",
              "lineno": 15,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.fixture(autouse=True)",
              "lineno": 11,
              "name": "pytest.fixture",
              "resolved_module": "pytest"
            }
          ],
          "decorators": [
            "pytest.fixture"
          ],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 12,
          "name": "ensure_space",
          "qualname": "ensure_space",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "planner.register_tool('jira_epic', fake_epic)",
              "lineno": 29,
              "name": "planner.register_tool",
              "resolved_module": "app.ports.planner"
            },
            {
              "category": "internal",
              "display": "planner.register_tool('confluence_page', fake_page)",
              "lineno": 30,
              "name": "planner.register_tool",
              "resolved_module": "app.ports.planner"
            },
            {
              "category": "internal",
              "display": "planner.execute_plan(plan, user_claims=user_claims)",
              "lineno": 62,
              "name": "planner.execute_plan",
              "resolved_module": "app.ports.planner"
            },
            {
              "category": "internal",
              "display": "jira_args['summary'].lower()",
              "lineno": 66,
              "name": "jira_args.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "jira_args['description'].lower()",
              "lineno": 67,
              "name": "jira_args.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "getattr(settings, 'atlassian_space')",
              "lineno": 70,
              "name": "getattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conf_args.get('html')",
              "lineno": 72,
              "name": "conf_args.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "conf_args['evidence'].lower()",
              "lineno": 73,
              "name": "conf_args.lower",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 18,
          "name": "test_placeholder_args_are_sanitized",
          "qualname": "test_placeholder_args_are_sanitized",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "planner",
          "source": "app.ports.planner",
          "type": "from"
        }
      ],
      "module": "tests.test_planner_sanitization",
      "path": "Src/backend/tests/test_planner_sanitization.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "tests.test_planner_sanitizer",
      "path": "Src/backend/tests/test_planner_sanitizer.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "pytest.raises(ValidationError)",
              "lineno": 8,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key=None, project_id=None, issue_type='Task', summary='North Star task')",
              "lineno": 9,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "internal",
              "display": "str(exc.value)",
              "lineno": 15,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 7,
          "name": "test_publish_jira_request_requires_project_reference",
          "qualname": "test_publish_jira_request_requires_project_reference",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key='PX', project_id=None, issue_type='Epic', summary='Launch North Star', epic_name=None)",
              "lineno": 21,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "test_publish_jira_request_defaults_epic_name",
          "qualname": "test_publish_jira_request_defaults_epic_name",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "pytest.raises(ValidationError)",
              "lineno": 32,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "PublishJiraRequest(project_key='PX', project_id=None, issue_type='Sub-task', summary='Follow-up', parent_issue_key=None)",
              "lineno": 33,
              "name": "PublishJiraRequest",
              "resolved_module": "app.schemas.publish.PublishJiraRequest"
            },
            {
              "category": "internal",
              "display": "str(exc.value)",
              "lineno": 40,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 31,
          "name": "test_publish_jira_request_subtask_requires_parent",
          "qualname": "test_publish_jira_request_subtask_requires_parent",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "pytest.raises(ValidationError)",
              "lineno": 44,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "PublishConfluenceRequest(space_key=None, space_id=None, title='North Star', body_html='<p>Test</p>')",
              "lineno": 45,
              "name": "PublishConfluenceRequest",
              "resolved_module": "app.schemas.publish.PublishConfluenceRequest"
            },
            {
              "category": "internal",
              "display": "str(exc.value)",
              "lineno": 46,
              "name": "str",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 43,
          "name": "test_publish_confluence_request_requires_space",
          "qualname": "test_publish_confluence_request_requires_space",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "integration",
              "display": "PublishConfluenceRequest(space_key=' SPACE ', space_id=None, title='  Title  ', body_html='  <p>Body</p>  ')",
              "lineno": 50,
              "name": "PublishConfluenceRequest",
              "resolved_module": "app.schemas.publish.PublishConfluenceRequest"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 49,
          "name": "test_publish_confluence_request_trims_fields",
          "qualname": "test_publish_confluence_request_trims_fields",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "ValidationError",
          "source": "pydantic.ValidationError",
          "type": "from"
        },
        {
          "alias": "PublishConfluenceRequest",
          "source": "app.schemas.publish.PublishConfluenceRequest",
          "type": "from"
        },
        {
          "alias": "PublishJiraRequest",
          "source": "app.schemas.publish.PublishJiraRequest",
          "type": "from"
        }
      ],
      "module": "tests.test_publish_schemas",
      "path": "Src/backend/tests/test_publish_schemas.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "tests.test_qdrant_indexes",
      "path": "Src/backend/tests/test_qdrant_indexes.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 10,
          "methods": [
            "__init__"
          ],
          "name": "_DummySparse"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever.settings, 'embed_dim', value, raising=False)",
              "lineno": 17,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(qdrant_client.settings, 'embed_dim', value, raising=False)",
              "lineno": 18,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 16,
          "name": "_set_embed_dim",
          "qualname": "_set_embed_dim",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_embed_dim(monkeypatch, 3)",
              "lineno": 22,
              "name": "_set_embed_dim",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'embed_one', lambda query: [0.1, 0.2, 0.3])",
              "lineno": 23,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'encode_sparse', lambda query: _DummySparse())",
              "lineno": 24,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummySparse()",
              "lineno": 24,
              "name": "_DummySparse",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ExternalServiceError('missing collection')",
              "lineno": 27,
              "name": "ExternalServiceError",
              "resolved_module": "app.domain.errors.ExternalServiceError"
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'ensure_collection', _missing_collection)",
              "lineno": 29,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.raises(ExternalServiceError)",
              "lineno": 31,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "integration",
              "display": "hybrid_retriever.search('tenant', ['global'], 'hello')",
              "lineno": 32,
              "name": "hybrid_retriever.search",
              "resolved_module": "app.adapters.hybrid_retriever"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 21,
          "name": "test_search_missing_collection_raises",
          "qualname": "test_search_missing_collection_raises",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_set_embed_dim(monkeypatch, 2)",
              "lineno": 36,
              "name": "_set_embed_dim",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'embed_one', lambda query: [0.1, 0.2])",
              "lineno": 37,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'encode_sparse', lambda query: _DummySparse())",
              "lineno": 38,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_DummySparse()",
              "lineno": 38,
              "name": "_DummySparse",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'ensure_collection', lambda *args, **kwargs: None)",
              "lineno": 39,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(hybrid_retriever, 'qdrant_hybrid_search', _fake_hybrid_search)",
              "lineno": 48,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "hybrid_retriever.search('tenant', ['global'], 'hello', k=5, meta_filters={'tenant_id': 'tenant'})",
              "lineno": 50,
              "name": "hybrid_retriever.search",
              "resolved_module": "app.adapters.hybrid_retriever"
            },
            {
              "category": "internal",
              "display": "pytest.approx(results[0][0], rel=1e-06)",
              "lineno": 58,
              "name": "pytest.approx",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "isinstance(captured['filter'], qm.Filter)",
              "lineno": 60,
              "name": "isinstance",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 35,
          "name": "test_search_with_filter_returns_hits",
          "qualname": "test_search_with_filter_returns_hits",
          "return_annotation": null
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "super().__init__(message)",
              "lineno": 69,
              "name": "super.__init__",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "super()",
              "lineno": 69,
              "name": "super",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "calls.append((collection_name, field_name))",
              "lineno": 74,
              "name": "calls.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "DummyException(400, 'index already exists')",
              "lineno": 76,
              "name": "DummyException",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(qdrant_client, 'client', DummyClient())",
              "lineno": 78,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "DummyClient()",
              "lineno": 78,
              "name": "DummyClient",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(qdrant_client, 'ResponseHandlingException', DummyException)",
              "lineno": 79,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "monkeypatch.setattr(qdrant_client, 'UnexpectedResponse', DummyException)",
              "lineno": 80,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "qdrant_client.ensure_payload_indexes('tenant__global')",
              "lineno": 82,
              "name": "qdrant_client.ensure_payload_indexes",
              "resolved_module": "app.adapters.qdrant_client"
            },
            {
              "category": "internal",
              "display": "fields.count('tenant_id')",
              "lineno": 85,
              "name": "fields.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fields.count('project_id')",
              "lineno": 86,
              "name": "fields.count",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "fields.count('project_key')",
              "lineno": 87,
              "name": "fields.count",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 64,
          "name": "test_ensure_payload_indexes_idempotent",
          "qualname": "test_ensure_payload_indexes_idempotent",
          "return_annotation": null
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "qm",
          "source": "qdrant_client.http.models",
          "type": "from"
        },
        {
          "alias": "hybrid_retriever",
          "source": "app.adapters.hybrid_retriever",
          "type": "from"
        },
        {
          "alias": "qdrant_client",
          "source": "app.adapters.qdrant_client",
          "type": "from"
        },
        {
          "alias": "ExternalServiceError",
          "source": "app.domain.errors.ExternalServiceError",
          "type": "from"
        }
      ],
      "module": "tests.test_qdrant_retriever",
      "path": "Src/backend/tests/test_qdrant_retriever.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.setattr(settings, 'router_mode', 'learned')",
              "lineno": 11,
              "name": "monkeypatch.setattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pytest.raises(HTTPException)",
              "lineno": 13,
              "name": "pytest.raises",
              "resolved_module": "pytest"
            },
            {
              "category": "internal",
              "display": "retriever.rag_search(tenant_id='tenant1', user_claims={'accessible_projects': ['global']}, query='What is up?')",
              "lineno": 14,
              "name": "retriever.rag_search",
              "resolved_module": "app.ports.retriever"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 10,
          "name": "test_retriever_router_learned_returns_501",
          "qualname": "test_retriever_router_learned_returns_501",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "pytest",
          "source": "pytest",
          "type": "import"
        },
        {
          "alias": "HTTPException",
          "source": "fastapi.HTTPException",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "retriever",
          "source": "app.ports.retriever",
          "type": "from"
        }
      ],
      "module": "tests.test_retriever_router",
      "path": "Src/backend/tests/test_retriever_router.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "Redactor(['super-secret-token'])",
              "lineno": 7,
              "name": "Redactor",
              "resolved_module": "app.scripts.run_e2e.Redactor"
            },
            {
              "category": "internal",
              "display": "redactor.register('Bearer abc.def.ghi')",
              "lineno": 8,
              "name": "redactor.register",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "redactor.redact_text(text)",
              "lineno": 10,
              "name": "redactor.redact_text",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "output.lower()",
              "lineno": 12,
              "name": "output.lower",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "test_redactor_masks_tokens_and_headers",
          "qualname": "test_redactor_masks_tokens_and_headers",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "monkeypatch.context()",
              "lineno": 19,
              "name": "monkeypatch.context",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.delenv('ONE', raising=False)",
              "lineno": 20,
              "name": "m.delenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.delenv('TWO', raising=False)",
              "lineno": 21,
              "name": "m.delenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.setenv('ONE', env['ONE'])",
              "lineno": 22,
              "name": "m.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.setenv('TWO', env['TWO'])",
              "lineno": 23,
              "name": "m.setenv",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "build_env_fingerprint()",
              "lineno": 24,
              "name": "build_env_fingerprint",
              "resolved_module": "app.scripts.run_e2e.build_env_fingerprint"
            },
            {
              "category": "internal",
              "display": "sorted(hashes)",
              "lineno": 25,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "hashlib.sha256(name.encode('utf-8')).hexdigest()",
              "lineno": 28,
              "name": "hashlib.sha256.hexdigest",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "hashlib.sha256(name.encode('utf-8'))",
              "lineno": 28,
              "name": "hashlib.sha256",
              "resolved_module": "hashlib"
            },
            {
              "category": "internal",
              "display": "name.encode('utf-8')",
              "lineno": 28,
              "name": "name.encode",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "expected.issubset(set(hashes))",
              "lineno": 29,
              "name": "expected.issubset",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "set(hashes)",
              "lineno": 29,
              "name": "set",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "test_env_fingerprint_stable_order",
          "qualname": "test_env_fingerprint_stable_order",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "sanitize_url_for_snapshot(url, host_only=True)",
              "lineno": 34,
              "name": "sanitize_url_for_snapshot",
              "resolved_module": "app.scripts.run_e2e.sanitize_url_for_snapshot"
            },
            {
              "category": "internal",
              "display": "sanitize_url_for_snapshot(url)",
              "lineno": 35,
              "name": "sanitize_url_for_snapshot",
              "resolved_module": "app.scripts.run_e2e.sanitize_url_for_snapshot"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 32,
          "name": "test_sanitize_url_for_snapshot_host_only",
          "qualname": "test_sanitize_url_for_snapshot_host_only",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Redactor",
          "source": "app.scripts.run_e2e.Redactor",
          "type": "from"
        },
        {
          "alias": "build_env_fingerprint",
          "source": "app.scripts.run_e2e.build_env_fingerprint",
          "type": "from"
        },
        {
          "alias": "sanitize_url_for_snapshot",
          "source": "app.scripts.run_e2e.sanitize_url_for_snapshot",
          "type": "from"
        }
      ],
      "module": "tests.test_run_e2e_utils",
      "path": "Src/backend/tests/test_run_e2e_utils.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.post(f'/auth/token?username={username}&password=x')",
              "lineno": 12,
              "name": "client.post",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "response.json()",
              "lineno": 14,
              "name": "response.json",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "_get_token",
          "qualname": "_get_token",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "int(time.time())",
              "lineno": 18,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "time.time()",
              "lineno": 18,
              "name": "time.time",
              "resolved_module": "time"
            },
            {
              "category": "internal",
              "display": "overrides.get('sub', 'spoof')",
              "lineno": 20,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "overrides.get('user_id', -1)",
              "lineno": 21,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "overrides.get('role', 'Admin')",
              "lineno": 22,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "overrides.get('tenant_id', settings.tenant_id)",
              "lineno": 23,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "overrides.get('accessible_projects', ['global'])",
              "lineno": 24,
              "name": "overrides.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "jwt.encode(payload, settings.jwt_secret, algorithm='HS256')",
              "lineno": 30,
              "name": "jwt.encode",
              "resolved_module": "jwt"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "_forge_token",
          "qualname": "_forge_token",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_get_token(client, 'dev_alex')",
              "lineno": 35,
              "name": "_get_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/retrieve', headers=headers, json={'query': 'status', 'targets': ['NON_EXISTENT'], 'k': 3})",
              "lineno": 36,
              "name": "client.post",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 34,
          "name": "test_retrieve_rejects_unknown_project",
          "qualname": "test_retrieve_rejects_unknown_project",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "client.get('/projects?token=fake')",
              "lineno": 45,
              "name": "client.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 44,
          "name": "test_authorization_header_required",
          "qualname": "test_authorization_header_required",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_forge_token(tenant_id='ghost', accessible_projects=['PX', 'global'])",
              "lineno": 50,
              "name": "_forge_token",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "client.post('/retrieve', headers=headers, json={'query': 'status', 'targets': ['PX'], 'k': 3})",
              "lineno": 52,
              "name": "client.post",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 49,
          "name": "test_retrieve_unknown_tenant_returns_404",
          "qualname": "test_retrieve_unknown_tenant_returns_404",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "time",
          "source": "time",
          "type": "import"
        },
        {
          "alias": "jwt",
          "source": "jwt",
          "type": "import"
        },
        {
          "alias": "TestClient",
          "source": "fastapi.testclient.TestClient",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "tests.test_security",
      "path": "Src/backend/tests/test_security.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "tests.test_skill_attribution",
      "path": "Src/backend/tests/test_skill_attribution.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [],
      "module": "tests.test_skill_extractor",
      "path": "Src/backend/tests/test_skill_extractor.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "enqueue_github_event",
          "source": "job_queue.enqueue_github_event",
          "type": "from"
        },
        {
          "alias": "enqueue_jira_event",
          "source": "job_queue.enqueue_jira_event",
          "type": "from"
        }
      ],
      "module": "worker.__init__",
      "path": "Src/backend/worker/__init__.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        }
      ],
      "module": "worker.handlers.__init__",
      "path": "Src/backend/worker/handlers/__init__.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "set()",
              "lineno": 21,
              "name": "set",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "seen_ids.add(cid)",
              "lineno": 29,
              "name": "seen_ids.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(h.source or '')",
              "lineno": 31,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "per_source.get(src, 0)",
              "lineno": 32,
              "name": "per_source.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "' '.join((h.text or '').split())",
              "lineno": 36,
              "name": " .join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "(h.text or '').split()",
              "lineno": 36,
              "name": "split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(snippet)",
              "lineno": 37,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(block)",
              "lineno": 41,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "buf.append(block)",
              "lineno": 44,
              "name": "buf.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(block)",
              "lineno": 45,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'\\n'.join(buf)",
              "lineno": 49,
              "name": "\n.join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Build a compact, LLM-friendly evidence string:\n  - de-duplicates by chunk_id\n  - caps number of snippets per source\n  - trims whitespace and long snippets\n  - respects an overall character budget (max_chars)",
          "endpoint": null,
          "is_async": false,
          "lineno": 6,
          "name": "build_evidence_snippets",
          "qualname": "build_evidence_snippets",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "evidence.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')",
              "lineno": 55,
              "name": "evidence.replace.replace.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "evidence.replace('&', '&amp;').replace('<', '&lt;')",
              "lineno": 55,
              "name": "evidence.replace.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "evidence.replace('&', '&amp;')",
              "lineno": 55,
              "name": "evidence.replace",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ln.strip()",
              "lineno": 59,
              "name": "ln.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "esc.split('\\n')",
              "lineno": 59,
              "name": "esc.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "ln.strip()",
              "lineno": 59,
              "name": "ln.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "''.join((f'<p>{line}</p>' for line in lines))",
              "lineno": 60,
              "name": "join",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Convert raw evidence text into basic Confluence storage HTML.",
          "endpoint": null,
          "is_async": false,
          "lineno": 51,
          "name": "to_confluence_html",
          "qualname": "to_confluence_html",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "evidence.split('\\n')",
              "lineno": 67,
              "name": "evidence.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "line.strip()",
              "lineno": 68,
              "name": "line.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "blocks.append({'type': 'paragraph', 'content': [{'type': 'text', 'text': line}]})",
              "lineno": 71,
              "name": "blocks.append",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Convert evidence text into Jira's Atlassian Document Format.",
          "endpoint": null,
          "is_async": false,
          "lineno": 63,
          "name": "to_jira_description",
          "qualname": "to_jira_description",
          "return_annotation": "dict[str, object]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Set",
          "source": "typing.Set",
          "type": "from"
        },
        {
          "alias": "RetrieveHit",
          "source": "app.domain.schemas.RetrieveHit",
          "type": "from"
        }
      ],
      "module": "worker.handlers.evidence_builder",
      "path": "Src/backend/worker/handlers/evidence_builder.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "integration",
              "display": "GitHubEventProcessor(payload)",
              "lineno": 16,
              "name": "GitHubEventProcessor",
              "resolved_module": "worker.services.github_processor.GitHubEventProcessor"
            },
            {
              "category": "internal",
              "display": "logger.info('github_handler.processing', extra={'event': processor.event, 'delivery': processor.delivery_key, 'repo': processor.body.get('repository', {}).get('full_name', 'unknown')})",
              "lineno": 17,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "processor.body.get('repository', {}).get('full_name', 'unknown')",
              "lineno": 22,
              "name": "processor.body.get.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "processor.body.get('repository', {})",
              "lineno": 22,
              "name": "processor.body.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "processor.process()",
              "lineno": 25,
              "name": "processor.process",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Dispatch a GitHub webhook payload to the GitHub processor.",
          "endpoint": null,
          "is_async": false,
          "lineno": 13,
          "name": "handle_github_event",
          "qualname": "handle_github_event",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "GitHubEventProcessor",
          "source": "worker.services.github_processor.GitHubEventProcessor",
          "type": "from"
        }
      ],
      "module": "worker.handlers.github_handler",
      "path": "Src/backend/worker/handlers/github_handler.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "integration",
              "display": "JiraEventProcessor(payload)",
              "lineno": 12,
              "name": "JiraEventProcessor",
              "resolved_module": "worker.services.jira_processor.JiraEventProcessor"
            },
            {
              "category": "internal",
              "display": "logger.info('jira_handler.processing', extra={'event': processor.event, 'delivery': processor.delivery_key})",
              "lineno": 13,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "processor.process()",
              "lineno": 17,
              "name": "processor.process",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "handle_jira_event",
          "qualname": "handle_jira_event",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "JiraEventProcessor",
          "source": "worker.services.jira_processor.JiraEventProcessor",
          "type": "from"
        }
      ],
      "module": "worker.handlers.jira_handler",
      "path": "Src/backend/worker/handlers/jira_handler.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "', '.join(sorted(payload.keys()))",
              "lineno": 22,
              "name": ", .join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sorted(payload.keys())",
              "lineno": 22,
              "name": "sorted",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.keys()",
              "lineno": 22,
              "name": "payload.keys",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 21,
          "name": "_format_prompt",
          "qualname": "_format_prompt",
          "return_annotation": "str"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "_format_prompt(event, payload)",
              "lineno": 33,
              "name": "_format_prompt",
              "resolved_module": null
            },
            {
              "category": "integration",
              "display": "chat_json(prompt, SCHEMA_HINT)",
              "lineno": 34,
              "name": "chat_json",
              "resolved_module": "app.adapters.cerebras_planner.chat_json"
            },
            {
              "category": "internal",
              "display": "output.get('assertions', [])",
              "lineno": 36,
              "name": "output.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p).strip()",
              "lineno": 37,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p)",
              "lineno": 37,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw.get('path', [])",
              "lineno": 37,
              "name": "raw.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p).strip()",
              "lineno": 37,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p)",
              "lineno": 37,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "assertions.append({'path': path, 'confidence': float(raw.get('confidence', settings.skill_confidence_default)), 'evidence': raw.get('evidence') or 'gh:event'})",
              "lineno": 41,
              "name": "assertions.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "float(raw.get('confidence', settings.skill_confidence_default))",
              "lineno": 44,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw.get('confidence', settings.skill_confidence_default)",
              "lineno": 44,
              "name": "raw.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "raw.get('evidence')",
              "lineno": 45,
              "name": "raw.get",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Call the planner to derive skill assertions without mutating the database.",
          "endpoint": null,
          "is_async": false,
          "lineno": 30,
          "name": "generate_skill_assertions",
          "qualname": "generate_skill_assertions",
          "return_annotation": "List[Dict[str, Any]]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "str(p).strip()",
              "lineno": 54,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p)",
              "lineno": 54,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p).strip()",
              "lineno": 54,
              "name": "str.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(p)",
              "lineno": 54,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "'>'.join(parts)",
              "lineno": 57,
              "name": ">.join",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "len(parts)",
              "lineno": 58,
              "name": "len",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES(:name, NULL, :path, :depth)\\n            ON CONFLICT (path_cache) DO UPDATE SET\\n                name = EXCLUDED.name,\\n                depth = EXCLUDED.depth\\n            '), {'name': parts[-1], 'path': path_cache, 'depth': depth})",
              "lineno": 59,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('\\n            INSERT INTO skill(name, parent_id, path_cache, depth)\\n            VALUES(:name, NULL, :path, :depth)\\n            ON CONFLICT (path_cache) DO UPDATE SET\\n                name = EXCLUDED.name,\\n                depth = EXCLUDED.depth\\n            ')",
              "lineno": 60,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "session.execute(text('SELECT id FROM skill WHERE path_cache=:path'), {'path': path_cache}).scalar_one()",
              "lineno": 71,
              "name": "session.execute.scalar_one",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(text('SELECT id FROM skill WHERE path_cache=:path'), {'path': path_cache})",
              "lineno": 71,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('SELECT id FROM skill WHERE path_cache=:path')",
              "lineno": 72,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            },
            {
              "category": "internal",
              "display": "int(skill_id)",
              "lineno": 74,
              "name": "int",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Ensure a skill hierarchy path exists and return the leaf skill id.",
          "endpoint": null,
          "is_async": false,
          "lineno": 51,
          "name": "ensure_skill",
          "qualname": "ensure_skill",
          "return_annotation": "int | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "session.execute(text('\\n            INSERT INTO developer_skill(developer_id, skill_id, score, confidence, evidence_ref, project_id)\\n            VALUES(:developer_id, :skill_id, :delta, :confidence, :evidence_ref, :project_id)\\n            ON CONFLICT (developer_id, skill_id) DO UPDATE SET\\n                score = developer_skill.score + EXCLUDED.score,\\n                confidence = MAX(developer_skill.confidence, EXCLUDED.confidence),\\n                evidence_ref = EXCLUDED.evidence_ref,\\n                project_id = COALESCE(EXCLUDED.project_id, developer_skill.project_id),\\n                last_seen_at = CURRENT_TIMESTAMP\\n            '), {'developer_id': developer_id, 'skill_id': skill_id, 'delta': delta, 'confidence': confidence, 'evidence_ref': evidence_ref[:255], 'project_id': project_id})",
              "lineno": 89,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "text('\\n            INSERT INTO developer_skill(developer_id, skill_id, score, confidence, evidence_ref, project_id)\\n            VALUES(:developer_id, :skill_id, :delta, :confidence, :evidence_ref, :project_id)\\n            ON CONFLICT (developer_id, skill_id) DO UPDATE SET\\n                score = developer_skill.score + EXCLUDED.score,\\n                confidence = MAX(developer_skill.confidence, EXCLUDED.confidence),\\n                evidence_ref = EXCLUDED.evidence_ref,\\n                project_id = COALESCE(EXCLUDED.project_id, developer_skill.project_id),\\n                last_seen_at = CURRENT_TIMESTAMP\\n            ')",
              "lineno": 90,
              "name": "text",
              "resolved_module": "sqlalchemy.text"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Apply a score delta to a developer skill, ensuring timestamps update.",
          "endpoint": null,
          "is_async": false,
          "lineno": 77,
          "name": "apply_skill_delta",
          "qualname": "apply_skill_delta",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Dict",
          "source": "typing.Dict",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "List",
          "source": "typing.List",
          "type": "from"
        },
        {
          "alias": "text",
          "source": "sqlalchemy.text",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "chat_json",
          "source": "app.adapters.cerebras_planner.chat_json",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "engine",
          "source": "worker.services.database.engine",
          "type": "from"
        }
      ],
      "module": "worker.handlers.skill_extractor",
      "path": "Src/backend/worker/handlers/skill_extractor.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": "Minimal interface required for enqueueing background jobs.",
          "lineno": 13,
          "methods": [
            "enqueue"
          ],
          "name": "QueueProtocol"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "fn(payload)",
              "lineno": 28,
              "name": "fn",
              "resolved_module": null
            },
            {
              "category": "queue",
              "display": "_DirectQueue()",
              "lineno": 30,
              "name": "_DirectQueue",
              "resolved_module": null
            },
            {
              "category": "cache",
              "display": "redis.from_url(settings.redis_url)",
              "lineno": 32,
              "name": "redis.from_url",
              "resolved_module": "redis"
            },
            {
              "category": "queue",
              "display": "rq.Queue('events', connection=redis_client)",
              "lineno": 33,
              "name": "rq.Queue",
              "resolved_module": "rq"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Create a queue implementation based on configuration.",
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "_build_queue",
          "qualname": "_build_queue",
          "return_annotation": "QueueProtocol"
        },
        {
          "calls": [
            {
              "category": "queue",
              "display": "queue.enqueue(handle_github_event, payload, job_timeout=300)",
              "lineno": 44,
              "name": "queue.enqueue",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Enqueue handling of a GitHub webhook payload.",
          "endpoint": null,
          "is_async": false,
          "lineno": 39,
          "name": "enqueue_github_event",
          "qualname": "enqueue_github_event",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "queue",
              "display": "queue.enqueue(handle_jira_event, payload, job_timeout=300)",
              "lineno": 52,
              "name": "queue.enqueue",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Enqueue handling of a Jira webhook payload.",
          "endpoint": null,
          "is_async": false,
          "lineno": 47,
          "name": "enqueue_jira_event",
          "qualname": "enqueue_jira_event",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Callable",
          "source": "typing.Callable",
          "type": "from"
        },
        {
          "alias": "Protocol",
          "source": "typing.Protocol",
          "type": "from"
        },
        {
          "alias": "redis",
          "source": "redis",
          "type": "import"
        },
        {
          "alias": "rq",
          "source": "rq",
          "type": "import"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.job_queue",
      "path": "Src/backend/worker/job_queue.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 18,
          "methods": [],
          "name": "WindowsSimpleWorker"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "logging.basicConfig(level=logging.INFO, format='%(asctime)s | %(levelname)s | %(name)s | %(message)s', force=True)",
              "lineno": 25,
              "name": "logging.basicConfig",
              "resolved_module": "logging"
            },
            {
              "category": "internal",
              "display": "logger.error(\"Queue mode 'direct' does not support the standalone worker\")",
              "lineno": 32,
              "name": "logger.error",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "SystemExit(1)",
              "lineno": 33,
              "name": "SystemExit",
              "resolved_module": null
            },
            {
              "category": "cache",
              "display": "redis.from_url(settings.redis_url)",
              "lineno": 35,
              "name": "redis.from_url",
              "resolved_module": "redis"
            },
            {
              "category": "queue",
              "display": "Connection(redis_conn)",
              "lineno": 36,
              "name": "Connection",
              "resolved_module": "rq.Connection"
            },
            {
              "category": "queue",
              "display": "Queue(name)",
              "lineno": 37,
              "name": "Queue",
              "resolved_module": "rq.Queue"
            },
            {
              "category": "internal",
              "display": "hasattr(os, 'fork')",
              "lineno": 38,
              "name": "hasattr",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "worker_cls(queues, connection=redis_conn)",
              "lineno": 39,
              "name": "worker_cls",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('Starting RQ worker', extra={'worker_class': worker_cls.__name__})",
              "lineno": 40,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "worker.work(with_scheduler=False)",
              "lineno": 41,
              "name": "worker.work",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": "Run an RQ worker bound to the configured Redis instance.",
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "main",
          "qualname": "main",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "os",
          "source": "os",
          "type": "import"
        },
        {
          "alias": "redis",
          "source": "redis",
          "type": "import"
        },
        {
          "alias": "Connection",
          "source": "rq.Connection",
          "type": "from"
        },
        {
          "alias": "Queue",
          "source": "rq.Queue",
          "type": "from"
        },
        {
          "alias": "Worker",
          "source": "rq.Worker",
          "type": "from"
        },
        {
          "alias": "SimpleWorker",
          "source": "rq.worker.SimpleWorker",
          "type": "from"
        },
        {
          "alias": "TimerDeathPenalty",
          "source": "rq.timeouts.TimerDeathPenalty",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.main",
      "path": "Src/backend/worker/main.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "email.split('@', 1)",
              "lineno": 27,
              "name": "email.split",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.User).filter(m.User.username == username).one_or_none()",
              "lineno": 32,
              "name": "session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.User).filter(m.User.username == username)",
              "lineno": 32,
              "name": "session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.User)",
              "lineno": 32,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.User(username=username, password_hash=secrets.token_hex(16), role='Dev', tenant_id=tenant_id)",
              "lineno": 37,
              "name": "m.User",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "secrets.token_hex(16)",
              "lineno": 39,
              "name": "secrets.token_hex",
              "resolved_module": "secrets"
            },
            {
              "category": "internal",
              "display": "session.add(existing_user)",
              "lineno": 43,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 44,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).filter(m.Developer.user_id == existing_user.id).one_or_none()",
              "lineno": 47,
              "name": "session.query.filter.one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer).filter(m.Developer.user_id == existing_user.id)",
              "lineno": 47,
              "name": "session.query.filter",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.query(m.Developer)",
              "lineno": 47,
              "name": "session.query",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.Developer(user_id=existing_user.id, display_name=username.title(), tenant_id=tenant_id)",
              "lineno": 52,
              "name": "m.Developer",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "username.title()",
              "lineno": 54,
              "name": "username.title",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.add(developer)",
              "lineno": 57,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 58,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.DeveloperIdentity(developer_id=developer.id, tenant_id=tenant_id, provider='github', provider_login=login.lower() if login else None, email=email, email_lower=email.lower() if email else None, is_primary=True, metadata_json={})",
              "lineno": 60,
              "name": "m.DeveloperIdentity",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "login.lower()",
              "lineno": 64,
              "name": "login.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "email.lower()",
              "lineno": 66,
              "name": "email.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.add(identity)",
              "lineno": 70,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 71,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('autoprovision.developer', extra={'developer_id': developer.id, 'tenant_id': tenant_id, 'login': login})",
              "lineno": 72,
              "name": "logger.info",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 15,
          "name": "provision_developer",
          "qualname": "provision_developer",
          "return_annotation": "Optional[m.DeveloperIdentity]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "secrets",
          "source": "secrets",
          "type": "import"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "worker.services.autoprovision",
      "path": "Src/backend/worker/services/autoprovision.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "SessionLocal()",
              "lineno": 27,
              "name": "SessionLocal",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.commit()",
              "lineno": 30,
              "name": "session.commit",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.rollback()",
              "lineno": 32,
              "name": "session.rollback",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.close()",
              "lineno": 35,
              "name": "session.close",
              "resolved_module": null
            }
          ],
          "decorators": [
            "contextmanager"
          ],
          "dependencies": [],
          "docstring": "Provide a transactional scope for worker database interactions.",
          "endpoint": null,
          "is_async": false,
          "lineno": 24,
          "name": "session_scope",
          "qualname": "session_scope",
          "return_annotation": "Iterator[Session]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "contextmanager",
          "source": "contextlib.contextmanager",
          "type": "from"
        },
        {
          "alias": "Iterator",
          "source": "typing.Iterator",
          "type": "from"
        },
        {
          "alias": "create_engine",
          "source": "sqlalchemy.create_engine",
          "type": "from"
        },
        {
          "alias": "Engine",
          "source": "sqlalchemy.engine.Engine",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "sessionmaker",
          "source": "sqlalchemy.orm.sessionmaker",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.services.database",
      "path": "Src/backend/worker/services/database.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 39,
          "methods": [],
          "name": "EventEnvelope"
        },
        {
          "docstring": null,
          "lineno": 47,
          "methods": [
            "__init__",
            "process",
            "_build_delivery_id",
            "_repo_full_name",
            "_detect_jira_key",
            "_resolve_context",
            "_handle_push",
            "_extract_jira_keys_from_commits",
            "_handle_pull_request",
            "_handle_pull_request_review",
            "_handle_pull_request_review_comment",
            "_attempt_finalize"
          ],
          "name": "GitHubEventProcessor"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "service",
              "display": "record_triage(session, provider='github', delivery_key=delivery_key, reason='missing_developer_on_finalize', payload={'workflow_id': workflow.id})",
              "lineno": 415,
              "name": "record_triage",
              "resolved_module": "worker.services.triage.record_triage"
            },
            {
              "category": "internal",
              "display": "logger.info('skill.finalize.pending', extra={'workflow_id': workflow.id, 'reason': reason, 'delivery': delivery_key})",
              "lineno": 425,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('skill.finalize.skipped', extra={'workflow_id': workflow.id, 'reason': 'already_applied', 'delivery': delivery_key})",
              "lineno": 435,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "str(workflow.pr_number)",
              "lineno": 446,
              "name": "str",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "ReviewSignal(changes_requested=workflow.major_rework_requested, approved=bool(workflow.approvals_count), nit_comment=workflow.nit_comment_count > 0, submitted_at=workflow.pr_merged_at)",
              "lineno": 453,
              "name": "ReviewSignal",
              "resolved_module": "worker.services.scoring.modifiers.ReviewSignal"
            },
            {
              "category": "internal",
              "display": "bool(workflow.approvals_count)",
              "lineno": 455,
              "name": "bool",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum(workflow.peer_review_credit.values())",
              "lineno": 461,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "workflow.peer_review_credit.values()",
              "lineno": 461,
              "name": "workflow.peer_review_credit.values",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_time_to_merge_seconds(workflow.pr_created_at, workflow.pr_merged_at)",
              "lineno": 463,
              "name": "_time_to_merge_seconds",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "increment('skill.review_penalty', type='major_rework', delivery=delivery_key)",
              "lineno": 466,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "increment('skill.review_penalty', type='additional_cycle', cycles=workflow.review_cycles - 1, delivery=delivery_key)",
              "lineno": 468,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "increment('skill.review_penalty', type='nit_comment', delivery=delivery_key)",
              "lineno": 475,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "increment('skill.review_bonus', type='first_review', delivery=delivery_key)",
              "lineno": 477,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "increment('skill.review_bonus', type='peer_credit', delivery=delivery_key)",
              "lineno": 479,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "service",
              "display": "compute_skill_delta(pr_created_at=workflow.pr_created_at, pr_merged_at=workflow.pr_merged_at, jira_done_at=workflow.jira_done_at, already_applied=False, review_signals=review_signals, review_cycles=workflow.review_cycles, approvals_count=workflow.approvals_count, major_rework_requested=workflow.major_rework_requested, time_to_merge_seconds=time_to_merge, peer_credit_total=peer_credit_total, baseline_default=settings.skill_baseline_increment)",
              "lineno": 480,
              "name": "compute_skill_delta",
              "resolved_module": "app.services.compute_skill_delta"
            },
            {
              "category": "internal",
              "display": "logger.info('skill.modifiers.applied', extra={'workflow_id': workflow.id, 'delivery': delivery_key, 'baseline': result.baseline_delta, 'final_delta': result.final_delta, 'review_cycles': workflow.review_cycles, 'approvals': workflow.approvals_count, 'major_rework': workflow.major_rework_requested, 'nit_comments': workflow.nit_comment_count, 'peer_credit_total': peer_credit_total, 'time_to_merge_seconds': time_to_merge})",
              "lineno": 496,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "skill_extractor.ensure_skill(session, assertion.get('path', []))",
              "lineno": 513,
              "name": "skill_extractor.ensure_skill",
              "resolved_module": "worker.handlers.skill_extractor"
            },
            {
              "category": "internal",
              "display": "assertion.get('path', [])",
              "lineno": 513,
              "name": "assertion.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "skill_extractor.apply_skill_delta(session, developer_id=workflow.developer_id, skill_id=skill_id, project_id=mapping.project_id, delta=result.final_delta, confidence=float(assertion.get('confidence', settings.skill_confidence_default)), evidence_ref=evidence)",
              "lineno": 517,
              "name": "skill_extractor.apply_skill_delta",
              "resolved_module": "worker.handlers.skill_extractor"
            },
            {
              "category": "internal",
              "display": "float(assertion.get('confidence', settings.skill_confidence_default))",
              "lineno": 523,
              "name": "float",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "assertion.get('confidence', settings.skill_confidence_default)",
              "lineno": 524,
              "name": "assertion.get",
              "resolved_module": null
            },
            {
              "category": "service",
              "display": "mark_baseline_applied(workflow, result.final_delta)",
              "lineno": 529,
              "name": "mark_baseline_applied",
              "resolved_module": "worker.services.workflow.mark_baseline_applied"
            },
            {
              "category": "internal",
              "display": "logger.info('skill.finalized', extra={'workflow_id': workflow.id, 'developer_id': workflow.developer_id, 'tenant_id': workflow.tenant_id, 'correlation': correlation, 'delta': result.final_delta, 'peer_credit': peer_credit_total, 'time_to_merge_seconds': time_to_merge})",
              "lineno": 530,
              "name": "logger.info",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "increment('skill.finalized', tenant_id=workflow.tenant_id)",
              "lineno": 542,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "observe('skill.delta', value=result.final_delta, tenant_id=workflow.tenant_id, developer_id=workflow.developer_id)",
              "lineno": 543,
              "name": "observe",
              "resolved_module": "app.instrumentation.metrics.observe"
            },
            {
              "category": "internal",
              "display": "observe('skill.time_to_merge', value=float(time_to_merge), tenant_id=workflow.tenant_id)",
              "lineno": 550,
              "name": "observe",
              "resolved_module": "app.instrumentation.metrics.observe"
            },
            {
              "category": "internal",
              "display": "float(time_to_merge)",
              "lineno": 552,
              "name": "float",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 407,
          "name": "finalize_workflow",
          "qualname": "finalize_workflow",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 558,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "datetime.fromisoformat(value.replace('Z', '+00:00'))",
              "lineno": 560,
              "name": "datetime.fromisoformat",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "value.replace('Z', '+00:00')",
              "lineno": 560,
              "name": "value.replace",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 557,
          "name": "_parse_datetime",
          "qualname": "_parse_datetime",
          "return_annotation": "datetime | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "int(delta.total_seconds())",
              "lineno": 570,
              "name": "int",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "delta.total_seconds()",
              "lineno": 570,
              "name": "delta.total_seconds",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 566,
          "name": "_time_to_merge_seconds",
          "qualname": "_time_to_merge_seconds",
          "return_annotation": "int | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "payload.get(key)",
              "lineno": 578,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity, dict)",
              "lineno": 579,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('login')",
              "lineno": 580,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('username')",
              "lineno": 580,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('name')",
              "lineno": 580,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(login, str)",
              "lineno": 581,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "login.strip()",
              "lineno": 581,
              "name": "login.strip",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "login.strip()",
              "lineno": 582,
              "name": "login.strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 576,
          "name": "_extract_login",
          "qualname": "_extract_login",
          "return_annotation": "str | None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "re",
          "source": "re",
          "type": "import"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "increment",
          "source": "app.instrumentation.metrics.increment",
          "type": "from"
        },
        {
          "alias": "observe",
          "source": "app.instrumentation.metrics.observe",
          "type": "from"
        },
        {
          "alias": "compute_skill_delta",
          "source": "app.services.compute_skill_delta",
          "type": "from"
        },
        {
          "alias": "skill_extractor",
          "source": "worker.handlers.skill_extractor",
          "type": "from"
        },
        {
          "alias": "provision_developer",
          "source": "worker.services.autoprovision.provision_developer",
          "type": "from"
        },
        {
          "alias": "session_scope",
          "source": "worker.services.database.session_scope",
          "type": "from"
        },
        {
          "alias": "check_idempotency",
          "source": "worker.services.idempotency.check_idempotency",
          "type": "from"
        },
        {
          "alias": "record_idempotency",
          "source": "worker.services.idempotency.record_idempotency",
          "type": "from"
        },
        {
          "alias": "IdentityMatch",
          "source": "worker.services.identity.IdentityMatch",
          "type": "from"
        },
        {
          "alias": "candidate_emails",
          "source": "worker.services.identity.candidate_emails",
          "type": "from"
        },
        {
          "alias": "normalize_email",
          "source": "worker.services.identity.normalize_email",
          "type": "from"
        },
        {
          "alias": "resolve_identity",
          "source": "worker.services.identity.resolve_identity",
          "type": "from"
        },
        {
          "alias": "record_peer_credit",
          "source": "worker.services.peer_credit.record_peer_credit",
          "type": "from"
        },
        {
          "alias": "resolve_repository_context",
          "source": "worker.services.repository.resolve_repository_context",
          "type": "from"
        },
        {
          "alias": "ReviewSignal",
          "source": "worker.services.scoring.modifiers.ReviewSignal",
          "type": "from"
        },
        {
          "alias": "record_triage",
          "source": "worker.services.triage.record_triage",
          "type": "from"
        },
        {
          "alias": "append_evidence",
          "source": "worker.services.workflow.append_evidence",
          "type": "from"
        },
        {
          "alias": "assign_assertions",
          "source": "worker.services.workflow.assign_assertions",
          "type": "from"
        },
        {
          "alias": "get_or_create_workflow",
          "source": "worker.services.workflow.get_or_create_workflow",
          "type": "from"
        },
        {
          "alias": "mark_baseline_applied",
          "source": "worker.services.workflow.mark_baseline_applied",
          "type": "from"
        }
      ],
      "module": "worker.services.github_processor",
      "path": "Src/backend/worker/services/github_processor.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "select(m.IntegrationEventLog.id).where(m.IntegrationEventLog.provider == provider).where(m.IntegrationEventLog.delivery_key == delivery_key)",
              "lineno": 18,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.IntegrationEventLog.id).where(m.IntegrationEventLog.provider == provider)",
              "lineno": 18,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.IntegrationEventLog.id)",
              "lineno": 18,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).first()",
              "lineno": 22,
              "name": "session.execute.first",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 22,
              "name": "session.execute",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 11,
          "name": "check_idempotency",
          "qualname": "check_idempotency",
          "return_annotation": "bool"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "m.IntegrationEventLog(provider=provider, delivery_key=delivery_key, action=action, entity=entity, tenant_id=tenant_id, status=status, metadata_json=metadata)",
              "lineno": 36,
              "name": "m.IntegrationEventLog",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(log)",
              "lineno": 45,
              "name": "session.add",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 25,
          "name": "record_idempotency",
          "qualname": "record_idempotency",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "worker.services.idempotency",
      "path": "Src/backend/worker/services/idempotency.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 16,
          "methods": [],
          "name": "IdentityMatch"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "value.strip().lower()",
              "lineno": 25,
              "name": "value.strip.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "value.strip()",
              "lineno": 25,
              "name": "value.strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 22,
          "name": "normalize_email",
          "qualname": "normalize_email",
          "return_annotation": "str | None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "payload.get(key)",
              "lineno": 39,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity, dict)",
              "lineno": 40,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get(email_key)",
              "lineno": 42,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(value, str)",
              "lineno": 43,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "emails.append(value)",
              "lineno": 44,
              "name": "emails.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity.get('author'), dict)",
              "lineno": 45,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('author')",
              "lineno": 45,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('author')",
              "lineno": 45,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity.get('committer'), dict)",
              "lineno": 46,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('committer')",
              "lineno": 46,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('committer')",
              "lineno": 46,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(nested, dict)",
              "lineno": 48,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "nested.get('email')",
              "lineno": 49,
              "name": "nested.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(email, str)",
              "lineno": 50,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "emails.append(email)",
              "lineno": 51,
              "name": "emails.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('commits')",
              "lineno": 52,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(commits, list)",
              "lineno": 53,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(commit, dict)",
              "lineno": 55,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "commit.get(person_key)",
              "lineno": 58,
              "name": "commit.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(person, dict)",
              "lineno": 59,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "person.get('email')",
              "lineno": 60,
              "name": "person.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(email, str)",
              "lineno": 61,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "emails.append(email)",
              "lineno": 62,
              "name": "emails.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "payload.get('pull_request')",
              "lineno": 63,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(pull_request, dict)",
              "lineno": 64,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "pull_request.get(subkey)",
              "lineno": 66,
              "name": "pull_request.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity, dict)",
              "lineno": 67,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('email')",
              "lineno": 68,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(email, str)",
              "lineno": 69,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "emails.append(email)",
              "lineno": 70,
              "name": "emails.append",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 28,
          "name": "candidate_emails",
          "qualname": "candidate_emails",
          "return_annotation": "Iterable[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "payload.get(key)",
              "lineno": 77,
              "name": "payload.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(entity, dict)",
              "lineno": 78,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "entity.get('login')",
              "lineno": 79,
              "name": "entity.get",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "isinstance(login, str)",
              "lineno": 80,
              "name": "isinstance",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logins.append(login.strip().lower())",
              "lineno": 81,
              "name": "logins.append",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "login.strip().lower()",
              "lineno": 81,
              "name": "login.strip.lower",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "login.strip()",
              "lineno": 81,
              "name": "login.strip",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 74,
          "name": "candidate_logins",
          "qualname": "candidate_logins",
          "return_annotation": "Iterable[str]"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "normalize_email(email)",
              "lineno": 86,
              "name": "normalize_email",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "candidate_emails(payload)",
              "lineno": 86,
              "name": "candidate_emails",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "normalize_email(email)",
              "lineno": 86,
              "name": "normalize_email",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "candidate_logins(payload)",
              "lineno": 87,
              "name": "candidate_logins",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider).where(m.DeveloperIdentity.email_lower.in_(emails)).limit(1)",
              "lineno": 91,
              "name": "select.where.where.limit",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider).where(m.DeveloperIdentity.email_lower.in_(emails))",
              "lineno": 91,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider)",
              "lineno": 91,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id)",
              "lineno": 91,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "m.DeveloperIdentity.email_lower.in_(emails)",
              "lineno": 93,
              "name": "m.DeveloperIdentity.email_lower.in_",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).first()",
              "lineno": 96,
              "name": "session.execute.first",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 96,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "IdentityMatch(developer_id=developer_id, tenant_id=tenant_id, source='email')",
              "lineno": 99,
              "name": "IdentityMatch",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider).where(func.lower(m.DeveloperIdentity.provider_login).in_(logins)).limit(1)",
              "lineno": 103,
              "name": "select.where.where.limit",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider).where(func.lower(m.DeveloperIdentity.provider_login).in_(logins))",
              "lineno": 103,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id).where(m.DeveloperIdentity.provider == provider)",
              "lineno": 103,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.DeveloperIdentity.developer_id, m.DeveloperIdentity.tenant_id)",
              "lineno": 103,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "func.lower(m.DeveloperIdentity.provider_login).in_(logins)",
              "lineno": 105,
              "name": "func.lower.in_",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "database",
              "display": "func.lower(m.DeveloperIdentity.provider_login)",
              "lineno": 105,
              "name": "func.lower",
              "resolved_module": "sqlalchemy.func"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).first()",
              "lineno": 108,
              "name": "session.execute.first",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 108,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "IdentityMatch(developer_id=developer_id, tenant_id=tenant_id, source='login')",
              "lineno": 111,
              "name": "IdentityMatch",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.info('identity.resolve.no_match', extra={'provider': provider, 'emails': emails, 'logins': logins})",
              "lineno": 113,
              "name": "logger.info",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 85,
          "name": "resolve_identity",
          "qualname": "resolve_identity",
          "return_annotation": "Optional[IdentityMatch]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "func",
          "source": "sqlalchemy.func",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "worker.services.identity",
      "path": "Src/backend/worker/services/identity.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 24,
          "methods": [
            "__init__",
            "process",
            "_jira_key",
            "_handle_issue_transition"
          ],
          "name": "JiraEventProcessor"
        }
      ],
      "functions": [],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "session_scope",
          "source": "worker.services.database.session_scope",
          "type": "from"
        },
        {
          "alias": "check_idempotency",
          "source": "worker.services.idempotency.check_idempotency",
          "type": "from"
        },
        {
          "alias": "record_idempotency",
          "source": "worker.services.idempotency.record_idempotency",
          "type": "from"
        },
        {
          "alias": "resolve_repository_context",
          "source": "worker.services.repository.resolve_repository_context",
          "type": "from"
        },
        {
          "alias": "increment",
          "source": "app.instrumentation.metrics.increment",
          "type": "from"
        },
        {
          "alias": "record_triage",
          "source": "worker.services.triage.record_triage",
          "type": "from"
        },
        {
          "alias": "finalize_workflow",
          "source": "worker.services.github_processor.finalize_workflow",
          "type": "from"
        },
        {
          "alias": "_parse_datetime",
          "source": "worker.services.github_processor._parse_datetime",
          "type": "from"
        }
      ],
      "module": "worker.services.jira_processor",
      "path": "Src/backend/worker/services/jira_processor.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 26,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "timedelta(days=window_days)",
              "lineno": 26,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "database",
              "display": "select(m.PeerReviewCredit).where(m.PeerReviewCredit.tenant_id == tenant_id).where(m.PeerReviewCredit.reviewer_developer_id == reviewer_developer_id).where(m.PeerReviewCredit.window_end >= window_start)",
              "lineno": 29,
              "name": "select.where.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.PeerReviewCredit).where(m.PeerReviewCredit.tenant_id == tenant_id).where(m.PeerReviewCredit.reviewer_developer_id == reviewer_developer_id)",
              "lineno": 29,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.PeerReviewCredit).where(m.PeerReviewCredit.tenant_id == tenant_id)",
              "lineno": 29,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.PeerReviewCredit)",
              "lineno": 29,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).scalars().all()",
              "lineno": 34,
              "name": "session.execute.scalars.all",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).scalars()",
              "lineno": 34,
              "name": "session.execute.scalars",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 34,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "sum((item.credit_value for item in existing))",
              "lineno": 35,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.PeerReviewCredit(tenant_id=tenant_id, reviewer_developer_id=reviewer_developer_id, repo_full_name=repo_full_name, pr_number=pr_number, credit_value=value, window_start=window_start, window_end=window_start + timedelta(days=window_days), evidence=evidence)",
              "lineno": 40,
              "name": "m.PeerReviewCredit",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "timedelta(days=window_days)",
              "lineno": 47,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "session.add(credit)",
              "lineno": 50,
              "name": "session.add",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 12,
          "name": "record_peer_credit",
          "qualname": "record_peer_credit",
          "return_annotation": "float"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.services.peer_credit",
      "path": "Src/backend/worker/services/peer_credit.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "select(m.RepositoryMapping).where(m.RepositoryMapping.provider == provider).where(m.RepositoryMapping.repo_full_name == repo_full_name)",
              "lineno": 16,
              "name": "select.where.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.RepositoryMapping).where(m.RepositoryMapping.provider == provider)",
              "lineno": 16,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.RepositoryMapping)",
              "lineno": 16,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).scalar_one_or_none()",
              "lineno": 20,
              "name": "session.execute.scalar_one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 20,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "logger.warning('repository.mapping.missing', extra={'provider': provider, 'repo_full_name': repo_full_name})",
              "lineno": 22,
              "name": "logger.warning",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 14,
          "name": "resolve_repository_context",
          "qualname": "resolve_repository_context",
          "return_annotation": "Optional[m.RepositoryMapping]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Optional",
          "source": "typing.Optional",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "worker.services.repository",
      "path": "Src/backend/worker/services/repository.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [],
      "imports": [
        {
          "alias": "compute_baseline_delta",
          "source": "baseline.compute_baseline_delta",
          "type": "from"
        },
        {
          "alias": "apply_modifiers",
          "source": "modifiers.apply_modifiers",
          "type": "from"
        },
        {
          "alias": "allocate_peer_review_credit",
          "source": "peer_reviews.allocate_peer_review_credit",
          "type": "from"
        }
      ],
      "module": "worker.services.scoring.__init__",
      "path": "Src/backend/worker/services/scoring/__init__.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 10,
          "methods": [],
          "name": "BaselineContext"
        }
      ],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "compute_baseline_delta",
          "qualname": "compute_baseline_delta",
          "return_annotation": "float | None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.services.scoring.baseline",
      "path": "Src/backend/worker/services/scoring/baseline.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 11,
          "methods": [],
          "name": "ReviewSignal"
        },
        {
          "docstring": null,
          "lineno": 19,
          "methods": [],
          "name": "ModifierContext"
        }
      ],
      "functions": [
        {
          "calls": [],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 29,
          "name": "_time_to_merge_modifier",
          "qualname": "_time_to_merge_modifier",
          "return_annotation": "float"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "sum((1 for signal in ctx.review_signals if signal.nit_comment))",
              "lineno": 48,
              "name": "sum",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "_time_to_merge_modifier(ctx.time_to_merge_seconds)",
              "lineno": 55,
              "name": "_time_to_merge_modifier",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 39,
          "name": "apply_modifiers",
          "qualname": "apply_modifiers",
          "return_annotation": "float"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.services.scoring.modifiers",
      "path": "Src/backend/worker/services/scoring/modifiers.py",
      "routers": []
    },
    {
      "classes": [
        {
          "docstring": null,
          "lineno": 12,
          "methods": [],
          "name": "PeerReviewEvent"
        }
      ],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "defaultdict(float)",
              "lineno": 25,
              "name": "defaultdict",
              "resolved_module": "collections.defaultdict"
            },
            {
              "category": "internal",
              "display": "datetime.utcnow()",
              "lineno": 26,
              "name": "datetime.utcnow",
              "resolved_module": "datetime.datetime"
            },
            {
              "category": "internal",
              "display": "timedelta(days=window_days)",
              "lineno": 26,
              "name": "timedelta",
              "resolved_module": "datetime.timedelta"
            },
            {
              "category": "internal",
              "display": "min(credit_value, credit_value * cap_per_window)",
              "lineno": 33,
              "name": "min",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "dict(accrued)",
              "lineno": 36,
              "name": "dict",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 20,
          "name": "allocate_peer_review_credit",
          "qualname": "allocate_peer_review_credit",
          "return_annotation": "dict[int, float]"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "defaultdict",
          "source": "collections.defaultdict",
          "type": "from"
        },
        {
          "alias": "dataclass",
          "source": "dataclasses.dataclass",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "timedelta",
          "source": "datetime.timedelta",
          "type": "from"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "settings",
          "source": "app.config.settings",
          "type": "from"
        }
      ],
      "module": "worker.services.scoring.peer_reviews",
      "path": "Src/backend/worker/services/scoring/peer_reviews.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "internal",
              "display": "m.AttributionTriage(provider=provider, delivery_key=delivery_key, reason=reason, payload=payload)",
              "lineno": 18,
              "name": "m.AttributionTriage",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(entry)",
              "lineno": 24,
              "name": "session.add",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 10,
          "name": "record_triage",
          "qualname": "record_triage",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "Any",
          "source": "typing.Any",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        }
      ],
      "module": "worker.services.triage",
      "path": "Src/backend/worker/services/triage.py",
      "routers": []
    },
    {
      "classes": [],
      "functions": [
        {
          "calls": [
            {
              "category": "database",
              "display": "select(m.AttributionWorkflow).where(m.AttributionWorkflow.tenant_id == tenant_id, m.AttributionWorkflow.repo_full_name == repo_full_name)",
              "lineno": 25,
              "name": "select.where",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "database",
              "display": "select(m.AttributionWorkflow)",
              "lineno": 25,
              "name": "select",
              "resolved_module": "sqlalchemy.select"
            },
            {
              "category": "internal",
              "display": "stmt.where(or_(m.AttributionWorkflow.pr_number == pr_number, m.AttributionWorkflow.jira_key == jira_key))",
              "lineno": 30,
              "name": "stmt.where",
              "resolved_module": null
            },
            {
              "category": "database",
              "display": "or_(m.AttributionWorkflow.pr_number == pr_number, m.AttributionWorkflow.jira_key == jira_key)",
              "lineno": 31,
              "name": "or_",
              "resolved_module": "sqlalchemy.or_"
            },
            {
              "category": "internal",
              "display": "stmt.where(m.AttributionWorkflow.pr_number == pr_number)",
              "lineno": 37,
              "name": "stmt.where",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "stmt.where(m.AttributionWorkflow.jira_key == jira_key)",
              "lineno": 39,
              "name": "stmt.where",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt).scalar_one_or_none()",
              "lineno": 41,
              "name": "session.execute.scalar_one_or_none",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.execute(stmt)",
              "lineno": 41,
              "name": "session.execute",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "m.AttributionWorkflow(tenant_id=tenant_id, repo_full_name=repo_full_name, pr_number=pr_number, jira_key=jira_key)",
              "lineno": 43,
              "name": "m.AttributionWorkflow",
              "resolved_module": "app.domain.models"
            },
            {
              "category": "internal",
              "display": "session.add(workflow)",
              "lineno": 49,
              "name": "session.add",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "session.flush()",
              "lineno": 50,
              "name": "session.flush",
              "resolved_module": null
            },
            {
              "category": "internal",
              "display": "increment('workflow.lifecycle', action='created', tenant_id=tenant_id)",
              "lineno": 51,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            },
            {
              "category": "internal",
              "display": "increment('workflow.lifecycle', action='reused', tenant_id=tenant_id)",
              "lineno": 57,
              "name": "increment",
              "resolved_module": "app.instrumentation.metrics.increment"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 17,
          "name": "get_or_create_workflow",
          "qualname": "get_or_create_workflow",
          "return_annotation": "m.AttributionWorkflow"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "list(assertions)",
              "lineno": 62,
              "name": "list",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 61,
          "name": "assign_assertions",
          "qualname": "assign_assertions",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "dict(workflow.evidence or {})",
              "lineno": 66,
              "name": "dict",
              "resolved_module": null
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 65,
          "name": "append_evidence",
          "qualname": "append_evidence",
          "return_annotation": "None"
        },
        {
          "calls": [
            {
              "category": "internal",
              "display": "datetime.now(timezone.utc)",
              "lineno": 72,
              "name": "datetime.now",
              "resolved_module": "datetime.datetime"
            }
          ],
          "decorators": [],
          "dependencies": [],
          "docstring": null,
          "endpoint": null,
          "is_async": false,
          "lineno": 71,
          "name": "mark_baseline_applied",
          "qualname": "mark_baseline_applied",
          "return_annotation": "None"
        }
      ],
      "imports": [
        {
          "alias": "annotations",
          "source": "__future__.annotations",
          "type": "from"
        },
        {
          "alias": "logging",
          "source": "logging",
          "type": "import"
        },
        {
          "alias": "Iterable",
          "source": "typing.Iterable",
          "type": "from"
        },
        {
          "alias": "or_",
          "source": "sqlalchemy.or_",
          "type": "from"
        },
        {
          "alias": "select",
          "source": "sqlalchemy.select",
          "type": "from"
        },
        {
          "alias": "Session",
          "source": "sqlalchemy.orm.Session",
          "type": "from"
        },
        {
          "alias": "timezone",
          "source": "datetime.timezone",
          "type": "from"
        },
        {
          "alias": "datetime",
          "source": "datetime.datetime",
          "type": "from"
        },
        {
          "alias": "m",
          "source": "app.domain.models",
          "type": "from"
        },
        {
          "alias": "increment",
          "source": "app.instrumentation.metrics.increment",
          "type": "from"
        }
      ],
      "module": "worker.services.workflow",
      "path": "Src/backend/worker/services/workflow.py",
      "routers": []
    }
  ],
  "project_root": "C:\\Users\\rchan\\OneDrive\\Desktop\\Git-Rajach-1854-11\\North-Star"
}
